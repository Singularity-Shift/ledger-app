import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Any } from '@initia/initia.proto/google/protobuf/any';
import { MsgSubmitTx as MsgSubmitTx_pb } from '@initia/initia.proto/initia/intertx/v1/tx';
import { Msg } from '../../Msg';
export declare class MsgSubmitTx extends JSONSerializable<MsgSubmitTx.Amino, MsgSubmitTx.Data, MsgSubmitTx.Proto> {
    owner: AccAddress;
    connection_id: string;
    msg?: Msg | undefined;
    constructor(owner: AccAddress, connection_id: string, msg?: Msg | undefined);
    static fromAmino(data: MsgSubmitTx.Amino): MsgSubmitTx;
    toAmino(): MsgSubmitTx.Amino;
    static fromData(data: MsgSubmitTx.Data): MsgSubmitTx;
    toData(): MsgSubmitTx.Data;
    static fromProto(proto: MsgSubmitTx.Proto): MsgSubmitTx;
    toProto(): MsgSubmitTx.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): MsgSubmitTx;
}
export declare namespace MsgSubmitTx {
    interface Amino {
        type: 'intertx/MsgSubmitTx';
        value: {
            owner: AccAddress;
            connection_id: string;
            msg?: Msg.Amino;
        };
    }
    interface Data {
        '@type': '/initia.intertx.v1.MsgSubmitTx';
        owner: AccAddress;
        connection_id: string;
        msg?: Msg.Data;
    }
    type Proto = MsgSubmitTx_pb;
}
