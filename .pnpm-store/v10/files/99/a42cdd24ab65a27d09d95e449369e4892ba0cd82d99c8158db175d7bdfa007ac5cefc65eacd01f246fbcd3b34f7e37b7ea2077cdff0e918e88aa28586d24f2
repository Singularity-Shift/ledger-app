import _m0 from "protobufjs/minimal";
import { BaseAccount } from "../../../cosmos/auth/v1beta1/auth";
export declare const protobufPackage = "minievm.evm.v1";
/** ContractAccount defines an account of contract. */
export interface ContractAccount {
    baseAccount?: BaseAccount | undefined;
    codeHash: Uint8Array;
}
/**
 * ShorthandAccount defines an account of shorthand address
 * which is used to store the original long address (32bytes).
 *
 * Also it is used to check the existence of the account before
 * creating a new account.
 */
export interface ShorthandAccount {
    baseAccount?: BaseAccount | undefined;
    originalAddress: string;
}
export declare const ContractAccount: {
    encode(message: ContractAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractAccount;
    fromJSON(object: any): ContractAccount;
    toJSON(message: ContractAccount): unknown;
    create(base?: DeepPartial<ContractAccount>): ContractAccount;
    fromPartial(object: DeepPartial<ContractAccount>): ContractAccount;
};
export declare const ShorthandAccount: {
    encode(message: ShorthandAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ShorthandAccount;
    fromJSON(object: any): ShorthandAccount;
    toJSON(message: ShorthandAccount): unknown;
    create(base?: DeepPartial<ShorthandAccount>): ShorthandAccount;
    fromPartial(object: DeepPartial<ShorthandAccount>): ShorthandAccount;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
