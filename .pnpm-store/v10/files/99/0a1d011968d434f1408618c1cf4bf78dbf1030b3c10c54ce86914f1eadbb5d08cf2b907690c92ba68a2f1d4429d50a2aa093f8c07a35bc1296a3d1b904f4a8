import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "celestia.blob.v1";
/**
 * EventPayForBlobs defines an event that is emitted after a pay for blob has
 * been processed.
 */
export interface EventPayForBlobs {
    signer: string;
    blobSizes: number[];
    /**
     * namespaces is a list of namespaces that the blobs in blob_sizes belong to.
     * A namespace has length of 29 bytes where the first byte is the
     * namespaceVersion and the subsequent 28 bytes are the namespaceID.
     */
    namespaces: Uint8Array[];
}
export declare const EventPayForBlobs: {
    encode(message: EventPayForBlobs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPayForBlobs;
    fromJSON(object: any): EventPayForBlobs;
    toJSON(message: EventPayForBlobs): unknown;
    create(base?: DeepPartial<EventPayForBlobs>): EventPayForBlobs;
    fromPartial(object: DeepPartial<EventPayForBlobs>): EventPayForBlobs;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
