"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/types/v2/currency_pair.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyPair = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "connect.types.v2";
function createBaseCurrencyPair() {
    return { Base: "", Quote: "" };
}
exports.CurrencyPair = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.Base !== "") {
            writer.uint32(10).string(message.Base);
        }
        if (message.Quote !== "") {
            writer.uint32(18).string(message.Quote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.Base = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.Quote = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Base: isSet(object.Base) ? gt.String(object.Base) : "",
            Quote: isSet(object.Quote) ? gt.String(object.Quote) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Base !== "") {
            obj.Base = message.Base;
        }
        if (message.Quote !== "") {
            obj.Quote = message.Quote;
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPair.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCurrencyPair();
        message.Base = object.Base ?? "";
        message.Quote = object.Quote ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=currency_pair.js.map