import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "celestia.core.v1.blob";
/**
 * Blob (named after binary large object) is a chunk of data submitted by a user
 * to be published to the Celestia blockchain. The data of a Blob is published
 * to a namespace and is encoded into shares based on the format specified by
 * share_version.
 */
export interface Blob {
    namespaceId: Uint8Array;
    data: Uint8Array;
    shareVersion: number;
    namespaceVersion: number;
}
/**
 * BlobTx wraps an encoded sdk.Tx with a second field to contain blobs of data.
 * The raw bytes of the blobs are not signed over, instead we verify each blob
 * using the relevant MsgPayForBlobs that is signed over in the encoded sdk.Tx.
 */
export interface BlobTx {
    tx: Uint8Array;
    blobs: Blob[];
    typeId: string;
}
export declare const Blob: {
    encode(message: Blob, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blob;
    fromJSON(object: any): Blob;
    toJSON(message: Blob): unknown;
    create(base?: DeepPartial<Blob>): Blob;
    fromPartial(object: DeepPartial<Blob>): Blob;
};
export declare const BlobTx: {
    encode(message: BlobTx, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlobTx;
    fromJSON(object: any): BlobTx;
    toJSON(message: BlobTx): unknown;
    create(base?: DeepPartial<BlobTx>): BlobTx;
    fromPartial(object: DeepPartial<BlobTx>): BlobTx;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
