"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: minievm/evm/v1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisEVMBlockHash = exports.GenesisClassTrace = exports.GenesisDenomTrace = exports.GenesisERC20Stores = exports.GenesisKeyValue = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "minievm.evm.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        keyValues: [],
        erc20s: [],
        erc20Stores: [],
        denomTraces: [],
        classTraces: [],
        evmBlockHashes: [],
        erc20Factory: new Uint8Array(0),
        erc20Wrapper: new Uint8Array(0),
        connectOracle: new Uint8Array(0),
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.keyValues) {
            exports.GenesisKeyValue.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.erc20s) {
            writer.uint32(26).bytes(v);
        }
        for (const v of message.erc20Stores) {
            exports.GenesisERC20Stores.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.denomTraces) {
            exports.GenesisDenomTrace.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.classTraces) {
            exports.GenesisClassTrace.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.evmBlockHashes) {
            exports.GenesisEVMBlockHash.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.erc20Factory.length !== 0) {
            writer.uint32(66).bytes(message.erc20Factory);
        }
        if (message.erc20Wrapper.length !== 0) {
            writer.uint32(74).bytes(message.erc20Wrapper);
        }
        if (message.connectOracle.length !== 0) {
            writer.uint32(82).bytes(message.connectOracle);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.keyValues.push(exports.GenesisKeyValue.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.erc20s.push(reader.bytes());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.erc20Stores.push(exports.GenesisERC20Stores.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.denomTraces.push(exports.GenesisDenomTrace.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.classTraces.push(exports.GenesisClassTrace.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.evmBlockHashes.push(exports.GenesisEVMBlockHash.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.erc20Factory = reader.bytes();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.erc20Wrapper = reader.bytes();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.connectOracle = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            keyValues: gt.Array.isArray(object?.keyValues)
                ? object.keyValues.map((e) => exports.GenesisKeyValue.fromJSON(e))
                : [],
            erc20s: gt.Array.isArray(object?.erc20s) ? object.erc20s.map((e) => bytesFromBase64(e)) : [],
            erc20Stores: gt.Array.isArray(object?.erc20Stores)
                ? object.erc20Stores.map((e) => exports.GenesisERC20Stores.fromJSON(e))
                : [],
            denomTraces: gt.Array.isArray(object?.denomTraces)
                ? object.denomTraces.map((e) => exports.GenesisDenomTrace.fromJSON(e))
                : [],
            classTraces: gt.Array.isArray(object?.classTraces)
                ? object.classTraces.map((e) => exports.GenesisClassTrace.fromJSON(e))
                : [],
            evmBlockHashes: gt.Array.isArray(object?.evmBlockHashes)
                ? object.evmBlockHashes.map((e) => exports.GenesisEVMBlockHash.fromJSON(e))
                : [],
            erc20Factory: isSet(object.erc20Factory) ? bytesFromBase64(object.erc20Factory) : new Uint8Array(0),
            erc20Wrapper: isSet(object.erc20Wrapper) ? bytesFromBase64(object.erc20Wrapper) : new Uint8Array(0),
            connectOracle: isSet(object.connectOracle) ? bytesFromBase64(object.connectOracle) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.keyValues?.length) {
            obj.keyValues = message.keyValues.map((e) => exports.GenesisKeyValue.toJSON(e));
        }
        if (message.erc20s?.length) {
            obj.erc20s = message.erc20s.map((e) => base64FromBytes(e));
        }
        if (message.erc20Stores?.length) {
            obj.erc20Stores = message.erc20Stores.map((e) => exports.GenesisERC20Stores.toJSON(e));
        }
        if (message.denomTraces?.length) {
            obj.denomTraces = message.denomTraces.map((e) => exports.GenesisDenomTrace.toJSON(e));
        }
        if (message.classTraces?.length) {
            obj.classTraces = message.classTraces.map((e) => exports.GenesisClassTrace.toJSON(e));
        }
        if (message.evmBlockHashes?.length) {
            obj.evmBlockHashes = message.evmBlockHashes.map((e) => exports.GenesisEVMBlockHash.toJSON(e));
        }
        if (message.erc20Factory.length !== 0) {
            obj.erc20Factory = base64FromBytes(message.erc20Factory);
        }
        if (message.erc20Wrapper.length !== 0) {
            obj.erc20Wrapper = base64FromBytes(message.erc20Wrapper);
        }
        if (message.connectOracle.length !== 0) {
            obj.connectOracle = base64FromBytes(message.connectOracle);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.keyValues = object.keyValues?.map((e) => exports.GenesisKeyValue.fromPartial(e)) || [];
        message.erc20s = object.erc20s?.map((e) => e) || [];
        message.erc20Stores = object.erc20Stores?.map((e) => exports.GenesisERC20Stores.fromPartial(e)) || [];
        message.denomTraces = object.denomTraces?.map((e) => exports.GenesisDenomTrace.fromPartial(e)) || [];
        message.classTraces = object.classTraces?.map((e) => exports.GenesisClassTrace.fromPartial(e)) || [];
        message.evmBlockHashes = object.evmBlockHashes?.map((e) => exports.GenesisEVMBlockHash.fromPartial(e)) || [];
        message.erc20Factory = object.erc20Factory ?? new Uint8Array(0);
        message.erc20Wrapper = object.erc20Wrapper ?? new Uint8Array(0);
        message.connectOracle = object.connectOracle ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGenesisKeyValue() {
    return { key: new Uint8Array(0), value: new Uint8Array(0) };
}
exports.GenesisKeyValue = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisKeyValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisKeyValue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisKeyValue();
        message.key = object.key ?? new Uint8Array(0);
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGenesisERC20Stores() {
    return { address: new Uint8Array(0), stores: [] };
}
exports.GenesisERC20Stores = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address.length !== 0) {
            writer.uint32(10).bytes(message.address);
        }
        for (const v of message.stores) {
            writer.uint32(18).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisERC20Stores();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stores.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array(0),
            stores: gt.Array.isArray(object?.stores) ? object.stores.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address.length !== 0) {
            obj.address = base64FromBytes(message.address);
        }
        if (message.stores?.length) {
            obj.stores = message.stores.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisERC20Stores.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisERC20Stores();
        message.address = object.address ?? new Uint8Array(0);
        message.stores = object.stores?.map((e) => e) || [];
        return message;
    },
};
function createBaseGenesisDenomTrace() {
    return { denom: "", contractAddress: new Uint8Array(0) };
}
exports.GenesisDenomTrace = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.contractAddress.length !== 0) {
            writer.uint32(18).bytes(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisDenomTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddress = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? gt.String(object.denom) : "",
            contractAddress: isSet(object.contractAddress)
                ? bytesFromBase64(object.contractAddress)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.contractAddress.length !== 0) {
            obj.contractAddress = base64FromBytes(message.contractAddress);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisDenomTrace.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisDenomTrace();
        message.denom = object.denom ?? "";
        message.contractAddress = object.contractAddress ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGenesisClassTrace() {
    return { classId: "", contractAddress: new Uint8Array(0), uri: "" };
}
exports.GenesisClassTrace = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.contractAddress.length !== 0) {
            writer.uint32(18).bytes(message.contractAddress);
        }
        if (message.uri !== "") {
            writer.uint32(26).string(message.uri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisClassTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddress = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? gt.String(object.classId) : "",
            contractAddress: isSet(object.contractAddress)
                ? bytesFromBase64(object.contractAddress)
                : new Uint8Array(0),
            uri: isSet(object.uri) ? gt.String(object.uri) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.contractAddress.length !== 0) {
            obj.contractAddress = base64FromBytes(message.contractAddress);
        }
        if (message.uri !== "") {
            obj.uri = message.uri;
        }
        return obj;
    },
    create(base) {
        return exports.GenesisClassTrace.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisClassTrace();
        message.classId = object.classId ?? "";
        message.contractAddress = object.contractAddress ?? new Uint8Array(0);
        message.uri = object.uri ?? "";
        return message;
    },
};
function createBaseGenesisEVMBlockHash() {
    return { hash: new Uint8Array(0), height: 0n };
}
exports.GenesisEVMBlockHash = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hash.length !== 0) {
            writer.uint32(10).bytes(message.hash);
        }
        if (message.height !== 0n) {
            if (BigInt.asUintN(64, message.height) !== message.height) {
                throw new gt.Error("value provided for field message.height of type uint64 too large");
            }
            writer.uint32(16).uint64(message.height.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisEVMBlockHash();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.height = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
            height: isSet(object.height) ? BigInt(object.height) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hash.length !== 0) {
            obj.hash = base64FromBytes(message.hash);
        }
        if (message.height !== 0n) {
            obj.height = message.height.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GenesisEVMBlockHash.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisEVMBlockHash();
        message.hash = object.hash ?? new Uint8Array(0);
        message.height = object.height ?? 0n;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map