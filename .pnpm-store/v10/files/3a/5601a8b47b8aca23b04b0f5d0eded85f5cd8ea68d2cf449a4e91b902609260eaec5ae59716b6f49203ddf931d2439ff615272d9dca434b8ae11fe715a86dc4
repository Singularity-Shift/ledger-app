"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmos/app/runtime/v1alpha1/module.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreKeyConfig = exports.Module = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.app.runtime.v1alpha1";
function createBaseModule() {
    return {
        appName: "",
        beginBlockers: [],
        endBlockers: [],
        initGenesis: [],
        exportGenesis: [],
        overrideStoreKeys: [],
        orderMigrations: [],
        precommiters: [],
        prepareCheckStaters: [],
    };
}
exports.Module = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.appName !== "") {
            writer.uint32(10).string(message.appName);
        }
        for (const v of message.beginBlockers) {
            writer.uint32(18).string(v);
        }
        for (const v of message.endBlockers) {
            writer.uint32(26).string(v);
        }
        for (const v of message.initGenesis) {
            writer.uint32(34).string(v);
        }
        for (const v of message.exportGenesis) {
            writer.uint32(42).string(v);
        }
        for (const v of message.overrideStoreKeys) {
            exports.StoreKeyConfig.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.orderMigrations) {
            writer.uint32(58).string(v);
        }
        for (const v of message.precommiters) {
            writer.uint32(66).string(v);
        }
        for (const v of message.prepareCheckStaters) {
            writer.uint32(74).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.beginBlockers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.endBlockers.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.initGenesis.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.exportGenesis.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.overrideStoreKeys.push(exports.StoreKeyConfig.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.orderMigrations.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.precommiters.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.prepareCheckStaters.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appName: isSet(object.appName) ? gt.String(object.appName) : "",
            beginBlockers: gt.Array.isArray(object?.beginBlockers)
                ? object.beginBlockers.map((e) => gt.String(e))
                : [],
            endBlockers: gt.Array.isArray(object?.endBlockers)
                ? object.endBlockers.map((e) => gt.String(e))
                : [],
            initGenesis: gt.Array.isArray(object?.initGenesis)
                ? object.initGenesis.map((e) => gt.String(e))
                : [],
            exportGenesis: gt.Array.isArray(object?.exportGenesis)
                ? object.exportGenesis.map((e) => gt.String(e))
                : [],
            overrideStoreKeys: gt.Array.isArray(object?.overrideStoreKeys)
                ? object.overrideStoreKeys.map((e) => exports.StoreKeyConfig.fromJSON(e))
                : [],
            orderMigrations: gt.Array.isArray(object?.orderMigrations)
                ? object.orderMigrations.map((e) => gt.String(e))
                : [],
            precommiters: gt.Array.isArray(object?.precommiters)
                ? object.precommiters.map((e) => gt.String(e))
                : [],
            prepareCheckStaters: gt.Array.isArray(object?.prepareCheckStaters)
                ? object.prepareCheckStaters.map((e) => gt.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.beginBlockers?.length) {
            obj.beginBlockers = message.beginBlockers;
        }
        if (message.endBlockers?.length) {
            obj.endBlockers = message.endBlockers;
        }
        if (message.initGenesis?.length) {
            obj.initGenesis = message.initGenesis;
        }
        if (message.exportGenesis?.length) {
            obj.exportGenesis = message.exportGenesis;
        }
        if (message.overrideStoreKeys?.length) {
            obj.overrideStoreKeys = message.overrideStoreKeys.map((e) => exports.StoreKeyConfig.toJSON(e));
        }
        if (message.orderMigrations?.length) {
            obj.orderMigrations = message.orderMigrations;
        }
        if (message.precommiters?.length) {
            obj.precommiters = message.precommiters;
        }
        if (message.prepareCheckStaters?.length) {
            obj.prepareCheckStaters = message.prepareCheckStaters;
        }
        return obj;
    },
    create(base) {
        return exports.Module.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModule();
        message.appName = object.appName ?? "";
        message.beginBlockers = object.beginBlockers?.map((e) => e) || [];
        message.endBlockers = object.endBlockers?.map((e) => e) || [];
        message.initGenesis = object.initGenesis?.map((e) => e) || [];
        message.exportGenesis = object.exportGenesis?.map((e) => e) || [];
        message.overrideStoreKeys = object.overrideStoreKeys?.map((e) => exports.StoreKeyConfig.fromPartial(e)) || [];
        message.orderMigrations = object.orderMigrations?.map((e) => e) || [];
        message.precommiters = object.precommiters?.map((e) => e) || [];
        message.prepareCheckStaters = object.prepareCheckStaters?.map((e) => e) || [];
        return message;
    },
};
function createBaseStoreKeyConfig() {
    return { moduleName: "", kvStoreKey: "" };
}
exports.StoreKeyConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.moduleName !== "") {
            writer.uint32(10).string(message.moduleName);
        }
        if (message.kvStoreKey !== "") {
            writer.uint32(18).string(message.kvStoreKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStoreKeyConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.kvStoreKey = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleName: isSet(object.moduleName) ? gt.String(object.moduleName) : "",
            kvStoreKey: isSet(object.kvStoreKey) ? gt.String(object.kvStoreKey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.kvStoreKey !== "") {
            obj.kvStoreKey = message.kvStoreKey;
        }
        return obj;
    },
    create(base) {
        return exports.StoreKeyConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStoreKeyConfig();
        message.moduleName = object.moduleName ?? "";
        message.kvStoreKey = object.kvStoreKey ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=module.js.map