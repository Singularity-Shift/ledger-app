import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Module, Params, Resource, TableEntry, TableInfo } from "./types";
export declare const protobufPackage = "initia.move.v1";
/**
 * QueryModuleRequest is the request type for the Query/Module RPC
 * method
 */
export interface QueryModuleRequest {
    /** address is the owner address of the module to query */
    address: string;
    /** module_name is the module name to query */
    moduleName: string;
}
/**
 * QueryModuleResponse is the response type for the Query/Module RPC
 * method
 */
export interface QueryModuleResponse {
    module?: Module | undefined;
}
/**
 * QueryModulesRequest is the request type for the Query/Modules
 * RPC method
 */
export interface QueryModulesRequest {
    /** address is the owner address of the modules to query */
    address: string;
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/**
 * QueryModulesResponse is the response type for the
 * Query/Modules RPC method
 */
export interface QueryModulesResponse {
    modules: Module[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/**
 * QueryResourceRequest is the request type for the Query/Resource RPC
 * method
 */
export interface QueryResourceRequest {
    /** address is the owner address of the module to query */
    address: string;
    /** struct_tag is the unique identifier of the resource to query */
    structTag: string;
}
/**
 * QueryResourceResponse is the response type for the Query/Resource RPC
 * method
 */
export interface QueryResourceResponse {
    resource?: Resource | undefined;
}
/**
 * QueryResourcesRequest is the request type for the Query/Resources RPC
 * method
 */
export interface QueryResourcesRequest {
    /** address is the owner address of the module to query */
    address: string;
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/**
 * QueryResourcesResponse is the response type for the Query/Resources RPC
 * method
 */
export interface QueryResourcesResponse {
    resources: Resource[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/**
 * QueryTableInfoRequest is the request type for the Query/TableInfo RPC
 * method
 */
export interface QueryTableInfoRequest {
    /** address is the table handle */
    address: string;
}
/**
 * QueryTableInfoResponse is the response type for the Query/TableInfo RPC
 * method
 */
export interface QueryTableInfoResponse {
    tableInfo?: TableInfo | undefined;
}
/**
 * QueryTableEntryRequest is the request type for the Query/TableEntry RPC
 * method
 */
export interface QueryTableEntryRequest {
    /** address is the table handle */
    address: string;
    /** a key of the table entry */
    keyBytes: Uint8Array;
}
/**
 * QueryTableEntryResponse is the response type for the Query/TableEntry RPC
 * method
 */
export interface QueryTableEntryResponse {
    tableEntry?: TableEntry | undefined;
}
/**
 * QueryTableEntriesRequest is the request type for the Query/TableEntries RPC
 * method
 */
export interface QueryTableEntriesRequest {
    /** address is the table handle */
    address: string;
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/**
 * QueryTableEntriesResponse is the response type for the Query/TableEntries RPC
 * method
 */
export interface QueryTableEntriesResponse {
    tableEntries: TableEntry[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/**
 * QueryLegacyViewRequest is the request type for the QueryLegacyView
 * RPC method
 */
export interface QueryLegacyViewRequest {
    /** Address is the owner address of the module to query */
    address: string;
    /** ModuleName is the module name of the entry function to query */
    moduleName: string;
    /** FunctionName is the name of a function to query */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /**
     * Args is the arguments of a function to execute
     * - number: little endian
     * - string: base64 bytes
     */
    args: Uint8Array[];
}
/**
 * QueryLegacyViewResponse is the response type for the
 * QueryLegacyView RPC method
 */
export interface QueryLegacyViewResponse {
    data: string;
    events: VMEvent[];
    gasUsed: bigint;
}
/**
 * QueryViewRequest is the request type for the QueryView
 * RPC method
 */
export interface QueryViewRequest {
    /** Address is the owner address of the module to query */
    address: string;
    /** ModuleName is the module name of the entry function to query */
    moduleName: string;
    /** FunctionName is the name of a function to query */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /**
     * Args is the arguments of a function to execute
     * - number: little endian
     * - string: base64 bytes
     */
    args: Uint8Array[];
}
/**
 * QueryViewResponse is the response type for the
 * QueryView RPC method
 */
export interface QueryViewResponse {
    data: string;
    events: VMEvent[];
    gasUsed: bigint;
}
/**
 * QueryViewBatchRequest is the request type for the QueryViewBatch
 * RPC method
 */
export interface QueryViewBatchRequest {
    requests: QueryViewRequest[];
}
/**
 * QueryViewBatchResponse is the response type for the
 * QueryViewBatch RPC method
 */
export interface QueryViewBatchResponse {
    responses: QueryViewResponse[];
}
/**
 * QueryViewJSONRequest is the request type for the QueryViewJSON
 * RPC method
 */
export interface QueryViewJSONRequest {
    /** Address is the owner address of the module to query */
    address: string;
    /** ModuleName is the module name of the entry function to query */
    moduleName: string;
    /** FunctionName is the name of a function to query */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /** Args is the arguments of a function to execute in json stringify format */
    args: string[];
}
/**
 * QueryViewJSONResponse is the response type for the
 * QueryViewJSON RPC method
 */
export interface QueryViewJSONResponse {
    data: string;
    events: VMEvent[];
    gasUsed: bigint;
}
/**
 * QueryViewJSONBatchRequest is the request type for the QueryViewJSONBatch
 * RPC method
 */
export interface QueryViewJSONBatchRequest {
    requests: QueryViewJSONRequest[];
}
/**
 * QueryViewJSONBatchResponse is the response type for the
 * QueryViewJSONBatch RPC method
 */
export interface QueryViewJSONBatchResponse {
    responses: QueryViewJSONResponse[];
}
/** VMEvent is the event emitted from vm. */
export interface VMEvent {
    typeTag: string;
    data: string;
}
/**
 * QueryScriptABIRequest is the request type for the Query/ScriptABI
 * RPC method
 */
export interface QueryScriptABIRequest {
    /** CodeBytes is the script code for query operation */
    codeBytes: Uint8Array;
}
/**
 * QueryScriptABIResponse is the response type for the
 * Query/ScriptABI RPC method
 */
export interface QueryScriptABIResponse {
    abi: Uint8Array;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
}
/** QueryMetadataRequest is the request type for the Query/Metadata RPC method. */
export interface QueryMetadataRequest {
    denom: string;
}
/** QueryMetadataResponse is the response type for the Query/Metadata RPC method. */
export interface QueryMetadataResponse {
    metadata: string;
}
/** QueryDenomRequest is the request type for the Query/Denom RPC method. */
export interface QueryDenomRequest {
    metadata: string;
}
/** QueryDenomResponse is the response type for the Query/Denom RPC method. */
export interface QueryDenomResponse {
    denom: string;
}
export declare const QueryModuleRequest: {
    encode(message: QueryModuleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleRequest;
    fromJSON(object: any): QueryModuleRequest;
    toJSON(message: QueryModuleRequest): unknown;
    create(base?: DeepPartial<QueryModuleRequest>): QueryModuleRequest;
    fromPartial(object: DeepPartial<QueryModuleRequest>): QueryModuleRequest;
};
export declare const QueryModuleResponse: {
    encode(message: QueryModuleResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleResponse;
    fromJSON(object: any): QueryModuleResponse;
    toJSON(message: QueryModuleResponse): unknown;
    create(base?: DeepPartial<QueryModuleResponse>): QueryModuleResponse;
    fromPartial(object: DeepPartial<QueryModuleResponse>): QueryModuleResponse;
};
export declare const QueryModulesRequest: {
    encode(message: QueryModulesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModulesRequest;
    fromJSON(object: any): QueryModulesRequest;
    toJSON(message: QueryModulesRequest): unknown;
    create(base?: DeepPartial<QueryModulesRequest>): QueryModulesRequest;
    fromPartial(object: DeepPartial<QueryModulesRequest>): QueryModulesRequest;
};
export declare const QueryModulesResponse: {
    encode(message: QueryModulesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModulesResponse;
    fromJSON(object: any): QueryModulesResponse;
    toJSON(message: QueryModulesResponse): unknown;
    create(base?: DeepPartial<QueryModulesResponse>): QueryModulesResponse;
    fromPartial(object: DeepPartial<QueryModulesResponse>): QueryModulesResponse;
};
export declare const QueryResourceRequest: {
    encode(message: QueryResourceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryResourceRequest;
    fromJSON(object: any): QueryResourceRequest;
    toJSON(message: QueryResourceRequest): unknown;
    create(base?: DeepPartial<QueryResourceRequest>): QueryResourceRequest;
    fromPartial(object: DeepPartial<QueryResourceRequest>): QueryResourceRequest;
};
export declare const QueryResourceResponse: {
    encode(message: QueryResourceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryResourceResponse;
    fromJSON(object: any): QueryResourceResponse;
    toJSON(message: QueryResourceResponse): unknown;
    create(base?: DeepPartial<QueryResourceResponse>): QueryResourceResponse;
    fromPartial(object: DeepPartial<QueryResourceResponse>): QueryResourceResponse;
};
export declare const QueryResourcesRequest: {
    encode(message: QueryResourcesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryResourcesRequest;
    fromJSON(object: any): QueryResourcesRequest;
    toJSON(message: QueryResourcesRequest): unknown;
    create(base?: DeepPartial<QueryResourcesRequest>): QueryResourcesRequest;
    fromPartial(object: DeepPartial<QueryResourcesRequest>): QueryResourcesRequest;
};
export declare const QueryResourcesResponse: {
    encode(message: QueryResourcesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryResourcesResponse;
    fromJSON(object: any): QueryResourcesResponse;
    toJSON(message: QueryResourcesResponse): unknown;
    create(base?: DeepPartial<QueryResourcesResponse>): QueryResourcesResponse;
    fromPartial(object: DeepPartial<QueryResourcesResponse>): QueryResourcesResponse;
};
export declare const QueryTableInfoRequest: {
    encode(message: QueryTableInfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryTableInfoRequest;
    fromJSON(object: any): QueryTableInfoRequest;
    toJSON(message: QueryTableInfoRequest): unknown;
    create(base?: DeepPartial<QueryTableInfoRequest>): QueryTableInfoRequest;
    fromPartial(object: DeepPartial<QueryTableInfoRequest>): QueryTableInfoRequest;
};
export declare const QueryTableInfoResponse: {
    encode(message: QueryTableInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryTableInfoResponse;
    fromJSON(object: any): QueryTableInfoResponse;
    toJSON(message: QueryTableInfoResponse): unknown;
    create(base?: DeepPartial<QueryTableInfoResponse>): QueryTableInfoResponse;
    fromPartial(object: DeepPartial<QueryTableInfoResponse>): QueryTableInfoResponse;
};
export declare const QueryTableEntryRequest: {
    encode(message: QueryTableEntryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryTableEntryRequest;
    fromJSON(object: any): QueryTableEntryRequest;
    toJSON(message: QueryTableEntryRequest): unknown;
    create(base?: DeepPartial<QueryTableEntryRequest>): QueryTableEntryRequest;
    fromPartial(object: DeepPartial<QueryTableEntryRequest>): QueryTableEntryRequest;
};
export declare const QueryTableEntryResponse: {
    encode(message: QueryTableEntryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryTableEntryResponse;
    fromJSON(object: any): QueryTableEntryResponse;
    toJSON(message: QueryTableEntryResponse): unknown;
    create(base?: DeepPartial<QueryTableEntryResponse>): QueryTableEntryResponse;
    fromPartial(object: DeepPartial<QueryTableEntryResponse>): QueryTableEntryResponse;
};
export declare const QueryTableEntriesRequest: {
    encode(message: QueryTableEntriesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryTableEntriesRequest;
    fromJSON(object: any): QueryTableEntriesRequest;
    toJSON(message: QueryTableEntriesRequest): unknown;
    create(base?: DeepPartial<QueryTableEntriesRequest>): QueryTableEntriesRequest;
    fromPartial(object: DeepPartial<QueryTableEntriesRequest>): QueryTableEntriesRequest;
};
export declare const QueryTableEntriesResponse: {
    encode(message: QueryTableEntriesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryTableEntriesResponse;
    fromJSON(object: any): QueryTableEntriesResponse;
    toJSON(message: QueryTableEntriesResponse): unknown;
    create(base?: DeepPartial<QueryTableEntriesResponse>): QueryTableEntriesResponse;
    fromPartial(object: DeepPartial<QueryTableEntriesResponse>): QueryTableEntriesResponse;
};
export declare const QueryLegacyViewRequest: {
    encode(message: QueryLegacyViewRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLegacyViewRequest;
    fromJSON(object: any): QueryLegacyViewRequest;
    toJSON(message: QueryLegacyViewRequest): unknown;
    create(base?: DeepPartial<QueryLegacyViewRequest>): QueryLegacyViewRequest;
    fromPartial(object: DeepPartial<QueryLegacyViewRequest>): QueryLegacyViewRequest;
};
export declare const QueryLegacyViewResponse: {
    encode(message: QueryLegacyViewResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLegacyViewResponse;
    fromJSON(object: any): QueryLegacyViewResponse;
    toJSON(message: QueryLegacyViewResponse): unknown;
    create(base?: DeepPartial<QueryLegacyViewResponse>): QueryLegacyViewResponse;
    fromPartial(object: DeepPartial<QueryLegacyViewResponse>): QueryLegacyViewResponse;
};
export declare const QueryViewRequest: {
    encode(message: QueryViewRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewRequest;
    fromJSON(object: any): QueryViewRequest;
    toJSON(message: QueryViewRequest): unknown;
    create(base?: DeepPartial<QueryViewRequest>): QueryViewRequest;
    fromPartial(object: DeepPartial<QueryViewRequest>): QueryViewRequest;
};
export declare const QueryViewResponse: {
    encode(message: QueryViewResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewResponse;
    fromJSON(object: any): QueryViewResponse;
    toJSON(message: QueryViewResponse): unknown;
    create(base?: DeepPartial<QueryViewResponse>): QueryViewResponse;
    fromPartial(object: DeepPartial<QueryViewResponse>): QueryViewResponse;
};
export declare const QueryViewBatchRequest: {
    encode(message: QueryViewBatchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewBatchRequest;
    fromJSON(object: any): QueryViewBatchRequest;
    toJSON(message: QueryViewBatchRequest): unknown;
    create(base?: DeepPartial<QueryViewBatchRequest>): QueryViewBatchRequest;
    fromPartial(object: DeepPartial<QueryViewBatchRequest>): QueryViewBatchRequest;
};
export declare const QueryViewBatchResponse: {
    encode(message: QueryViewBatchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewBatchResponse;
    fromJSON(object: any): QueryViewBatchResponse;
    toJSON(message: QueryViewBatchResponse): unknown;
    create(base?: DeepPartial<QueryViewBatchResponse>): QueryViewBatchResponse;
    fromPartial(object: DeepPartial<QueryViewBatchResponse>): QueryViewBatchResponse;
};
export declare const QueryViewJSONRequest: {
    encode(message: QueryViewJSONRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewJSONRequest;
    fromJSON(object: any): QueryViewJSONRequest;
    toJSON(message: QueryViewJSONRequest): unknown;
    create(base?: DeepPartial<QueryViewJSONRequest>): QueryViewJSONRequest;
    fromPartial(object: DeepPartial<QueryViewJSONRequest>): QueryViewJSONRequest;
};
export declare const QueryViewJSONResponse: {
    encode(message: QueryViewJSONResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewJSONResponse;
    fromJSON(object: any): QueryViewJSONResponse;
    toJSON(message: QueryViewJSONResponse): unknown;
    create(base?: DeepPartial<QueryViewJSONResponse>): QueryViewJSONResponse;
    fromPartial(object: DeepPartial<QueryViewJSONResponse>): QueryViewJSONResponse;
};
export declare const QueryViewJSONBatchRequest: {
    encode(message: QueryViewJSONBatchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewJSONBatchRequest;
    fromJSON(object: any): QueryViewJSONBatchRequest;
    toJSON(message: QueryViewJSONBatchRequest): unknown;
    create(base?: DeepPartial<QueryViewJSONBatchRequest>): QueryViewJSONBatchRequest;
    fromPartial(object: DeepPartial<QueryViewJSONBatchRequest>): QueryViewJSONBatchRequest;
};
export declare const QueryViewJSONBatchResponse: {
    encode(message: QueryViewJSONBatchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryViewJSONBatchResponse;
    fromJSON(object: any): QueryViewJSONBatchResponse;
    toJSON(message: QueryViewJSONBatchResponse): unknown;
    create(base?: DeepPartial<QueryViewJSONBatchResponse>): QueryViewJSONBatchResponse;
    fromPartial(object: DeepPartial<QueryViewJSONBatchResponse>): QueryViewJSONBatchResponse;
};
export declare const VMEvent: {
    encode(message: VMEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VMEvent;
    fromJSON(object: any): VMEvent;
    toJSON(message: VMEvent): unknown;
    create(base?: DeepPartial<VMEvent>): VMEvent;
    fromPartial(object: DeepPartial<VMEvent>): VMEvent;
};
export declare const QueryScriptABIRequest: {
    encode(message: QueryScriptABIRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryScriptABIRequest;
    fromJSON(object: any): QueryScriptABIRequest;
    toJSON(message: QueryScriptABIRequest): unknown;
    create(base?: DeepPartial<QueryScriptABIRequest>): QueryScriptABIRequest;
    fromPartial(object: DeepPartial<QueryScriptABIRequest>): QueryScriptABIRequest;
};
export declare const QueryScriptABIResponse: {
    encode(message: QueryScriptABIResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryScriptABIResponse;
    fromJSON(object: any): QueryScriptABIResponse;
    toJSON(message: QueryScriptABIResponse): unknown;
    create(base?: DeepPartial<QueryScriptABIResponse>): QueryScriptABIResponse;
    fromPartial(object: DeepPartial<QueryScriptABIResponse>): QueryScriptABIResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
export declare const QueryMetadataRequest: {
    encode(message: QueryMetadataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMetadataRequest;
    fromJSON(object: any): QueryMetadataRequest;
    toJSON(message: QueryMetadataRequest): unknown;
    create(base?: DeepPartial<QueryMetadataRequest>): QueryMetadataRequest;
    fromPartial(object: DeepPartial<QueryMetadataRequest>): QueryMetadataRequest;
};
export declare const QueryMetadataResponse: {
    encode(message: QueryMetadataResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMetadataResponse;
    fromJSON(object: any): QueryMetadataResponse;
    toJSON(message: QueryMetadataResponse): unknown;
    create(base?: DeepPartial<QueryMetadataResponse>): QueryMetadataResponse;
    fromPartial(object: DeepPartial<QueryMetadataResponse>): QueryMetadataResponse;
};
export declare const QueryDenomRequest: {
    encode(message: QueryDenomRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryDenomRequest;
    fromJSON(object: any): QueryDenomRequest;
    toJSON(message: QueryDenomRequest): unknown;
    create(base?: DeepPartial<QueryDenomRequest>): QueryDenomRequest;
    fromPartial(object: DeepPartial<QueryDenomRequest>): QueryDenomRequest;
};
export declare const QueryDenomResponse: {
    encode(message: QueryDenomResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryDenomResponse;
    fromJSON(object: any): QueryDenomResponse;
    toJSON(message: QueryDenomResponse): unknown;
    create(base?: DeepPartial<QueryDenomResponse>): QueryDenomResponse;
    fromPartial(object: DeepPartial<QueryDenomResponse>): QueryDenomResponse;
};
/** Query provides defines the gRPC querier service */
export interface Query {
    /** Module gets the module info */
    Module(request: DeepPartial<QueryModuleRequest>, metadata?: grpc.Metadata): Promise<QueryModuleResponse>;
    /** Modules gets the module infos */
    Modules(request: DeepPartial<QueryModulesRequest>, metadata?: grpc.Metadata): Promise<QueryModulesResponse>;
    /** Resource gets the module info */
    Resource(request: DeepPartial<QueryResourceRequest>, metadata?: grpc.Metadata): Promise<QueryResourceResponse>;
    /** Resources gets the module infos */
    Resources(request: DeepPartial<QueryResourcesRequest>, metadata?: grpc.Metadata): Promise<QueryResourcesResponse>;
    /** Query table info of the given address */
    TableInfo(request: DeepPartial<QueryTableInfoRequest>, metadata?: grpc.Metadata): Promise<QueryTableInfoResponse>;
    /** Query table entry of the given key */
    TableEntry(request: DeepPartial<QueryTableEntryRequest>, metadata?: grpc.Metadata): Promise<QueryTableEntryResponse>;
    /** Query table entries with pagination */
    TableEntries(request: DeepPartial<QueryTableEntriesRequest>, metadata?: grpc.Metadata): Promise<QueryTableEntriesResponse>;
    /**
     * Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
     * LegacyView execute view function and return the view result.
     *
     * @deprecated
     */
    LegacyView(request: DeepPartial<QueryLegacyViewRequest>, metadata?: grpc.Metadata): Promise<QueryLegacyViewResponse>;
    /**
     * Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
     * View execute view function and return the view result
     */
    View(request: DeepPartial<QueryViewRequest>, metadata?: grpc.Metadata): Promise<QueryViewResponse>;
    /**
     * Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
     * ViewBatch execute multiple view functions and return the view results
     */
    ViewBatch(request: DeepPartial<QueryViewBatchRequest>, metadata?: grpc.Metadata): Promise<QueryViewBatchResponse>;
    /** ViewJSON execute view function with json arguments and return the view result */
    ViewJSON(request: DeepPartial<QueryViewJSONRequest>, metadata?: grpc.Metadata): Promise<QueryViewJSONResponse>;
    /** ViewJSONBatch execute multiple view functions with json arguments and return the view results */
    ViewJSONBatch(request: DeepPartial<QueryViewJSONBatchRequest>, metadata?: grpc.Metadata): Promise<QueryViewJSONBatchResponse>;
    /** ScriptABI decode script bytes into ABI */
    ScriptABI(request: DeepPartial<QueryScriptABIRequest>, metadata?: grpc.Metadata): Promise<QueryScriptABIResponse>;
    /** Params queries all parameters. */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    /** Metadata converts metadata to denom */
    Metadata(request: DeepPartial<QueryMetadataRequest>, metadata?: grpc.Metadata): Promise<QueryMetadataResponse>;
    /** Denom converts denom to metadata */
    Denom(request: DeepPartial<QueryDenomRequest>, metadata?: grpc.Metadata): Promise<QueryDenomResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Module(request: DeepPartial<QueryModuleRequest>, metadata?: grpc.Metadata): Promise<QueryModuleResponse>;
    Modules(request: DeepPartial<QueryModulesRequest>, metadata?: grpc.Metadata): Promise<QueryModulesResponse>;
    Resource(request: DeepPartial<QueryResourceRequest>, metadata?: grpc.Metadata): Promise<QueryResourceResponse>;
    Resources(request: DeepPartial<QueryResourcesRequest>, metadata?: grpc.Metadata): Promise<QueryResourcesResponse>;
    TableInfo(request: DeepPartial<QueryTableInfoRequest>, metadata?: grpc.Metadata): Promise<QueryTableInfoResponse>;
    TableEntry(request: DeepPartial<QueryTableEntryRequest>, metadata?: grpc.Metadata): Promise<QueryTableEntryResponse>;
    TableEntries(request: DeepPartial<QueryTableEntriesRequest>, metadata?: grpc.Metadata): Promise<QueryTableEntriesResponse>;
    LegacyView(request: DeepPartial<QueryLegacyViewRequest>, metadata?: grpc.Metadata): Promise<QueryLegacyViewResponse>;
    View(request: DeepPartial<QueryViewRequest>, metadata?: grpc.Metadata): Promise<QueryViewResponse>;
    ViewBatch(request: DeepPartial<QueryViewBatchRequest>, metadata?: grpc.Metadata): Promise<QueryViewBatchResponse>;
    ViewJSON(request: DeepPartial<QueryViewJSONRequest>, metadata?: grpc.Metadata): Promise<QueryViewJSONResponse>;
    ViewJSONBatch(request: DeepPartial<QueryViewJSONBatchRequest>, metadata?: grpc.Metadata): Promise<QueryViewJSONBatchResponse>;
    ScriptABI(request: DeepPartial<QueryScriptABIRequest>, metadata?: grpc.Metadata): Promise<QueryScriptABIResponse>;
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    Metadata(request: DeepPartial<QueryMetadataRequest>, metadata?: grpc.Metadata): Promise<QueryMetadataResponse>;
    Denom(request: DeepPartial<QueryDenomRequest>, metadata?: grpc.Metadata): Promise<QueryDenomResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryModuleDesc: UnaryMethodDefinitionish;
export declare const QueryModulesDesc: UnaryMethodDefinitionish;
export declare const QueryResourceDesc: UnaryMethodDefinitionish;
export declare const QueryResourcesDesc: UnaryMethodDefinitionish;
export declare const QueryTableInfoDesc: UnaryMethodDefinitionish;
export declare const QueryTableEntryDesc: UnaryMethodDefinitionish;
export declare const QueryTableEntriesDesc: UnaryMethodDefinitionish;
export declare const QueryLegacyViewDesc: UnaryMethodDefinitionish;
export declare const QueryViewDesc: UnaryMethodDefinitionish;
export declare const QueryViewBatchDesc: UnaryMethodDefinitionish;
export declare const QueryViewJSONDesc: UnaryMethodDefinitionish;
export declare const QueryViewJSONBatchDesc: UnaryMethodDefinitionish;
export declare const QueryScriptABIDesc: UnaryMethodDefinitionish;
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
export declare const QueryMetadataDesc: UnaryMethodDefinitionish;
export declare const QueryDenomDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
