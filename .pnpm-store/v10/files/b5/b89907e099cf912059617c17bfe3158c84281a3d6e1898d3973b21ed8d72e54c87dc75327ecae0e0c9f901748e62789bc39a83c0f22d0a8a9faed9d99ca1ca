"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: ibc/applications/nft_transfer/v1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenData = exports.ClassData = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "ibc.applications.nft_transfer.v1";
function createBaseGenesisState() {
    return { portId: "", classTraces: [], classData: [], tokenData: [], params: undefined };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.portId !== "") {
            writer.uint32(10).string(message.portId);
        }
        for (const v of message.classTraces) {
            types_1.ClassTrace.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.classData) {
            exports.ClassData.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.tokenData) {
            exports.TokenData.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.portId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classTraces.push(types_1.ClassTrace.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.classData.push(exports.ClassData.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.tokenData.push(exports.TokenData.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            portId: isSet(object.portId) ? gt.String(object.portId) : "",
            classTraces: gt.Array.isArray(object?.classTraces)
                ? object.classTraces.map((e) => types_1.ClassTrace.fromJSON(e))
                : [],
            classData: gt.Array.isArray(object?.classData)
                ? object.classData.map((e) => exports.ClassData.fromJSON(e))
                : [],
            tokenData: gt.Array.isArray(object?.tokenData)
                ? object.tokenData.map((e) => exports.TokenData.fromJSON(e))
                : [],
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.portId !== "") {
            obj.portId = message.portId;
        }
        if (message.classTraces?.length) {
            obj.classTraces = message.classTraces.map((e) => types_1.ClassTrace.toJSON(e));
        }
        if (message.classData?.length) {
            obj.classData = message.classData.map((e) => exports.ClassData.toJSON(e));
        }
        if (message.tokenData?.length) {
            obj.tokenData = message.tokenData.map((e) => exports.TokenData.toJSON(e));
        }
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.portId = object.portId ?? "";
        message.classTraces = object.classTraces?.map((e) => types_1.ClassTrace.fromPartial(e)) || [];
        message.classData = object.classData?.map((e) => exports.ClassData.fromPartial(e)) || [];
        message.tokenData = object.tokenData?.map((e) => exports.TokenData.fromPartial(e)) || [];
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseClassData() {
    return { traceHash: new Uint8Array(0), data: "" };
}
exports.ClassData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.traceHash.length !== 0) {
            writer.uint32(10).bytes(message.traceHash);
        }
        if (message.data !== "") {
            writer.uint32(18).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClassData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.traceHash = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            traceHash: isSet(object.traceHash) ? bytesFromBase64(object.traceHash) : new Uint8Array(0),
            data: isSet(object.data) ? gt.String(object.data) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.traceHash.length !== 0) {
            obj.traceHash = base64FromBytes(message.traceHash);
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.ClassData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClassData();
        message.traceHash = object.traceHash ?? new Uint8Array(0);
        message.data = object.data ?? "";
        return message;
    },
};
function createBaseTokenData() {
    return { traceHash: new Uint8Array(0), tokenId: "", data: "" };
}
exports.TokenData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.traceHash.length !== 0) {
            writer.uint32(10).bytes(message.traceHash);
        }
        if (message.tokenId !== "") {
            writer.uint32(18).string(message.tokenId);
        }
        if (message.data !== "") {
            writer.uint32(26).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.traceHash = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            traceHash: isSet(object.traceHash) ? bytesFromBase64(object.traceHash) : new Uint8Array(0),
            tokenId: isSet(object.tokenId) ? gt.String(object.tokenId) : "",
            data: isSet(object.data) ? gt.String(object.data) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.traceHash.length !== 0) {
            obj.traceHash = base64FromBytes(message.traceHash);
        }
        if (message.tokenId !== "") {
            obj.tokenId = message.tokenId;
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.TokenData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenData();
        message.traceHash = object.traceHash ?? new Uint8Array(0);
        message.tokenId = object.tokenId ?? "";
        message.data = object.data ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map