import _m0 from "protobufjs/minimal";
import { Duration } from "../../../google/protobuf/duration";
export declare const protobufPackage = "initia.reward.v1";
/** Params defines the set of mint parameters. */
export interface Params {
    rewardDenom: string;
    dilutionPeriod?: Duration | undefined;
    releaseRate: string;
    /**
     * The dilution rate of release rate.
     * if `(block.timestamp - last_dilute_timestamp) < dilution_period`:
     *    `release_rate -= (release_rate * dilution_rate)`
     *    `last_dilution_timestamp = block.timestamp`
     */
    dilutionRate: string;
    releaseEnabled: boolean;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    create(base?: DeepPartial<Params>): Params;
    fromPartial(object: DeepPartial<Params>): Params;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
