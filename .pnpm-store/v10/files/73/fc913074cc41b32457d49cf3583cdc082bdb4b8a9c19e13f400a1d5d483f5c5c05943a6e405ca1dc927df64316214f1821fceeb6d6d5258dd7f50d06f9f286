import { default as z } from 'zod';
export declare const EncodeObjectSchema: z.ZodObject<{
    typeUrl: z.ZodString;
    value: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, any>;
    typeUrl: string;
}, {
    value: Record<string, any>;
    typeUrl: string;
}>;
export declare const TxBodyValueSchema: z.ZodObject<{
    messages: z.ZodArray<z.ZodObject<{
        typeUrl: z.ZodString;
        value: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, any>;
        typeUrl: string;
    }, {
        value: Record<string, any>;
        typeUrl: string;
    }>, "many">;
    memo: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    messages: {
        value: Record<string, any>;
        typeUrl: string;
    }[];
    memo?: string | undefined;
}, {
    messages: {
        value: Record<string, any>;
        typeUrl: string;
    }[];
    memo?: string | undefined;
}>;
export type EncodeObject = z.infer<typeof EncodeObjectSchema>;
export type TxBodyValue = z.infer<typeof TxBodyValueSchema>;
export declare const CoinSchema: z.ZodObject<{
    amount: z.ZodString;
    denom: z.ZodString;
}, "strip", z.ZodTypeAny, {
    amount: string;
    denom: string;
}, {
    amount: string;
    denom: string;
}>;
export declare class TimeoutError extends Error {
    transactionHash: string;
    constructor(transactionHash: string);
}
