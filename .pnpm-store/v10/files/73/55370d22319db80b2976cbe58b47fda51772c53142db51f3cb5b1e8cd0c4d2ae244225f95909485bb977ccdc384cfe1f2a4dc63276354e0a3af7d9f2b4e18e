"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/service/v2/oracle.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.OracleVersionDesc = exports.OracleMarketMapDesc = exports.OraclePricesDesc = exports.OracleDesc = exports.OracleClientImpl = exports.QueryVersionResponse = exports.QueryVersionRequest = exports.QueryMarketMapResponse = exports.QueryMarketMapRequest = exports.QueryPricesResponse_PricesEntry = exports.QueryPricesResponse = exports.QueryPricesRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("../../../google/protobuf/timestamp");
const market_1 = require("../../marketmap/v2/market");
exports.protobufPackage = "connect.service.v2";
function createBaseQueryPricesRequest() {
    return {};
}
exports.QueryPricesRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPricesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryPricesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryPricesRequest();
        return message;
    },
};
function createBaseQueryPricesResponse() {
    return { prices: new Map(), timestamp: undefined, version: "" };
}
exports.QueryPricesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.prices.forEach((value, key) => {
            exports.QueryPricesResponse_PricesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPricesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.QueryPricesResponse_PricesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.prices.set(entry1.key, entry1.value);
                    }
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            prices: isObject(object.prices)
                ? Object.entries(object.prices).reduce((acc, [key, value]) => {
                    acc.set(key, String(value));
                    return acc;
                }, new Map())
                : new Map(),
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            version: isSet(object.version) ? gt.String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.prices?.size) {
            obj.prices = {};
            message.prices.forEach((v, k) => {
                obj.prices[k] = v;
            });
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPricesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryPricesResponse();
        message.prices = (() => {
            const m = new Map();
            (object.prices ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, gt.String(value));
                }
            });
            return m;
        })();
        message.timestamp = object.timestamp ?? undefined;
        message.version = object.version ?? "";
        return message;
    },
};
function createBaseQueryPricesResponse_PricesEntry() {
    return { key: "", value: "" };
}
exports.QueryPricesResponse_PricesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPricesResponse_PricesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? gt.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.QueryPricesResponse_PricesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryPricesResponse_PricesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseQueryMarketMapRequest() {
    return {};
}
exports.QueryMarketMapRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMarketMapRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryMarketMapRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryMarketMapRequest();
        return message;
    },
};
function createBaseQueryMarketMapResponse() {
    return { marketMap: undefined };
}
exports.QueryMarketMapResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketMap !== undefined) {
            market_1.MarketMap.encode(message.marketMap, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMarketMapResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.marketMap = market_1.MarketMap.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { marketMap: isSet(object.marketMap) ? market_1.MarketMap.fromJSON(object.marketMap) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.marketMap !== undefined) {
            obj.marketMap = market_1.MarketMap.toJSON(message.marketMap);
        }
        return obj;
    },
    create(base) {
        return exports.QueryMarketMapResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryMarketMapResponse();
        message.marketMap =
            object.marketMap !== undefined && object.marketMap !== null
                ? market_1.MarketMap.fromPartial(object.marketMap)
                : undefined;
        return message;
    },
};
function createBaseQueryVersionRequest() {
    return {};
}
exports.QueryVersionRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVersionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryVersionRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryVersionRequest();
        return message;
    },
};
function createBaseQueryVersionResponse() {
    return { version: "" };
}
exports.QueryVersionResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVersionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { version: isSet(object.version) ? gt.String(object.version) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.QueryVersionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryVersionResponse();
        message.version = object.version ?? "";
        return message;
    },
};
class OracleClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Prices = this.Prices.bind(this);
        this.MarketMap = this.MarketMap.bind(this);
        this.Version = this.Version.bind(this);
    }
    Prices(request, metadata) {
        return this.rpc.unary(exports.OraclePricesDesc, exports.QueryPricesRequest.fromPartial(request), metadata);
    }
    MarketMap(request, metadata) {
        return this.rpc.unary(exports.OracleMarketMapDesc, exports.QueryMarketMapRequest.fromPartial(request), metadata);
    }
    Version(request, metadata) {
        return this.rpc.unary(exports.OracleVersionDesc, exports.QueryVersionRequest.fromPartial(request), metadata);
    }
}
exports.OracleClientImpl = OracleClientImpl;
exports.OracleDesc = { serviceName: "connect.service.v2.Oracle" };
exports.OraclePricesDesc = {
    methodName: "Prices",
    service: exports.OracleDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryPricesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryPricesResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.OracleMarketMapDesc = {
    methodName: "MarketMap",
    service: exports.OracleDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryMarketMapRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryMarketMapResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.OracleVersionDesc = {
    methodName: "Version",
    service: exports.OracleDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryVersionRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryVersionResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (gt.Number(t.seconds.toString()) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new gt.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof gt.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new gt.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=oracle.js.map