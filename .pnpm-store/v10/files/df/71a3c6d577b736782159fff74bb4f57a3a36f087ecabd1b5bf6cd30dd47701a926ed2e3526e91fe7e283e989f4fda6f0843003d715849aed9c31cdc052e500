export declare const FUNGIBLE_ASSET: {
    readonly address: "0x1";
    readonly name: "fungible_asset";
    readonly friends: readonly ["0x1::aptos_account", "0x1::coin", "0x1::dispatchable_fungible_asset", "0x1::governed_gas_pool", "0x1::primary_fungible_store"];
    readonly exposed_functions: readonly [{
        readonly name: "add_fungibility";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef", "0x1::option::Option<u128>", "0x1::string::String", "0x1::string::String", "u8", "0x1::string::String", "0x1::string::String"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "address_burn_from";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::BurnRef", "address", "u64"];
        readonly return: readonly [];
    }, {
        readonly name: "amount";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly ["u64"];
    }, {
        readonly name: "asset_metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "balance";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["u64"];
    }, {
        readonly name: "burn";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::BurnRef", "0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly [];
    }, {
        readonly name: "burn_from";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::fungible_asset::BurnRef", "0x1::object::Object<T0>", "u64"];
        readonly return: readonly [];
    }, {
        readonly name: "burn_internal";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly ["u64"];
    }, {
        readonly name: "burn_ref_metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::BurnRef"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "create_store";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::object::ConstructorRef", "0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::FungibleStore>"];
    }, {
        readonly name: "decimals";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["u8"];
    }, {
        readonly name: "deposit";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>", "0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly [];
    }, {
        readonly name: "deposit_dispatch_function";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::option::Option<0x1::function_info::FunctionInfo>"];
    }, {
        readonly name: "deposit_internal";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["address", "0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly [];
    }, {
        readonly name: "deposit_sanity_check";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>", "bool"];
        readonly return: readonly [];
    }, {
        readonly name: "deposit_with_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::fungible_asset::TransferRef", "0x1::object::Object<T0>", "0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly [];
    }, {
        readonly name: "derived_balance_dispatch_function";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::option::Option<0x1::function_info::FunctionInfo>"];
    }, {
        readonly name: "destroy_zero";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly [];
    }, {
        readonly name: "extract";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&mut 0x1::fungible_asset::FungibleAsset", "u64"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }, {
        readonly name: "generate_burn_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef"];
        readonly return: readonly ["0x1::fungible_asset::BurnRef"];
    }, {
        readonly name: "generate_mint_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef"];
        readonly return: readonly ["0x1::fungible_asset::MintRef"];
    }, {
        readonly name: "generate_mutate_metadata_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef"];
        readonly return: readonly ["0x1::fungible_asset::MutateMetadataRef"];
    }, {
        readonly name: "generate_transfer_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef"];
        readonly return: readonly ["0x1::fungible_asset::TransferRef"];
    }, {
        readonly name: "icon_uri";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::string::String"];
    }, {
        readonly name: "is_address_balance_at_least";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["address", "u64"];
        readonly return: readonly ["bool"];
    }, {
        readonly name: "is_balance_at_least";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>", "u64"];
        readonly return: readonly ["bool"];
    }, {
        readonly name: "is_frozen";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["bool"];
    }, {
        readonly name: "is_store_dispatchable";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["bool"];
    }, {
        readonly name: "is_untransferable";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["bool"];
    }, {
        readonly name: "maximum";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::option::Option<u128>"];
    }, {
        readonly name: "merge";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&mut 0x1::fungible_asset::FungibleAsset", "0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly [];
    }, {
        readonly name: "metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::fungible_asset::Metadata"];
    }, {
        readonly name: "metadata_from_asset";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::FungibleAsset"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "mint";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::MintRef", "u64"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }, {
        readonly name: "mint_internal";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>", "u64"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }, {
        readonly name: "mint_ref_metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::MintRef"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "mint_to";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::fungible_asset::MintRef", "0x1::object::Object<T0>", "u64"];
        readonly return: readonly [];
    }, {
        readonly name: "mutate_metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::MutateMetadataRef", "0x1::option::Option<0x1::string::String>", "0x1::option::Option<0x1::string::String>", "0x1::option::Option<u8>", "0x1::option::Option<0x1::string::String>", "0x1::option::Option<0x1::string::String>"];
        readonly return: readonly [];
    }, {
        readonly name: "name";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::string::String"];
    }, {
        readonly name: "object_from_metadata_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::MutateMetadataRef"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "project_uri";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::string::String"];
    }, {
        readonly name: "register_dispatch_functions";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef", "0x1::option::Option<0x1::function_info::FunctionInfo>", "0x1::option::Option<0x1::function_info::FunctionInfo>", "0x1::option::Option<0x1::function_info::FunctionInfo>"];
        readonly return: readonly [];
    }, {
        readonly name: "remove_store";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::DeleteRef"];
        readonly return: readonly [];
    }, {
        readonly name: "set_frozen_flag";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::fungible_asset::TransferRef", "0x1::object::Object<T0>", "bool"];
        readonly return: readonly [];
    }, {
        readonly name: "set_frozen_flag_internal";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>", "bool"];
        readonly return: readonly [];
    }, {
        readonly name: "set_untransferable";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ConstructorRef"];
        readonly return: readonly [];
    }, {
        readonly name: "store_exists";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["address"];
        readonly return: readonly ["bool"];
    }, {
        readonly name: "store_metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "supply";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::option::Option<u128>"];
    }, {
        readonly name: "symbol";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: true;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::string::String"];
    }, {
        readonly name: "transfer";
        readonly visibility: "public";
        readonly is_entry: true;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&signer", "0x1::object::Object<T0>", "0x1::object::Object<T0>", "u64"];
        readonly return: readonly [];
    }, {
        readonly name: "transfer_ref_metadata";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::fungible_asset::TransferRef"];
        readonly return: readonly ["0x1::object::Object<0x1::fungible_asset::Metadata>"];
    }, {
        readonly name: "transfer_with_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::fungible_asset::TransferRef", "0x1::object::Object<T0>", "0x1::object::Object<T0>", "u64"];
        readonly return: readonly [];
    }, {
        readonly name: "upgrade_store_to_concurrent";
        readonly visibility: "public";
        readonly is_entry: true;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&signer", "0x1::object::Object<T0>"];
        readonly return: readonly [];
    }, {
        readonly name: "upgrade_to_concurrent";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["&0x1::object::ExtendRef"];
        readonly return: readonly [];
    }, {
        readonly name: "withdraw";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&signer", "0x1::object::Object<T0>", "u64"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }, {
        readonly name: "withdraw_dispatch_function";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::option::Option<0x1::function_info::FunctionInfo>"];
    }, {
        readonly name: "withdraw_internal";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [];
        readonly params: readonly ["address", "u64"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }, {
        readonly name: "withdraw_sanity_check";
        readonly visibility: "friend";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&signer", "0x1::object::Object<T0>", "bool"];
        readonly return: readonly [];
    }, {
        readonly name: "withdraw_with_ref";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["&0x1::fungible_asset::TransferRef", "0x1::object::Object<T0>", "u64"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }, {
        readonly name: "zero";
        readonly visibility: "public";
        readonly is_entry: false;
        readonly is_view: false;
        readonly generic_type_params: readonly [{
            readonly constraints: readonly ["key"];
        }];
        readonly params: readonly ["0x1::object::Object<T0>"];
        readonly return: readonly ["0x1::fungible_asset::FungibleAsset"];
    }];
    readonly structs: readonly [{
        readonly name: "BurnRef";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "metadata";
            readonly type: "0x1::object::Object<0x1::fungible_asset::Metadata>";
        }];
    }, {
        readonly name: "ConcurrentFungibleBalance";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "balance";
            readonly type: "0x1::aggregator_v2::Aggregator<u64>";
        }];
    }, {
        readonly name: "ConcurrentSupply";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "current";
            readonly type: "0x1::aggregator_v2::Aggregator<u128>";
        }];
    }, {
        readonly name: "Deposit";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "store";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly type: "u64";
        }];
    }, {
        readonly name: "DepositEvent";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "amount";
            readonly type: "u64";
        }];
    }, {
        readonly name: "DispatchFunctionStore";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "withdraw_function";
            readonly type: "0x1::option::Option<0x1::function_info::FunctionInfo>";
        }, {
            readonly name: "deposit_function";
            readonly type: "0x1::option::Option<0x1::function_info::FunctionInfo>";
        }, {
            readonly name: "derived_balance_function";
            readonly type: "0x1::option::Option<0x1::function_info::FunctionInfo>";
        }];
    }, {
        readonly name: "Frozen";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "store";
            readonly type: "address";
        }, {
            readonly name: "frozen";
            readonly type: "bool";
        }];
    }, {
        readonly name: "FrozenEvent";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "frozen";
            readonly type: "bool";
        }];
    }, {
        readonly name: "FungibleAsset";
        readonly is_native: false;
        readonly abilities: readonly [];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "metadata";
            readonly type: "0x1::object::Object<0x1::fungible_asset::Metadata>";
        }, {
            readonly name: "amount";
            readonly type: "u64";
        }];
    }, {
        readonly name: "FungibleAssetEvents";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "deposit_events";
            readonly type: "0x1::event::EventHandle<0x1::fungible_asset::DepositEvent>";
        }, {
            readonly name: "withdraw_events";
            readonly type: "0x1::event::EventHandle<0x1::fungible_asset::WithdrawEvent>";
        }, {
            readonly name: "frozen_events";
            readonly type: "0x1::event::EventHandle<0x1::fungible_asset::FrozenEvent>";
        }];
    }, {
        readonly name: "FungibleStore";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "metadata";
            readonly type: "0x1::object::Object<0x1::fungible_asset::Metadata>";
        }, {
            readonly name: "balance";
            readonly type: "u64";
        }, {
            readonly name: "frozen";
            readonly type: "bool";
        }];
    }, {
        readonly name: "Metadata";
        readonly is_native: false;
        readonly abilities: readonly ["copy", "drop", "key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "name";
            readonly type: "0x1::string::String";
        }, {
            readonly name: "symbol";
            readonly type: "0x1::string::String";
        }, {
            readonly name: "decimals";
            readonly type: "u8";
        }, {
            readonly name: "icon_uri";
            readonly type: "0x1::string::String";
        }, {
            readonly name: "project_uri";
            readonly type: "0x1::string::String";
        }];
    }, {
        readonly name: "MintRef";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "metadata";
            readonly type: "0x1::object::Object<0x1::fungible_asset::Metadata>";
        }];
    }, {
        readonly name: "MutateMetadataRef";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "metadata";
            readonly type: "0x1::object::Object<0x1::fungible_asset::Metadata>";
        }];
    }, {
        readonly name: "Supply";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "current";
            readonly type: "u128";
        }, {
            readonly name: "maximum";
            readonly type: "0x1::option::Option<u128>";
        }];
    }, {
        readonly name: "TransferRef";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "metadata";
            readonly type: "0x1::object::Object<0x1::fungible_asset::Metadata>";
        }];
    }, {
        readonly name: "Untransferable";
        readonly is_native: false;
        readonly abilities: readonly ["key"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "dummy_field";
            readonly type: "bool";
        }];
    }, {
        readonly name: "Withdraw";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "store";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly type: "u64";
        }];
    }, {
        readonly name: "WithdrawEvent";
        readonly is_native: false;
        readonly abilities: readonly ["drop", "store"];
        readonly generic_type_params: readonly [];
        readonly fields: readonly [{
            readonly name: "amount";
            readonly type: "u64";
        }];
    }];
};
//# sourceMappingURL=fungible_asset.d.ts.map