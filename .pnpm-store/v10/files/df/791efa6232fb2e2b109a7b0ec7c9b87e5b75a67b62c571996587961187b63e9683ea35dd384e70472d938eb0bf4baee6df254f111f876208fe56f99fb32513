"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: initia/gov/v1/gov.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Proposal = exports.TallyResult = exports.Vesting = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const gov_1 = require("../../../cosmos/gov/v1/gov");
const any_1 = require("../../../google/protobuf/any");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "initia.gov.v1";
function createBaseParams() {
    return {
        minDeposit: [],
        maxDepositPeriod: undefined,
        votingPeriod: undefined,
        quorum: "",
        threshold: "",
        vetoThreshold: "",
        minInitialDepositRatio: "",
        proposalCancelRatio: "",
        proposalCancelDest: "",
        expeditedVotingPeriod: undefined,
        expeditedThreshold: "",
        expeditedMinDeposit: [],
        burnVoteQuorum: false,
        burnProposalDepositPrevote: false,
        burnVoteVeto: false,
        minDepositRatio: "",
        emergencyMinDeposit: [],
        emergencyTallyInterval: undefined,
        lowThresholdFunctions: [],
        vesting: undefined,
    };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.minDeposit) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.maxDepositPeriod !== undefined) {
            duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).ldelim();
        }
        if (message.votingPeriod !== undefined) {
            duration_1.Duration.encode(message.votingPeriod, writer.uint32(26).fork()).ldelim();
        }
        if (message.quorum !== "") {
            writer.uint32(34).string(message.quorum);
        }
        if (message.threshold !== "") {
            writer.uint32(42).string(message.threshold);
        }
        if (message.vetoThreshold !== "") {
            writer.uint32(50).string(message.vetoThreshold);
        }
        if (message.minInitialDepositRatio !== "") {
            writer.uint32(58).string(message.minInitialDepositRatio);
        }
        if (message.proposalCancelRatio !== "") {
            writer.uint32(66).string(message.proposalCancelRatio);
        }
        if (message.proposalCancelDest !== "") {
            writer.uint32(74).string(message.proposalCancelDest);
        }
        if (message.expeditedVotingPeriod !== undefined) {
            duration_1.Duration.encode(message.expeditedVotingPeriod, writer.uint32(82).fork()).ldelim();
        }
        if (message.expeditedThreshold !== "") {
            writer.uint32(90).string(message.expeditedThreshold);
        }
        for (const v of message.expeditedMinDeposit) {
            coin_1.Coin.encode(v, writer.uint32(98).fork()).ldelim();
        }
        if (message.burnVoteQuorum !== false) {
            writer.uint32(104).bool(message.burnVoteQuorum);
        }
        if (message.burnProposalDepositPrevote !== false) {
            writer.uint32(112).bool(message.burnProposalDepositPrevote);
        }
        if (message.burnVoteVeto !== false) {
            writer.uint32(120).bool(message.burnVoteVeto);
        }
        if (message.minDepositRatio !== "") {
            writer.uint32(130).string(message.minDepositRatio);
        }
        for (const v of message.emergencyMinDeposit) {
            coin_1.Coin.encode(v, writer.uint32(730).fork()).ldelim();
        }
        if (message.emergencyTallyInterval !== undefined) {
            duration_1.Duration.encode(message.emergencyTallyInterval, writer.uint32(738).fork()).ldelim();
        }
        for (const v of message.lowThresholdFunctions) {
            writer.uint32(746).string(v);
        }
        if (message.vesting !== undefined) {
            exports.Vesting.encode(message.vesting, writer.uint32(754).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.quorum = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.threshold = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.vetoThreshold = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.minInitialDepositRatio = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proposalCancelRatio = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.proposalCancelDest = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.expeditedVotingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.expeditedThreshold = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.expeditedMinDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.burnVoteQuorum = reader.bool();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.burnProposalDepositPrevote = reader.bool();
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.burnVoteVeto = reader.bool();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.minDepositRatio = reader.string();
                    continue;
                case 91:
                    if (tag !== 730) {
                        break;
                    }
                    message.emergencyMinDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 92:
                    if (tag !== 738) {
                        break;
                    }
                    message.emergencyTallyInterval = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 93:
                    if (tag !== 746) {
                        break;
                    }
                    message.lowThresholdFunctions.push(reader.string());
                    continue;
                case 94:
                    if (tag !== 754) {
                        break;
                    }
                    message.vesting = exports.Vesting.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minDeposit: gt.Array.isArray(object?.minDeposit)
                ? object.minDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            maxDepositPeriod: isSet(object.maxDepositPeriod)
                ? duration_1.Duration.fromJSON(object.maxDepositPeriod)
                : undefined,
            votingPeriod: isSet(object.votingPeriod) ? duration_1.Duration.fromJSON(object.votingPeriod) : undefined,
            quorum: isSet(object.quorum) ? gt.String(object.quorum) : "",
            threshold: isSet(object.threshold) ? gt.String(object.threshold) : "",
            vetoThreshold: isSet(object.vetoThreshold) ? gt.String(object.vetoThreshold) : "",
            minInitialDepositRatio: isSet(object.minInitialDepositRatio)
                ? gt.String(object.minInitialDepositRatio)
                : "",
            proposalCancelRatio: isSet(object.proposalCancelRatio) ? gt.String(object.proposalCancelRatio) : "",
            proposalCancelDest: isSet(object.proposalCancelDest) ? gt.String(object.proposalCancelDest) : "",
            expeditedVotingPeriod: isSet(object.expeditedVotingPeriod)
                ? duration_1.Duration.fromJSON(object.expeditedVotingPeriod)
                : undefined,
            expeditedThreshold: isSet(object.expeditedThreshold) ? gt.String(object.expeditedThreshold) : "",
            expeditedMinDeposit: gt.Array.isArray(object?.expeditedMinDeposit)
                ? object.expeditedMinDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            burnVoteQuorum: isSet(object.burnVoteQuorum) ? gt.Boolean(object.burnVoteQuorum) : false,
            burnProposalDepositPrevote: isSet(object.burnProposalDepositPrevote)
                ? gt.Boolean(object.burnProposalDepositPrevote)
                : false,
            burnVoteVeto: isSet(object.burnVoteVeto) ? gt.Boolean(object.burnVoteVeto) : false,
            minDepositRatio: isSet(object.minDepositRatio) ? gt.String(object.minDepositRatio) : "",
            emergencyMinDeposit: gt.Array.isArray(object?.emergencyMinDeposit)
                ? object.emergencyMinDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            emergencyTallyInterval: isSet(object.emergencyTallyInterval)
                ? duration_1.Duration.fromJSON(object.emergencyTallyInterval)
                : undefined,
            lowThresholdFunctions: gt.Array.isArray(object?.lowThresholdFunctions)
                ? object.lowThresholdFunctions.map((e) => gt.String(e))
                : [],
            vesting: isSet(object.vesting) ? exports.Vesting.fromJSON(object.vesting) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minDeposit?.length) {
            obj.minDeposit = message.minDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.maxDepositPeriod !== undefined) {
            obj.maxDepositPeriod = duration_1.Duration.toJSON(message.maxDepositPeriod);
        }
        if (message.votingPeriod !== undefined) {
            obj.votingPeriod = duration_1.Duration.toJSON(message.votingPeriod);
        }
        if (message.quorum !== "") {
            obj.quorum = message.quorum;
        }
        if (message.threshold !== "") {
            obj.threshold = message.threshold;
        }
        if (message.vetoThreshold !== "") {
            obj.vetoThreshold = message.vetoThreshold;
        }
        if (message.minInitialDepositRatio !== "") {
            obj.minInitialDepositRatio = message.minInitialDepositRatio;
        }
        if (message.proposalCancelRatio !== "") {
            obj.proposalCancelRatio = message.proposalCancelRatio;
        }
        if (message.proposalCancelDest !== "") {
            obj.proposalCancelDest = message.proposalCancelDest;
        }
        if (message.expeditedVotingPeriod !== undefined) {
            obj.expeditedVotingPeriod = duration_1.Duration.toJSON(message.expeditedVotingPeriod);
        }
        if (message.expeditedThreshold !== "") {
            obj.expeditedThreshold = message.expeditedThreshold;
        }
        if (message.expeditedMinDeposit?.length) {
            obj.expeditedMinDeposit = message.expeditedMinDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.burnVoteQuorum !== false) {
            obj.burnVoteQuorum = message.burnVoteQuorum;
        }
        if (message.burnProposalDepositPrevote !== false) {
            obj.burnProposalDepositPrevote = message.burnProposalDepositPrevote;
        }
        if (message.burnVoteVeto !== false) {
            obj.burnVoteVeto = message.burnVoteVeto;
        }
        if (message.minDepositRatio !== "") {
            obj.minDepositRatio = message.minDepositRatio;
        }
        if (message.emergencyMinDeposit?.length) {
            obj.emergencyMinDeposit = message.emergencyMinDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.emergencyTallyInterval !== undefined) {
            obj.emergencyTallyInterval = duration_1.Duration.toJSON(message.emergencyTallyInterval);
        }
        if (message.lowThresholdFunctions?.length) {
            obj.lowThresholdFunctions = message.lowThresholdFunctions;
        }
        if (message.vesting !== undefined) {
            obj.vesting = exports.Vesting.toJSON(message.vesting);
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.minDeposit = object.minDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        message.maxDepositPeriod =
            object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null
                ? duration_1.Duration.fromPartial(object.maxDepositPeriod)
                : undefined;
        message.votingPeriod =
            object.votingPeriod !== undefined && object.votingPeriod !== null
                ? duration_1.Duration.fromPartial(object.votingPeriod)
                : undefined;
        message.quorum = object.quorum ?? "";
        message.threshold = object.threshold ?? "";
        message.vetoThreshold = object.vetoThreshold ?? "";
        message.minInitialDepositRatio = object.minInitialDepositRatio ?? "";
        message.proposalCancelRatio = object.proposalCancelRatio ?? "";
        message.proposalCancelDest = object.proposalCancelDest ?? "";
        message.expeditedVotingPeriod =
            object.expeditedVotingPeriod !== undefined && object.expeditedVotingPeriod !== null
                ? duration_1.Duration.fromPartial(object.expeditedVotingPeriod)
                : undefined;
        message.expeditedThreshold = object.expeditedThreshold ?? "";
        message.expeditedMinDeposit = object.expeditedMinDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        message.burnVoteQuorum = object.burnVoteQuorum ?? false;
        message.burnProposalDepositPrevote = object.burnProposalDepositPrevote ?? false;
        message.burnVoteVeto = object.burnVoteVeto ?? false;
        message.minDepositRatio = object.minDepositRatio ?? "";
        message.emergencyMinDeposit = object.emergencyMinDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        message.emergencyTallyInterval =
            object.emergencyTallyInterval !== undefined && object.emergencyTallyInterval !== null
                ? duration_1.Duration.fromPartial(object.emergencyTallyInterval)
                : undefined;
        message.lowThresholdFunctions = object.lowThresholdFunctions?.map((e) => e) || [];
        message.vesting =
            object.vesting !== undefined && object.vesting !== null
                ? exports.Vesting.fromPartial(object.vesting)
                : undefined;
        return message;
    },
};
function createBaseVesting() {
    return { moduleAddr: "", moduleName: "", creatorAddr: "" };
}
exports.Vesting = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.moduleAddr !== "") {
            writer.uint32(10).string(message.moduleAddr);
        }
        if (message.moduleName !== "") {
            writer.uint32(18).string(message.moduleName);
        }
        if (message.creatorAddr !== "") {
            writer.uint32(26).string(message.creatorAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVesting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.moduleAddr = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.creatorAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleAddr: isSet(object.moduleAddr) ? gt.String(object.moduleAddr) : "",
            moduleName: isSet(object.moduleName) ? gt.String(object.moduleName) : "",
            creatorAddr: isSet(object.creatorAddr) ? gt.String(object.creatorAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleAddr !== "") {
            obj.moduleAddr = message.moduleAddr;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.creatorAddr !== "") {
            obj.creatorAddr = message.creatorAddr;
        }
        return obj;
    },
    create(base) {
        return exports.Vesting.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVesting();
        message.moduleAddr = object.moduleAddr ?? "";
        message.moduleName = object.moduleName ?? "";
        message.creatorAddr = object.creatorAddr ?? "";
        return message;
    },
};
function createBaseTallyResult() {
    return { tallyHeight: 0n, totalStakingPower: "", totalVestingPower: "", v1TallyResult: undefined };
}
exports.TallyResult = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tallyHeight !== 0n) {
            if (BigInt.asUintN(64, message.tallyHeight) !== message.tallyHeight) {
                throw new gt.Error("value provided for field message.tallyHeight of type uint64 too large");
            }
            writer.uint32(8).uint64(message.tallyHeight.toString());
        }
        if (message.totalStakingPower !== "") {
            writer.uint32(18).string(message.totalStakingPower);
        }
        if (message.totalVestingPower !== "") {
            writer.uint32(26).string(message.totalVestingPower);
        }
        if (message.v1TallyResult !== undefined) {
            gov_1.TallyResult.encode(message.v1TallyResult, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTallyResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.tallyHeight = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.totalStakingPower = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.totalVestingPower = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.v1TallyResult = gov_1.TallyResult.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tallyHeight: isSet(object.tallyHeight) ? BigInt(object.tallyHeight) : 0n,
            totalStakingPower: isSet(object.totalStakingPower) ? gt.String(object.totalStakingPower) : "",
            totalVestingPower: isSet(object.totalVestingPower) ? gt.String(object.totalVestingPower) : "",
            v1TallyResult: isSet(object.v1TallyResult) ? gov_1.TallyResult.fromJSON(object.v1TallyResult) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tallyHeight !== 0n) {
            obj.tallyHeight = message.tallyHeight.toString();
        }
        if (message.totalStakingPower !== "") {
            obj.totalStakingPower = message.totalStakingPower;
        }
        if (message.totalVestingPower !== "") {
            obj.totalVestingPower = message.totalVestingPower;
        }
        if (message.v1TallyResult !== undefined) {
            obj.v1TallyResult = gov_1.TallyResult.toJSON(message.v1TallyResult);
        }
        return obj;
    },
    create(base) {
        return exports.TallyResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTallyResult();
        message.tallyHeight = object.tallyHeight ?? 0n;
        message.totalStakingPower = object.totalStakingPower ?? "";
        message.totalVestingPower = object.totalVestingPower ?? "";
        message.v1TallyResult =
            object.v1TallyResult !== undefined && object.v1TallyResult !== null
                ? gov_1.TallyResult.fromPartial(object.v1TallyResult)
                : undefined;
        return message;
    },
};
function createBaseProposal() {
    return {
        id: 0n,
        messages: [],
        status: 0,
        finalTallyResult: undefined,
        submitTime: undefined,
        depositEndTime: undefined,
        totalDeposit: [],
        votingStartTime: undefined,
        votingEndTime: undefined,
        emergencyStartTime: undefined,
        emergencyNextTallyTime: undefined,
        metadata: "",
        title: "",
        summary: "",
        proposer: "",
        expedited: false,
        emergency: false,
        failedReason: "",
    };
}
exports.Proposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new gt.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(8).uint64(message.id.toString());
        }
        for (const v of message.messages) {
            any_1.Any.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        if (message.finalTallyResult !== undefined) {
            exports.TallyResult.encode(message.finalTallyResult, writer.uint32(34).fork()).ldelim();
        }
        if (message.submitTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(42).fork()).ldelim();
        }
        if (message.depositEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.depositEndTime), writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.totalDeposit) {
            coin_1.Coin.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.votingStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(66).fork()).ldelim();
        }
        if (message.votingEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(74).fork()).ldelim();
        }
        if (message.emergencyStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.emergencyStartTime), writer.uint32(82).fork()).ldelim();
        }
        if (message.emergencyNextTallyTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.emergencyNextTallyTime), writer.uint32(90).fork()).ldelim();
        }
        if (message.metadata !== "") {
            writer.uint32(98).string(message.metadata);
        }
        if (message.title !== "") {
            writer.uint32(106).string(message.title);
        }
        if (message.summary !== "") {
            writer.uint32(114).string(message.summary);
        }
        if (message.proposer !== "") {
            writer.uint32(122).string(message.proposer);
        }
        if (message.expedited !== false) {
            writer.uint32(128).bool(message.expedited);
        }
        if (message.emergency !== false) {
            writer.uint32(136).bool(message.emergency);
        }
        if (message.failedReason !== "") {
            writer.uint32(146).string(message.failedReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messages.push(any_1.Any.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.finalTallyResult = exports.TallyResult.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.submitTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.depositEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.totalDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.votingStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.votingEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.emergencyStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.emergencyNextTallyTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.summary = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.proposer = reader.string();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.expedited = reader.bool();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.emergency = reader.bool();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.failedReason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? BigInt(object.id) : 0n,
            messages: gt.Array.isArray(object?.messages) ? object.messages.map((e) => any_1.Any.fromJSON(e)) : [],
            status: isSet(object.status) ? (0, gov_1.proposalStatusFromJSON)(object.status) : 0,
            finalTallyResult: isSet(object.finalTallyResult)
                ? exports.TallyResult.fromJSON(object.finalTallyResult)
                : undefined,
            submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
            depositEndTime: isSet(object.depositEndTime) ? fromJsonTimestamp(object.depositEndTime) : undefined,
            totalDeposit: gt.Array.isArray(object?.totalDeposit)
                ? object.totalDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            votingStartTime: isSet(object.votingStartTime) ? fromJsonTimestamp(object.votingStartTime) : undefined,
            votingEndTime: isSet(object.votingEndTime) ? fromJsonTimestamp(object.votingEndTime) : undefined,
            emergencyStartTime: isSet(object.emergencyStartTime)
                ? fromJsonTimestamp(object.emergencyStartTime)
                : undefined,
            emergencyNextTallyTime: isSet(object.emergencyNextTallyTime)
                ? fromJsonTimestamp(object.emergencyNextTallyTime)
                : undefined,
            metadata: isSet(object.metadata) ? gt.String(object.metadata) : "",
            title: isSet(object.title) ? gt.String(object.title) : "",
            summary: isSet(object.summary) ? gt.String(object.summary) : "",
            proposer: isSet(object.proposer) ? gt.String(object.proposer) : "",
            expedited: isSet(object.expedited) ? gt.Boolean(object.expedited) : false,
            emergency: isSet(object.emergency) ? gt.Boolean(object.emergency) : false,
            failedReason: isSet(object.failedReason) ? gt.String(object.failedReason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        if (message.messages?.length) {
            obj.messages = message.messages.map((e) => any_1.Any.toJSON(e));
        }
        if (message.status !== 0) {
            obj.status = (0, gov_1.proposalStatusToJSON)(message.status);
        }
        if (message.finalTallyResult !== undefined) {
            obj.finalTallyResult = exports.TallyResult.toJSON(message.finalTallyResult);
        }
        if (message.submitTime !== undefined) {
            obj.submitTime = message.submitTime.toISOString();
        }
        if (message.depositEndTime !== undefined) {
            obj.depositEndTime = message.depositEndTime.toISOString();
        }
        if (message.totalDeposit?.length) {
            obj.totalDeposit = message.totalDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.votingStartTime !== undefined) {
            obj.votingStartTime = message.votingStartTime.toISOString();
        }
        if (message.votingEndTime !== undefined) {
            obj.votingEndTime = message.votingEndTime.toISOString();
        }
        if (message.emergencyStartTime !== undefined) {
            obj.emergencyStartTime = message.emergencyStartTime.toISOString();
        }
        if (message.emergencyNextTallyTime !== undefined) {
            obj.emergencyNextTallyTime = message.emergencyNextTallyTime.toISOString();
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.summary !== "") {
            obj.summary = message.summary;
        }
        if (message.proposer !== "") {
            obj.proposer = message.proposer;
        }
        if (message.expedited !== false) {
            obj.expedited = message.expedited;
        }
        if (message.emergency !== false) {
            obj.emergency = message.emergency;
        }
        if (message.failedReason !== "") {
            obj.failedReason = message.failedReason;
        }
        return obj;
    },
    create(base) {
        return exports.Proposal.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProposal();
        message.id = object.id ?? 0n;
        message.messages = object.messages?.map((e) => any_1.Any.fromPartial(e)) || [];
        message.status = object.status ?? 0;
        message.finalTallyResult =
            object.finalTallyResult !== undefined && object.finalTallyResult !== null
                ? exports.TallyResult.fromPartial(object.finalTallyResult)
                : undefined;
        message.submitTime = object.submitTime ?? undefined;
        message.depositEndTime = object.depositEndTime ?? undefined;
        message.totalDeposit = object.totalDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        message.votingStartTime = object.votingStartTime ?? undefined;
        message.votingEndTime = object.votingEndTime ?? undefined;
        message.emergencyStartTime = object.emergencyStartTime ?? undefined;
        message.emergencyNextTallyTime = object.emergencyNextTallyTime ?? undefined;
        message.metadata = object.metadata ?? "";
        message.title = object.title ?? "";
        message.summary = object.summary ?? "";
        message.proposer = object.proposer ?? "";
        message.expedited = object.expedited ?? false;
        message.emergency = object.emergency ?? false;
        message.failedReason = object.failedReason ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (gt.Number(t.seconds.toString()) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new gt.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof gt.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new gt.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=gov.js.map