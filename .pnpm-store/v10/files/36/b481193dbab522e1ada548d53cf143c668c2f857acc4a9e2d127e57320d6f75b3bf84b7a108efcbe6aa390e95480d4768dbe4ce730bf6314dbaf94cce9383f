"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.1
// source: opinit/ophost/v1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedOutput = exports.Bridge = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "opinit.ophost.v1";
function createBaseGenesisState() {
    return { params: undefined, bridges: [], nextBridgeId: 0n };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.bridges) {
            exports.Bridge.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.nextBridgeId !== 0n) {
            if (BigInt.asUintN(64, message.nextBridgeId) !== message.nextBridgeId) {
                throw new gt.Error("value provided for field message.nextBridgeId of type uint64 too large");
            }
            writer.uint32(24).uint64(message.nextBridgeId.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.bridges.push(exports.Bridge.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nextBridgeId = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            bridges: gt.Array.isArray(object?.bridges) ? object.bridges.map((e) => exports.Bridge.fromJSON(e)) : [],
            nextBridgeId: isSet(object.nextBridgeId) ? BigInt(object.nextBridgeId) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.bridges?.length) {
            obj.bridges = message.bridges.map((e) => exports.Bridge.toJSON(e));
        }
        if (message.nextBridgeId !== 0n) {
            obj.nextBridgeId = message.nextBridgeId.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.bridges = object.bridges?.map((e) => exports.Bridge.fromPartial(e)) || [];
        message.nextBridgeId = object.nextBridgeId ?? 0n;
        return message;
    },
};
function createBaseBridge() {
    return {
        bridgeId: 0n,
        nextL1Sequence: 0n,
        nextOutputIndex: 0n,
        bridgeConfig: undefined,
        tokenPairs: [],
        provenWithdrawals: [],
        proposals: [],
        batchInfos: [],
    };
}
exports.Bridge = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.bridgeId.toString());
        }
        if (message.nextL1Sequence !== 0n) {
            if (BigInt.asUintN(64, message.nextL1Sequence) !== message.nextL1Sequence) {
                throw new gt.Error("value provided for field message.nextL1Sequence of type uint64 too large");
            }
            writer.uint32(16).uint64(message.nextL1Sequence.toString());
        }
        if (message.nextOutputIndex !== 0n) {
            if (BigInt.asUintN(64, message.nextOutputIndex) !== message.nextOutputIndex) {
                throw new gt.Error("value provided for field message.nextOutputIndex of type uint64 too large");
            }
            writer.uint32(24).uint64(message.nextOutputIndex.toString());
        }
        if (message.bridgeConfig !== undefined) {
            types_1.BridgeConfig.encode(message.bridgeConfig, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.tokenPairs) {
            types_1.TokenPair.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.provenWithdrawals) {
            writer.uint32(50).bytes(v);
        }
        for (const v of message.proposals) {
            exports.WrappedOutput.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.batchInfos) {
            types_1.BatchInfoWithOutput.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBridge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.nextL1Sequence = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nextOutputIndex = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bridgeConfig = types_1.BridgeConfig.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenPairs.push(types_1.TokenPair.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.provenWithdrawals.push(reader.bytes());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.proposals.push(exports.WrappedOutput.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.batchInfos.push(types_1.BatchInfoWithOutput.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            nextL1Sequence: isSet(object.nextL1Sequence) ? BigInt(object.nextL1Sequence) : 0n,
            nextOutputIndex: isSet(object.nextOutputIndex) ? BigInt(object.nextOutputIndex) : 0n,
            bridgeConfig: isSet(object.bridgeConfig) ? types_1.BridgeConfig.fromJSON(object.bridgeConfig) : undefined,
            tokenPairs: gt.Array.isArray(object?.tokenPairs)
                ? object.tokenPairs.map((e) => types_1.TokenPair.fromJSON(e))
                : [],
            provenWithdrawals: gt.Array.isArray(object?.provenWithdrawals)
                ? object.provenWithdrawals.map((e) => bytesFromBase64(e))
                : [],
            proposals: gt.Array.isArray(object?.proposals)
                ? object.proposals.map((e) => exports.WrappedOutput.fromJSON(e))
                : [],
            batchInfos: gt.Array.isArray(object?.batchInfos)
                ? object.batchInfos.map((e) => types_1.BatchInfoWithOutput.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.nextL1Sequence !== 0n) {
            obj.nextL1Sequence = message.nextL1Sequence.toString();
        }
        if (message.nextOutputIndex !== 0n) {
            obj.nextOutputIndex = message.nextOutputIndex.toString();
        }
        if (message.bridgeConfig !== undefined) {
            obj.bridgeConfig = types_1.BridgeConfig.toJSON(message.bridgeConfig);
        }
        if (message.tokenPairs?.length) {
            obj.tokenPairs = message.tokenPairs.map((e) => types_1.TokenPair.toJSON(e));
        }
        if (message.provenWithdrawals?.length) {
            obj.provenWithdrawals = message.provenWithdrawals.map((e) => base64FromBytes(e));
        }
        if (message.proposals?.length) {
            obj.proposals = message.proposals.map((e) => exports.WrappedOutput.toJSON(e));
        }
        if (message.batchInfos?.length) {
            obj.batchInfos = message.batchInfos.map((e) => types_1.BatchInfoWithOutput.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Bridge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBridge();
        message.bridgeId = object.bridgeId ?? 0n;
        message.nextL1Sequence = object.nextL1Sequence ?? 0n;
        message.nextOutputIndex = object.nextOutputIndex ?? 0n;
        message.bridgeConfig =
            object.bridgeConfig !== undefined && object.bridgeConfig !== null
                ? types_1.BridgeConfig.fromPartial(object.bridgeConfig)
                : undefined;
        message.tokenPairs = object.tokenPairs?.map((e) => types_1.TokenPair.fromPartial(e)) || [];
        message.provenWithdrawals = object.provenWithdrawals?.map((e) => e) || [];
        message.proposals = object.proposals?.map((e) => exports.WrappedOutput.fromPartial(e)) || [];
        message.batchInfos = object.batchInfos?.map((e) => types_1.BatchInfoWithOutput.fromPartial(e)) || [];
        return message;
    },
};
function createBaseWrappedOutput() {
    return { outputIndex: 0n, outputProposal: undefined };
}
exports.WrappedOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(8).uint64(message.outputIndex.toString());
        }
        if (message.outputProposal !== undefined) {
            types_1.Output.encode(message.outputProposal, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWrappedOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.outputProposal = types_1.Output.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            outputProposal: isSet(object.outputProposal) ? types_1.Output.fromJSON(object.outputProposal) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.outputProposal !== undefined) {
            obj.outputProposal = types_1.Output.toJSON(message.outputProposal);
        }
        return obj;
    },
    create(base) {
        return exports.WrappedOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWrappedOutput();
        message.outputIndex = object.outputIndex ?? 0n;
        message.outputProposal =
            object.outputProposal !== undefined && object.outputProposal !== null
                ? types_1.Output.fromPartial(object.outputProposal)
                : undefined;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map