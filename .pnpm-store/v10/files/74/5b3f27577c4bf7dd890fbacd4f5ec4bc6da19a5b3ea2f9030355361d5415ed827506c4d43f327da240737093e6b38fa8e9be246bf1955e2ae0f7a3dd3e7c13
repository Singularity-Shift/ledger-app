import { JSONSerializable } from '../util/json';
import { Denom } from './Denom';
import { Coin as Coin_pb } from '@initia/initia.proto/cosmos/base/v1beta1/coin';
export declare class Coin extends JSONSerializable<Coin.Amino, Coin.Data, Coin.Proto> {
    readonly denom: Denom;
    readonly amount: string;
    readonly isDecimal: boolean;
    constructor(denom: Denom, amount: number | string);
    toIntCoin(): Coin;
    toIntCeilCoin(): Coin;
    toDecCoin(): Coin;
    toString(): string;
    static fromString(str: string): Coin;
    add(other: number | string | Coin): Coin;
    sub(other: number | string | Coin): Coin;
    mul(other: number | string): Coin;
    div(other: number | string): Coin;
    mod(other: number | string): Coin;
    static fromAmino(data: Coin.Amino): Coin;
    toAmino(): Coin.Amino;
    static fromData(data: Coin.Data): Coin;
    toData(): Coin.Data;
    static fromProto(proto: Coin.Proto): Coin;
    toProto(): Coin.Proto;
}
export declare namespace Coin {
    interface Amino {
        denom: Denom;
        amount: string;
    }
    interface Data {
        denom: Denom;
        amount: string;
    }
    class ArithmeticError {
        readonly message: string;
        constructor(message: string);
    }
    type Proto = Coin_pb;
}
