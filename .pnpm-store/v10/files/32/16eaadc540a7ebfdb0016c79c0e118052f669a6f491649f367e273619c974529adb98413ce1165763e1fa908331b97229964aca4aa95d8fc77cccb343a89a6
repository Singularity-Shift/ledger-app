import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Any } from '@initia/initia.proto/google/protobuf/any';
import { MsgPublish as MsgPublish_pb } from '@initia/initia.proto/initia/move/v1/tx';
import { UpgradePolicy } from '@initia/initia.proto/initia/move/v1/types';
export declare class MsgPublish extends JSONSerializable<MsgPublish.Amino, MsgPublish.Data, MsgPublish.Proto> {
    sender: AccAddress;
    code_bytes: string[];
    upgrade_policy: MsgPublish.Policy;
    constructor(sender: AccAddress, code_bytes: string[], upgrade_policy: MsgPublish.Policy);
    static fromAmino(data: MsgPublish.Amino): MsgPublish;
    toAmino(): MsgPublish.Amino;
    static fromData(data: MsgPublish.Data): MsgPublish;
    toData(): MsgPublish.Data;
    static fromProto(proto: MsgPublish.Proto): MsgPublish;
    toProto(): MsgPublish.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): MsgPublish;
}
export declare namespace MsgPublish {
    type Policy = UpgradePolicy;
    const Policy: typeof UpgradePolicy;
    interface Amino {
        type: 'move/MsgPublish';
        value: {
            sender: AccAddress;
            code_bytes: string[];
            upgrade_policy?: UpgradePolicy;
        };
    }
    interface Data {
        '@type': '/initia.move.v1.MsgPublish';
        sender: AccAddress;
        code_bytes: string[];
        upgrade_policy: UpgradePolicy;
    }
    type Proto = MsgPublish_pb;
}
