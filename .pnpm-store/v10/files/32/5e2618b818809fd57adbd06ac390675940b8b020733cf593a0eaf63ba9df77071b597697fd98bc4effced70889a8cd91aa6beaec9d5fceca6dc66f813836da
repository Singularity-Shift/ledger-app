"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/marketmap/v2/query.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryParamsDesc = exports.QueryLastUpdatedDesc = exports.QueryMarketDesc = exports.QueryMarketsDesc = exports.QueryMarketMapDesc = exports.QueryDesc = exports.QueryClientImpl = exports.LastUpdatedResponse = exports.LastUpdatedRequest = exports.ParamsResponse = exports.ParamsRequest = exports.MarketResponse = exports.MarketRequest = exports.MarketsResponse = exports.MarketsRequest = exports.MarketMapResponse = exports.MarketMapRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const currency_pair_1 = require("../../types/v2/currency_pair");
const market_1 = require("./market");
const params_1 = require("./params");
exports.protobufPackage = "connect.marketmap.v2";
function createBaseMarketMapRequest() {
    return {};
}
exports.MarketMapRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketMapRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MarketMapRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMarketMapRequest();
        return message;
    },
};
function createBaseMarketMapResponse() {
    return { marketMap: undefined, lastUpdated: 0n, chainId: "" };
}
exports.MarketMapResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketMap !== undefined) {
            market_1.MarketMap.encode(message.marketMap, writer.uint32(10).fork()).ldelim();
        }
        if (message.lastUpdated !== 0n) {
            if (BigInt.asUintN(64, message.lastUpdated) !== message.lastUpdated) {
                throw new gt.Error("value provided for field message.lastUpdated of type uint64 too large");
            }
            writer.uint32(16).uint64(message.lastUpdated.toString());
        }
        if (message.chainId !== "") {
            writer.uint32(26).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketMapResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.marketMap = market_1.MarketMap.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.lastUpdated = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketMap: isSet(object.marketMap) ? market_1.MarketMap.fromJSON(object.marketMap) : undefined,
            lastUpdated: isSet(object.lastUpdated) ? BigInt(object.lastUpdated) : 0n,
            chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.marketMap !== undefined) {
            obj.marketMap = market_1.MarketMap.toJSON(message.marketMap);
        }
        if (message.lastUpdated !== 0n) {
            obj.lastUpdated = message.lastUpdated.toString();
        }
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        return obj;
    },
    create(base) {
        return exports.MarketMapResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarketMapResponse();
        message.marketMap =
            object.marketMap !== undefined && object.marketMap !== null
                ? market_1.MarketMap.fromPartial(object.marketMap)
                : undefined;
        message.lastUpdated = object.lastUpdated ?? 0n;
        message.chainId = object.chainId ?? "";
        return message;
    },
};
function createBaseMarketsRequest() {
    return {};
}
exports.MarketsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MarketsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMarketsRequest();
        return message;
    },
};
function createBaseMarketsResponse() {
    return { markets: [] };
}
exports.MarketsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.markets) {
            market_1.Market.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.markets.push(market_1.Market.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            markets: gt.Array.isArray(object?.markets) ? object.markets.map((e) => market_1.Market.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.markets?.length) {
            obj.markets = message.markets.map((e) => market_1.Market.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MarketsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarketsResponse();
        message.markets = object.markets?.map((e) => market_1.Market.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMarketRequest() {
    return { currencyPair: undefined };
}
exports.MarketRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.currencyPair !== undefined) {
            currency_pair_1.CurrencyPair.encode(message.currencyPair, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPair = currency_pair_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPair: isSet(object.currencyPair) ? currency_pair_1.CurrencyPair.fromJSON(object.currencyPair) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPair !== undefined) {
            obj.currencyPair = currency_pair_1.CurrencyPair.toJSON(message.currencyPair);
        }
        return obj;
    },
    create(base) {
        return exports.MarketRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarketRequest();
        message.currencyPair =
            object.currencyPair !== undefined && object.currencyPair !== null
                ? currency_pair_1.CurrencyPair.fromPartial(object.currencyPair)
                : undefined;
        return message;
    },
};
function createBaseMarketResponse() {
    return { market: undefined };
}
exports.MarketResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.market !== undefined) {
            market_1.Market.encode(message.market, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.market = market_1.Market.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { market: isSet(object.market) ? market_1.Market.fromJSON(object.market) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.market !== undefined) {
            obj.market = market_1.Market.toJSON(message.market);
        }
        return obj;
    },
    create(base) {
        return exports.MarketResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarketResponse();
        message.market =
            object.market !== undefined && object.market !== null ? market_1.Market.fromPartial(object.market) : undefined;
        return message;
    },
};
function createBaseParamsRequest() {
    return {};
}
exports.ParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseParamsRequest();
        return message;
    },
};
function createBaseParamsResponse() {
    return { params: undefined };
}
exports.ParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.ParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseLastUpdatedRequest() {
    return {};
}
exports.LastUpdatedRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLastUpdatedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.LastUpdatedRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseLastUpdatedRequest();
        return message;
    },
};
function createBaseLastUpdatedResponse() {
    return { lastUpdated: 0n };
}
exports.LastUpdatedResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.lastUpdated !== 0n) {
            if (BigInt.asUintN(64, message.lastUpdated) !== message.lastUpdated) {
                throw new gt.Error("value provided for field message.lastUpdated of type uint64 too large");
            }
            writer.uint32(8).uint64(message.lastUpdated.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLastUpdatedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.lastUpdated = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lastUpdated: isSet(object.lastUpdated) ? BigInt(object.lastUpdated) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastUpdated !== 0n) {
            obj.lastUpdated = message.lastUpdated.toString();
        }
        return obj;
    },
    create(base) {
        return exports.LastUpdatedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLastUpdatedResponse();
        message.lastUpdated = object.lastUpdated ?? 0n;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.MarketMap = this.MarketMap.bind(this);
        this.Markets = this.Markets.bind(this);
        this.Market = this.Market.bind(this);
        this.LastUpdated = this.LastUpdated.bind(this);
        this.Params = this.Params.bind(this);
    }
    MarketMap(request, metadata) {
        return this.rpc.unary(exports.QueryMarketMapDesc, exports.MarketMapRequest.fromPartial(request), metadata);
    }
    Markets(request, metadata) {
        return this.rpc.unary(exports.QueryMarketsDesc, exports.MarketsRequest.fromPartial(request), metadata);
    }
    Market(request, metadata) {
        return this.rpc.unary(exports.QueryMarketDesc, exports.MarketRequest.fromPartial(request), metadata);
    }
    LastUpdated(request, metadata) {
        return this.rpc.unary(exports.QueryLastUpdatedDesc, exports.LastUpdatedRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.ParamsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "connect.marketmap.v2.Query" };
exports.QueryMarketMapDesc = {
    methodName: "MarketMap",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MarketMapRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MarketMapResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryMarketsDesc = {
    methodName: "Markets",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MarketsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MarketsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryMarketDesc = {
    methodName: "Market",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MarketRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MarketResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryLastUpdatedDesc = {
    methodName: "LastUpdated",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.LastUpdatedRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.LastUpdatedResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.ParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.ParamsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map