"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: ibc/lightclients/solomachine/v3/solomachine.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderData = exports.SignBytes = exports.TimestampedSignatureData = exports.SignatureAndData = exports.Misbehaviour = exports.Header = exports.ConsensusState = exports.ClientState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../../google/protobuf/any");
exports.protobufPackage = "ibc.lightclients.solomachine.v3";
function createBaseClientState() {
    return { sequence: 0n, isFrozen: false, consensusState: undefined };
}
exports.ClientState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sequence !== 0n) {
            if (BigInt.asUintN(64, message.sequence) !== message.sequence) {
                throw new gt.Error("value provided for field message.sequence of type uint64 too large");
            }
            writer.uint32(8).uint64(message.sequence.toString());
        }
        if (message.isFrozen !== false) {
            writer.uint32(16).bool(message.isFrozen);
        }
        if (message.consensusState !== undefined) {
            exports.ConsensusState.encode(message.consensusState, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isFrozen = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.consensusState = exports.ConsensusState.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n,
            isFrozen: isSet(object.isFrozen) ? gt.Boolean(object.isFrozen) : false,
            consensusState: isSet(object.consensusState)
                ? exports.ConsensusState.fromJSON(object.consensusState)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== 0n) {
            obj.sequence = message.sequence.toString();
        }
        if (message.isFrozen !== false) {
            obj.isFrozen = message.isFrozen;
        }
        if (message.consensusState !== undefined) {
            obj.consensusState = exports.ConsensusState.toJSON(message.consensusState);
        }
        return obj;
    },
    create(base) {
        return exports.ClientState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientState();
        message.sequence = object.sequence ?? 0n;
        message.isFrozen = object.isFrozen ?? false;
        message.consensusState =
            object.consensusState !== undefined && object.consensusState !== null
                ? exports.ConsensusState.fromPartial(object.consensusState)
                : undefined;
        return message;
    },
};
function createBaseConsensusState() {
    return { publicKey: undefined, diversifier: "", timestamp: 0n };
}
exports.ConsensusState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.publicKey !== undefined) {
            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();
        }
        if (message.diversifier !== "") {
            writer.uint32(18).string(message.diversifier);
        }
        if (message.timestamp !== 0n) {
            if (BigInt.asUintN(64, message.timestamp) !== message.timestamp) {
                throw new gt.Error("value provided for field message.timestamp of type uint64 too large");
            }
            writer.uint32(24).uint64(message.timestamp.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConsensusState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.publicKey = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.diversifier = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            publicKey: isSet(object.publicKey) ? any_1.Any.fromJSON(object.publicKey) : undefined,
            diversifier: isSet(object.diversifier) ? gt.String(object.diversifier) : "",
            timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.publicKey !== undefined) {
            obj.publicKey = any_1.Any.toJSON(message.publicKey);
        }
        if (message.diversifier !== "") {
            obj.diversifier = message.diversifier;
        }
        if (message.timestamp !== 0n) {
            obj.timestamp = message.timestamp.toString();
        }
        return obj;
    },
    create(base) {
        return exports.ConsensusState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConsensusState();
        message.publicKey =
            object.publicKey !== undefined && object.publicKey !== null
                ? any_1.Any.fromPartial(object.publicKey)
                : undefined;
        message.diversifier = object.diversifier ?? "";
        message.timestamp = object.timestamp ?? 0n;
        return message;
    },
};
function createBaseHeader() {
    return { timestamp: 0n, signature: new Uint8Array(0), newPublicKey: undefined, newDiversifier: "" };
}
exports.Header = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.timestamp !== 0n) {
            if (BigInt.asUintN(64, message.timestamp) !== message.timestamp) {
                throw new gt.Error("value provided for field message.timestamp of type uint64 too large");
            }
            writer.uint32(8).uint64(message.timestamp.toString());
        }
        if (message.signature.length !== 0) {
            writer.uint32(18).bytes(message.signature);
        }
        if (message.newPublicKey !== undefined) {
            any_1.Any.encode(message.newPublicKey, writer.uint32(26).fork()).ldelim();
        }
        if (message.newDiversifier !== "") {
            writer.uint32(34).string(message.newDiversifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.timestamp = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newPublicKey = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.newDiversifier = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
            newPublicKey: isSet(object.newPublicKey) ? any_1.Any.fromJSON(object.newPublicKey) : undefined,
            newDiversifier: isSet(object.newDiversifier) ? gt.String(object.newDiversifier) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.timestamp !== 0n) {
            obj.timestamp = message.timestamp.toString();
        }
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        if (message.newPublicKey !== undefined) {
            obj.newPublicKey = any_1.Any.toJSON(message.newPublicKey);
        }
        if (message.newDiversifier !== "") {
            obj.newDiversifier = message.newDiversifier;
        }
        return obj;
    },
    create(base) {
        return exports.Header.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHeader();
        message.timestamp = object.timestamp ?? 0n;
        message.signature = object.signature ?? new Uint8Array(0);
        message.newPublicKey =
            object.newPublicKey !== undefined && object.newPublicKey !== null
                ? any_1.Any.fromPartial(object.newPublicKey)
                : undefined;
        message.newDiversifier = object.newDiversifier ?? "";
        return message;
    },
};
function createBaseMisbehaviour() {
    return { sequence: 0n, signatureOne: undefined, signatureTwo: undefined };
}
exports.Misbehaviour = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sequence !== 0n) {
            if (BigInt.asUintN(64, message.sequence) !== message.sequence) {
                throw new gt.Error("value provided for field message.sequence of type uint64 too large");
            }
            writer.uint32(8).uint64(message.sequence.toString());
        }
        if (message.signatureOne !== undefined) {
            exports.SignatureAndData.encode(message.signatureOne, writer.uint32(18).fork()).ldelim();
        }
        if (message.signatureTwo !== undefined) {
            exports.SignatureAndData.encode(message.signatureTwo, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMisbehaviour();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signatureOne = exports.SignatureAndData.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signatureTwo = exports.SignatureAndData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n,
            signatureOne: isSet(object.signatureOne) ? exports.SignatureAndData.fromJSON(object.signatureOne) : undefined,
            signatureTwo: isSet(object.signatureTwo) ? exports.SignatureAndData.fromJSON(object.signatureTwo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== 0n) {
            obj.sequence = message.sequence.toString();
        }
        if (message.signatureOne !== undefined) {
            obj.signatureOne = exports.SignatureAndData.toJSON(message.signatureOne);
        }
        if (message.signatureTwo !== undefined) {
            obj.signatureTwo = exports.SignatureAndData.toJSON(message.signatureTwo);
        }
        return obj;
    },
    create(base) {
        return exports.Misbehaviour.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMisbehaviour();
        message.sequence = object.sequence ?? 0n;
        message.signatureOne =
            object.signatureOne !== undefined && object.signatureOne !== null
                ? exports.SignatureAndData.fromPartial(object.signatureOne)
                : undefined;
        message.signatureTwo =
            object.signatureTwo !== undefined && object.signatureTwo !== null
                ? exports.SignatureAndData.fromPartial(object.signatureTwo)
                : undefined;
        return message;
    },
};
function createBaseSignatureAndData() {
    return { signature: new Uint8Array(0), path: new Uint8Array(0), data: new Uint8Array(0), timestamp: 0n };
}
exports.SignatureAndData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.signature.length !== 0) {
            writer.uint32(10).bytes(message.signature);
        }
        if (message.path.length !== 0) {
            writer.uint32(18).bytes(message.path);
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        if (message.timestamp !== 0n) {
            if (BigInt.asUintN(64, message.timestamp) !== message.timestamp) {
                throw new gt.Error("value provided for field message.timestamp of type uint64 too large");
            }
            writer.uint32(32).uint64(message.timestamp.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignatureAndData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.timestamp = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
            path: isSet(object.path) ? bytesFromBase64(object.path) : new Uint8Array(0),
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        if (message.path.length !== 0) {
            obj.path = base64FromBytes(message.path);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.timestamp !== 0n) {
            obj.timestamp = message.timestamp.toString();
        }
        return obj;
    },
    create(base) {
        return exports.SignatureAndData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSignatureAndData();
        message.signature = object.signature ?? new Uint8Array(0);
        message.path = object.path ?? new Uint8Array(0);
        message.data = object.data ?? new Uint8Array(0);
        message.timestamp = object.timestamp ?? 0n;
        return message;
    },
};
function createBaseTimestampedSignatureData() {
    return { signatureData: new Uint8Array(0), timestamp: 0n };
}
exports.TimestampedSignatureData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.signatureData.length !== 0) {
            writer.uint32(10).bytes(message.signatureData);
        }
        if (message.timestamp !== 0n) {
            if (BigInt.asUintN(64, message.timestamp) !== message.timestamp) {
                throw new gt.Error("value provided for field message.timestamp of type uint64 too large");
            }
            writer.uint32(16).uint64(message.timestamp.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestampedSignatureData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signatureData = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signatureData: isSet(object.signatureData) ? bytesFromBase64(object.signatureData) : new Uint8Array(0),
            timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signatureData.length !== 0) {
            obj.signatureData = base64FromBytes(message.signatureData);
        }
        if (message.timestamp !== 0n) {
            obj.timestamp = message.timestamp.toString();
        }
        return obj;
    },
    create(base) {
        return exports.TimestampedSignatureData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTimestampedSignatureData();
        message.signatureData = object.signatureData ?? new Uint8Array(0);
        message.timestamp = object.timestamp ?? 0n;
        return message;
    },
};
function createBaseSignBytes() {
    return { sequence: 0n, timestamp: 0n, diversifier: "", path: new Uint8Array(0), data: new Uint8Array(0) };
}
exports.SignBytes = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sequence !== 0n) {
            if (BigInt.asUintN(64, message.sequence) !== message.sequence) {
                throw new gt.Error("value provided for field message.sequence of type uint64 too large");
            }
            writer.uint32(8).uint64(message.sequence.toString());
        }
        if (message.timestamp !== 0n) {
            if (BigInt.asUintN(64, message.timestamp) !== message.timestamp) {
                throw new gt.Error("value provided for field message.timestamp of type uint64 too large");
            }
            writer.uint32(16).uint64(message.timestamp.toString());
        }
        if (message.diversifier !== "") {
            writer.uint32(26).string(message.diversifier);
        }
        if (message.path.length !== 0) {
            writer.uint32(34).bytes(message.path);
        }
        if (message.data.length !== 0) {
            writer.uint32(42).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignBytes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.diversifier = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.path = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n,
            timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
            diversifier: isSet(object.diversifier) ? gt.String(object.diversifier) : "",
            path: isSet(object.path) ? bytesFromBase64(object.path) : new Uint8Array(0),
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== 0n) {
            obj.sequence = message.sequence.toString();
        }
        if (message.timestamp !== 0n) {
            obj.timestamp = message.timestamp.toString();
        }
        if (message.diversifier !== "") {
            obj.diversifier = message.diversifier;
        }
        if (message.path.length !== 0) {
            obj.path = base64FromBytes(message.path);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.SignBytes.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSignBytes();
        message.sequence = object.sequence ?? 0n;
        message.timestamp = object.timestamp ?? 0n;
        message.diversifier = object.diversifier ?? "";
        message.path = object.path ?? new Uint8Array(0);
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseHeaderData() {
    return { newPubKey: undefined, newDiversifier: "" };
}
exports.HeaderData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.newPubKey !== undefined) {
            any_1.Any.encode(message.newPubKey, writer.uint32(10).fork()).ldelim();
        }
        if (message.newDiversifier !== "") {
            writer.uint32(18).string(message.newDiversifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeaderData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newPubKey = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.newDiversifier = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            newPubKey: isSet(object.newPubKey) ? any_1.Any.fromJSON(object.newPubKey) : undefined,
            newDiversifier: isSet(object.newDiversifier) ? gt.String(object.newDiversifier) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.newPubKey !== undefined) {
            obj.newPubKey = any_1.Any.toJSON(message.newPubKey);
        }
        if (message.newDiversifier !== "") {
            obj.newDiversifier = message.newDiversifier;
        }
        return obj;
    },
    create(base) {
        return exports.HeaderData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHeaderData();
        message.newPubKey =
            object.newPubKey !== undefined && object.newPubKey !== null
                ? any_1.Any.fromPartial(object.newPubKey)
                : undefined;
        message.newDiversifier = object.newDiversifier ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=solomachine.js.map