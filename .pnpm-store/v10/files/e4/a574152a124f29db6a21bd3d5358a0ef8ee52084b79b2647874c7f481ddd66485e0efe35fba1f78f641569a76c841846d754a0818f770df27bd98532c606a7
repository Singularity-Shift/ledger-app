"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: initia/reward/v1/types.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../../../google/protobuf/duration");
exports.protobufPackage = "initia.reward.v1";
function createBaseParams() {
    return {
        rewardDenom: "",
        dilutionPeriod: undefined,
        releaseRate: "",
        dilutionRate: "",
        releaseEnabled: false,
    };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rewardDenom !== "") {
            writer.uint32(10).string(message.rewardDenom);
        }
        if (message.dilutionPeriod !== undefined) {
            duration_1.Duration.encode(message.dilutionPeriod, writer.uint32(18).fork()).ldelim();
        }
        if (message.releaseRate !== "") {
            writer.uint32(26).string(message.releaseRate);
        }
        if (message.dilutionRate !== "") {
            writer.uint32(34).string(message.dilutionRate);
        }
        if (message.releaseEnabled !== false) {
            writer.uint32(40).bool(message.releaseEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardDenom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dilutionPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.releaseRate = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.dilutionRate = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.releaseEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardDenom: isSet(object.rewardDenom) ? gt.String(object.rewardDenom) : "",
            dilutionPeriod: isSet(object.dilutionPeriod) ? duration_1.Duration.fromJSON(object.dilutionPeriod) : undefined,
            releaseRate: isSet(object.releaseRate) ? gt.String(object.releaseRate) : "",
            dilutionRate: isSet(object.dilutionRate) ? gt.String(object.dilutionRate) : "",
            releaseEnabled: isSet(object.releaseEnabled) ? gt.Boolean(object.releaseEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rewardDenom !== "") {
            obj.rewardDenom = message.rewardDenom;
        }
        if (message.dilutionPeriod !== undefined) {
            obj.dilutionPeriod = duration_1.Duration.toJSON(message.dilutionPeriod);
        }
        if (message.releaseRate !== "") {
            obj.releaseRate = message.releaseRate;
        }
        if (message.dilutionRate !== "") {
            obj.dilutionRate = message.dilutionRate;
        }
        if (message.releaseEnabled !== false) {
            obj.releaseEnabled = message.releaseEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.rewardDenom = object.rewardDenom ?? "";
        message.dilutionPeriod =
            object.dilutionPeriod !== undefined && object.dilutionPeriod !== null
                ? duration_1.Duration.fromPartial(object.dilutionPeriod)
                : undefined;
        message.releaseRate = object.releaseRate ?? "";
        message.dilutionRate = object.dilutionRate ?? "";
        message.releaseEnabled = object.releaseEnabled ?? false;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map