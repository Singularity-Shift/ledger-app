import _m0 from "protobufjs/minimal";
import { ExecuteAuthorizationItem } from "./types";
export declare const protobufPackage = "initia.move.v1";
/** PublishAuthorization defines authorization for publish a move module. */
export interface PublishAuthorization {
    moduleNames: string[];
}
/** ExecuteAuthorization defines authorization for execute a move function. */
export interface ExecuteAuthorization {
    items: ExecuteAuthorizationItem[];
}
export declare const PublishAuthorization: {
    encode(message: PublishAuthorization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PublishAuthorization;
    fromJSON(object: any): PublishAuthorization;
    toJSON(message: PublishAuthorization): unknown;
    create(base?: DeepPartial<PublishAuthorization>): PublishAuthorization;
    fromPartial(object: DeepPartial<PublishAuthorization>): PublishAuthorization;
};
export declare const ExecuteAuthorization: {
    encode(message: ExecuteAuthorization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteAuthorization;
    fromJSON(object: any): ExecuteAuthorization;
    toJSON(message: ExecuteAuthorization): unknown;
    create(base?: DeepPartial<ExecuteAuthorization>): ExecuteAuthorization;
    fromPartial(object: DeepPartial<ExecuteAuthorization>): ExecuteAuthorization;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
