import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "noble.forwarding.v1";
export interface RegisterAccountData {
    recipient: string;
    channel: string;
    fallback: string;
}
export interface RegisterAccountMemo {
    noble?: RegisterAccountMemo_RegisterAccountDataWrapper | undefined;
}
export interface RegisterAccountMemo_RegisterAccountDataWrapper {
    forwarding?: RegisterAccountData | undefined;
}
export declare const RegisterAccountData: {
    encode(message: RegisterAccountData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterAccountData;
    fromJSON(object: any): RegisterAccountData;
    toJSON(message: RegisterAccountData): unknown;
    create(base?: DeepPartial<RegisterAccountData>): RegisterAccountData;
    fromPartial(object: DeepPartial<RegisterAccountData>): RegisterAccountData;
};
export declare const RegisterAccountMemo: {
    encode(message: RegisterAccountMemo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterAccountMemo;
    fromJSON(object: any): RegisterAccountMemo;
    toJSON(message: RegisterAccountMemo): unknown;
    create(base?: DeepPartial<RegisterAccountMemo>): RegisterAccountMemo;
    fromPartial(object: DeepPartial<RegisterAccountMemo>): RegisterAccountMemo;
};
export declare const RegisterAccountMemo_RegisterAccountDataWrapper: {
    encode(message: RegisterAccountMemo_RegisterAccountDataWrapper, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterAccountMemo_RegisterAccountDataWrapper;
    fromJSON(object: any): RegisterAccountMemo_RegisterAccountDataWrapper;
    toJSON(message: RegisterAccountMemo_RegisterAccountDataWrapper): unknown;
    create(base?: DeepPartial<RegisterAccountMemo_RegisterAccountDataWrapper>): RegisterAccountMemo_RegisterAccountDataWrapper;
    fromPartial(object: DeepPartial<RegisterAccountMemo_RegisterAccountDataWrapper>): RegisterAccountMemo_RegisterAccountDataWrapper;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
