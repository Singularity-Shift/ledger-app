import { AxelarTransfer, CctpTransfer, GoFastTransfer, IbcTransfer, OpInitTransfer, ParsedOperation, SkipOperation } from './types';
/**
 * Get the RPC url of a specific chain
 * @param chainId The chain-id of the chain you want to get the RPC
 */
export declare function getRPC(chainId?: string): string | undefined;
/**
 * Get the rest url of a specific chain
 * @param chainId The chain-id of the chain you want to get the rest endpoint
 */
export declare function getRest(chainId?: string): string | undefined;
/**
 * Check if the given chain is EVM
 * @param chainId chainId
 */
export declare function isEvm(chainId?: string): boolean;
/**
 * Check if the given chain is Cosmos SDK
 * @param chainId chainId
 */
export declare function isCosmos(chainId?: string): boolean;
/**
 * Check if the given chain is an Initia L1 or L2
 * @param chainId chainId
 */
export declare function isMinitia(chainId?: string): boolean;
/**
 * Check if for the given route an OP withdraw is available
 * @param sourceDenom denom of the source token
 * @param targetDenom denom of the target token
 */
export declare function isOpWithdrawAvailable(sourceDenom: string, targetDenom: string, sourceChainId: string): Promise<boolean>;
export declare function isOpAsset(denom: string, chainId: string): Promise<boolean>;
export declare function processOperations(operations: SkipOperation[]): ParsedOperation[];
export declare function getSequenceState(state?: IbcTransfer | OpInitTransfer | CctpTransfer | GoFastTransfer | AxelarTransfer): "IDLE" | "SUCCESS" | "ERROR" | "PENDING";
export declare function truncateDecimals(quantity: string): string;
export declare function joinTokenSymbols(tokens: string[]): string;
