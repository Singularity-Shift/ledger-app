"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/oracle/v2/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.CurrencyPairGenesis = exports.CurrencyPairState = exports.QuotePrice = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("../../../google/protobuf/timestamp");
const currency_pair_1 = require("../../types/v2/currency_pair");
exports.protobufPackage = "connect.oracle.v2";
function createBaseQuotePrice() {
    return { price: "", blockTimestamp: undefined, blockHeight: 0n };
}
exports.QuotePrice = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.price !== "") {
            writer.uint32(10).string(message.price);
        }
        if (message.blockTimestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTimestamp), writer.uint32(18).fork()).ldelim();
        }
        if (message.blockHeight !== 0n) {
            if (BigInt.asUintN(64, message.blockHeight) !== message.blockHeight) {
                throw new gt.Error("value provided for field message.blockHeight of type uint64 too large");
            }
            writer.uint32(24).uint64(message.blockHeight.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuotePrice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.price = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blockTimestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            price: isSet(object.price) ? gt.String(object.price) : "",
            blockTimestamp: isSet(object.blockTimestamp) ? fromJsonTimestamp(object.blockTimestamp) : undefined,
            blockHeight: isSet(object.blockHeight) ? BigInt(object.blockHeight) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== "") {
            obj.price = message.price;
        }
        if (message.blockTimestamp !== undefined) {
            obj.blockTimestamp = message.blockTimestamp.toISOString();
        }
        if (message.blockHeight !== 0n) {
            obj.blockHeight = message.blockHeight.toString();
        }
        return obj;
    },
    create(base) {
        return exports.QuotePrice.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQuotePrice();
        message.price = object.price ?? "";
        message.blockTimestamp = object.blockTimestamp ?? undefined;
        message.blockHeight = object.blockHeight ?? 0n;
        return message;
    },
};
function createBaseCurrencyPairState() {
    return { price: undefined, nonce: 0n, id: 0n };
}
exports.CurrencyPairState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.price !== undefined) {
            exports.QuotePrice.encode(message.price, writer.uint32(10).fork()).ldelim();
        }
        if (message.nonce !== 0n) {
            if (BigInt.asUintN(64, message.nonce) !== message.nonce) {
                throw new gt.Error("value provided for field message.nonce of type uint64 too large");
            }
            writer.uint32(16).uint64(message.nonce.toString());
        }
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new gt.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(24).uint64(message.id.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPairState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.price = exports.QuotePrice.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.nonce = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.id = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            price: isSet(object.price) ? exports.QuotePrice.fromJSON(object.price) : undefined,
            nonce: isSet(object.nonce) ? BigInt(object.nonce) : 0n,
            id: isSet(object.id) ? BigInt(object.id) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== undefined) {
            obj.price = exports.QuotePrice.toJSON(message.price);
        }
        if (message.nonce !== 0n) {
            obj.nonce = message.nonce.toString();
        }
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPairState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCurrencyPairState();
        message.price =
            object.price !== undefined && object.price !== null ? exports.QuotePrice.fromPartial(object.price) : undefined;
        message.nonce = object.nonce ?? 0n;
        message.id = object.id ?? 0n;
        return message;
    },
};
function createBaseCurrencyPairGenesis() {
    return { currencyPair: undefined, currencyPairPrice: undefined, nonce: 0n, id: 0n };
}
exports.CurrencyPairGenesis = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.currencyPair !== undefined) {
            currency_pair_1.CurrencyPair.encode(message.currencyPair, writer.uint32(10).fork()).ldelim();
        }
        if (message.currencyPairPrice !== undefined) {
            exports.QuotePrice.encode(message.currencyPairPrice, writer.uint32(18).fork()).ldelim();
        }
        if (message.nonce !== 0n) {
            if (BigInt.asUintN(64, message.nonce) !== message.nonce) {
                throw new gt.Error("value provided for field message.nonce of type uint64 too large");
            }
            writer.uint32(24).uint64(message.nonce.toString());
        }
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new gt.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(32).uint64(message.id.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPairGenesis();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPair = currency_pair_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.currencyPairPrice = exports.QuotePrice.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nonce = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.id = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPair: isSet(object.currencyPair) ? currency_pair_1.CurrencyPair.fromJSON(object.currencyPair) : undefined,
            currencyPairPrice: isSet(object.currencyPairPrice)
                ? exports.QuotePrice.fromJSON(object.currencyPairPrice)
                : undefined,
            nonce: isSet(object.nonce) ? BigInt(object.nonce) : 0n,
            id: isSet(object.id) ? BigInt(object.id) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPair !== undefined) {
            obj.currencyPair = currency_pair_1.CurrencyPair.toJSON(message.currencyPair);
        }
        if (message.currencyPairPrice !== undefined) {
            obj.currencyPairPrice = exports.QuotePrice.toJSON(message.currencyPairPrice);
        }
        if (message.nonce !== 0n) {
            obj.nonce = message.nonce.toString();
        }
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPairGenesis.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCurrencyPairGenesis();
        message.currencyPair =
            object.currencyPair !== undefined && object.currencyPair !== null
                ? currency_pair_1.CurrencyPair.fromPartial(object.currencyPair)
                : undefined;
        message.currencyPairPrice =
            object.currencyPairPrice !== undefined && object.currencyPairPrice !== null
                ? exports.QuotePrice.fromPartial(object.currencyPairPrice)
                : undefined;
        message.nonce = object.nonce ?? 0n;
        message.id = object.id ?? 0n;
        return message;
    },
};
function createBaseGenesisState() {
    return { currencyPairGenesis: [], nextId: 0n };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.currencyPairGenesis) {
            exports.CurrencyPairGenesis.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.nextId !== 0n) {
            if (BigInt.asUintN(64, message.nextId) !== message.nextId) {
                throw new gt.Error("value provided for field message.nextId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.nextId.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPairGenesis.push(exports.CurrencyPairGenesis.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.nextId = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPairGenesis: gt.Array.isArray(object?.currencyPairGenesis)
                ? object.currencyPairGenesis.map((e) => exports.CurrencyPairGenesis.fromJSON(e))
                : [],
            nextId: isSet(object.nextId) ? BigInt(object.nextId) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPairGenesis?.length) {
            obj.currencyPairGenesis = message.currencyPairGenesis.map((e) => exports.CurrencyPairGenesis.toJSON(e));
        }
        if (message.nextId !== 0n) {
            obj.nextId = message.nextId.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.currencyPairGenesis =
            object.currencyPairGenesis?.map((e) => exports.CurrencyPairGenesis.fromPartial(e)) || [];
        message.nextId = object.nextId ?? 0n;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (gt.Number(t.seconds.toString()) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new gt.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof gt.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new gt.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map