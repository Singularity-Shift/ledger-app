import { Chain } from '@initia/initia-registry-types';
import { CollectionInfoResponse, NFTMetadata, NFTTokenResponse, Paginated, TxItem } from '@initia/utils';
export default class LayerQueries {
    private layer;
    private static instances;
    private stargateClient?;
    private constructor();
    static getInstance(layer: Chain): LayerQueries;
    private initializeStargateClient;
    private get rpc();
    private get rest();
    private get indexer();
    private get dexApi();
    balances(address: string): import('@tanstack/svelte-query').CreateQueryResult<readonly import('cosmjs-types/cosmos/base/v1beta1/coin').Coin[], Error>;
    balance(address: string, denom: string): import('@tanstack/svelte-query').CreateQueryResult<string, Error>;
    tokenInfo(denom: string): import('@tanstack/svelte-query').CreateQueryResult<import('@initia/utils').InitiaTokenInfo, Error>;
    metdataToDenom(metadata: string): import('@tanstack/svelte-query').CreateQueryResult<string, Error>;
    price(denom: string): import('@tanstack/svelte-query').CreateQueryResult<number | null, Error>;
    collections(address: string): import('@tanstack/svelte-query').CreateInfiniteQueryResult<import('@tanstack/svelte-query').InfiniteData<Paginated<"collections", CollectionInfoResponse>, unknown>, Error>;
    collectionTokens(collectionAddress: string, address: string): import('@tanstack/svelte-query').CreateInfiniteQueryResult<import('@tanstack/svelte-query').InfiniteData<Paginated<"tokens", NFTTokenResponse>, unknown>, Error>;
    collectionInfo(collectionAddress: string): {
        queryKey: string[];
        queryFn: () => Promise<CollectionInfoResponse>;
    };
    static handleURL(url?: string): string | undefined;
    static nftMetadata(url?: string): import('@tanstack/svelte-query').CreateQueryResult<NFTMetadata, Error>;
    txs(address: string): import('@tanstack/svelte-query').CreateInfiniteQueryResult<import('@tanstack/svelte-query').InfiniteData<Paginated<"txs", TxItem>, unknown>, Error>;
    gasPrices(): import('@tanstack/svelte-query').CreateQueryResult<{}, Error>;
    exposedFunctions(moduleAddress: string, moduleName: string): import('@tanstack/svelte-query').CreateQueryResult<{
        name: string;
        params: string[];
    }[], Error>;
}
