"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: sdk/auction/v1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "sdk.auction.v1";
function createBaseGenesisState() {
    return { params: undefined };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            exports.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = exports.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? exports.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = exports.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? exports.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseParams() {
    return {
        maxBundleSize: 0,
        escrowAccountAddress: new Uint8Array(0),
        reserveFee: undefined,
        minBidIncrement: undefined,
        frontRunningProtection: false,
        proposerFee: "",
    };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.maxBundleSize !== 0) {
            writer.uint32(8).uint32(message.maxBundleSize);
        }
        if (message.escrowAccountAddress.length !== 0) {
            writer.uint32(18).bytes(message.escrowAccountAddress);
        }
        if (message.reserveFee !== undefined) {
            coin_1.Coin.encode(message.reserveFee, writer.uint32(26).fork()).ldelim();
        }
        if (message.minBidIncrement !== undefined) {
            coin_1.Coin.encode(message.minBidIncrement, writer.uint32(34).fork()).ldelim();
        }
        if (message.frontRunningProtection !== false) {
            writer.uint32(40).bool(message.frontRunningProtection);
        }
        if (message.proposerFee !== "") {
            writer.uint32(50).string(message.proposerFee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.maxBundleSize = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.escrowAccountAddress = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reserveFee = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.minBidIncrement = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.frontRunningProtection = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proposerFee = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxBundleSize: isSet(object.maxBundleSize) ? gt.Number(object.maxBundleSize) : 0,
            escrowAccountAddress: isSet(object.escrowAccountAddress)
                ? bytesFromBase64(object.escrowAccountAddress)
                : new Uint8Array(0),
            reserveFee: isSet(object.reserveFee) ? coin_1.Coin.fromJSON(object.reserveFee) : undefined,
            minBidIncrement: isSet(object.minBidIncrement) ? coin_1.Coin.fromJSON(object.minBidIncrement) : undefined,
            frontRunningProtection: isSet(object.frontRunningProtection)
                ? gt.Boolean(object.frontRunningProtection)
                : false,
            proposerFee: isSet(object.proposerFee) ? gt.String(object.proposerFee) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.maxBundleSize !== 0) {
            obj.maxBundleSize = Math.round(message.maxBundleSize);
        }
        if (message.escrowAccountAddress.length !== 0) {
            obj.escrowAccountAddress = base64FromBytes(message.escrowAccountAddress);
        }
        if (message.reserveFee !== undefined) {
            obj.reserveFee = coin_1.Coin.toJSON(message.reserveFee);
        }
        if (message.minBidIncrement !== undefined) {
            obj.minBidIncrement = coin_1.Coin.toJSON(message.minBidIncrement);
        }
        if (message.frontRunningProtection !== false) {
            obj.frontRunningProtection = message.frontRunningProtection;
        }
        if (message.proposerFee !== "") {
            obj.proposerFee = message.proposerFee;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.maxBundleSize = object.maxBundleSize ?? 0;
        message.escrowAccountAddress = object.escrowAccountAddress ?? new Uint8Array(0);
        message.reserveFee =
            object.reserveFee !== undefined && object.reserveFee !== null
                ? coin_1.Coin.fromPartial(object.reserveFee)
                : undefined;
        message.minBidIncrement =
            object.minBidIncrement !== undefined && object.minBidIncrement !== null
                ? coin_1.Coin.fromPartial(object.minBidIncrement)
                : undefined;
        message.frontRunningProtection = object.frontRunningProtection ?? false;
        message.proposerFee = object.proposerFee ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map