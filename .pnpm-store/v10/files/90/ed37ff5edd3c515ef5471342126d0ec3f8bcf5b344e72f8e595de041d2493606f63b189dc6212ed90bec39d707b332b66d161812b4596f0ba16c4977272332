"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmos/app/v1alpha1/config.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GolangBinding = exports.ModuleConfig = exports.Config = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../google/protobuf/any");
exports.protobufPackage = "cosmos.app.v1alpha1";
function createBaseConfig() {
    return { modules: [], golangBindings: [] };
}
exports.Config = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.modules) {
            exports.ModuleConfig.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.golangBindings) {
            exports.GolangBinding.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modules.push(exports.ModuleConfig.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.golangBindings.push(exports.GolangBinding.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modules: gt.Array.isArray(object?.modules)
                ? object.modules.map((e) => exports.ModuleConfig.fromJSON(e))
                : [],
            golangBindings: gt.Array.isArray(object?.golangBindings)
                ? object.golangBindings.map((e) => exports.GolangBinding.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.modules?.length) {
            obj.modules = message.modules.map((e) => exports.ModuleConfig.toJSON(e));
        }
        if (message.golangBindings?.length) {
            obj.golangBindings = message.golangBindings.map((e) => exports.GolangBinding.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Config.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfig();
        message.modules = object.modules?.map((e) => exports.ModuleConfig.fromPartial(e)) || [];
        message.golangBindings = object.golangBindings?.map((e) => exports.GolangBinding.fromPartial(e)) || [];
        return message;
    },
};
function createBaseModuleConfig() {
    return { name: "", config: undefined, golangBindings: [] };
}
exports.ModuleConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.config !== undefined) {
            any_1.Any.encode(message.config, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.golangBindings) {
            exports.GolangBinding.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.config = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.golangBindings.push(exports.GolangBinding.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? gt.String(object.name) : "",
            config: isSet(object.config) ? any_1.Any.fromJSON(object.config) : undefined,
            golangBindings: gt.Array.isArray(object?.golangBindings)
                ? object.golangBindings.map((e) => exports.GolangBinding.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.config !== undefined) {
            obj.config = any_1.Any.toJSON(message.config);
        }
        if (message.golangBindings?.length) {
            obj.golangBindings = message.golangBindings.map((e) => exports.GolangBinding.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ModuleConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModuleConfig();
        message.name = object.name ?? "";
        message.config =
            object.config !== undefined && object.config !== null ? any_1.Any.fromPartial(object.config) : undefined;
        message.golangBindings = object.golangBindings?.map((e) => exports.GolangBinding.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGolangBinding() {
    return { interfaceType: "", implementation: "" };
}
exports.GolangBinding = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.interfaceType !== "") {
            writer.uint32(10).string(message.interfaceType);
        }
        if (message.implementation !== "") {
            writer.uint32(18).string(message.implementation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGolangBinding();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.interfaceType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.implementation = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            interfaceType: isSet(object.interfaceType) ? gt.String(object.interfaceType) : "",
            implementation: isSet(object.implementation) ? gt.String(object.implementation) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.interfaceType !== "") {
            obj.interfaceType = message.interfaceType;
        }
        if (message.implementation !== "") {
            obj.implementation = message.implementation;
        }
        return obj;
    },
    create(base) {
        return exports.GolangBinding.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGolangBinding();
        message.interfaceType = object.interfaceType ?? "";
        message.implementation = object.implementation ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=config.js.map