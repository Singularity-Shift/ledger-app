"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/oracle/v2/query.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryGetCurrencyPairMappingListDesc = exports.QueryGetCurrencyPairMappingDesc = exports.QueryGetPricesDesc = exports.QueryGetPriceDesc = exports.QueryGetAllCurrencyPairsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.GetCurrencyPairMappingListResponse = exports.CurrencyPairMapping = exports.GetCurrencyPairMappingListRequest = exports.GetCurrencyPairMappingResponse_CurrencyPairMappingEntry = exports.GetCurrencyPairMappingResponse = exports.GetCurrencyPairMappingRequest = exports.GetPricesResponse = exports.GetPricesRequest = exports.GetPriceResponse = exports.GetPriceRequest = exports.GetAllCurrencyPairsResponse = exports.GetAllCurrencyPairsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const currency_pair_1 = require("../../types/v2/currency_pair");
const genesis_1 = require("./genesis");
exports.protobufPackage = "connect.oracle.v2";
function createBaseGetAllCurrencyPairsRequest() {
    return {};
}
exports.GetAllCurrencyPairsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllCurrencyPairsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetAllCurrencyPairsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetAllCurrencyPairsRequest();
        return message;
    },
};
function createBaseGetAllCurrencyPairsResponse() {
    return { currencyPairs: [] };
}
exports.GetAllCurrencyPairsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.currencyPairs) {
            currency_pair_1.CurrencyPair.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllCurrencyPairsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPairs.push(currency_pair_1.CurrencyPair.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPairs: gt.Array.isArray(object?.currencyPairs)
                ? object.currencyPairs.map((e) => currency_pair_1.CurrencyPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPairs?.length) {
            obj.currencyPairs = message.currencyPairs.map((e) => currency_pair_1.CurrencyPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetAllCurrencyPairsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllCurrencyPairsResponse();
        message.currencyPairs = object.currencyPairs?.map((e) => currency_pair_1.CurrencyPair.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetPriceRequest() {
    return { currencyPair: "" };
}
exports.GetPriceRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.currencyPair !== "") {
            writer.uint32(10).string(message.currencyPair);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPair = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { currencyPair: isSet(object.currencyPair) ? gt.String(object.currencyPair) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPair !== "") {
            obj.currencyPair = message.currencyPair;
        }
        return obj;
    },
    create(base) {
        return exports.GetPriceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPriceRequest();
        message.currencyPair = object.currencyPair ?? "";
        return message;
    },
};
function createBaseGetPriceResponse() {
    return { price: undefined, nonce: 0n, decimals: 0n, id: 0n };
}
exports.GetPriceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.price !== undefined) {
            genesis_1.QuotePrice.encode(message.price, writer.uint32(10).fork()).ldelim();
        }
        if (message.nonce !== 0n) {
            if (BigInt.asUintN(64, message.nonce) !== message.nonce) {
                throw new gt.Error("value provided for field message.nonce of type uint64 too large");
            }
            writer.uint32(16).uint64(message.nonce.toString());
        }
        if (message.decimals !== 0n) {
            if (BigInt.asUintN(64, message.decimals) !== message.decimals) {
                throw new gt.Error("value provided for field message.decimals of type uint64 too large");
            }
            writer.uint32(24).uint64(message.decimals.toString());
        }
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new gt.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(32).uint64(message.id.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.price = genesis_1.QuotePrice.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.nonce = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.decimals = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.id = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            price: isSet(object.price) ? genesis_1.QuotePrice.fromJSON(object.price) : undefined,
            nonce: isSet(object.nonce) ? BigInt(object.nonce) : 0n,
            decimals: isSet(object.decimals) ? BigInt(object.decimals) : 0n,
            id: isSet(object.id) ? BigInt(object.id) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== undefined) {
            obj.price = genesis_1.QuotePrice.toJSON(message.price);
        }
        if (message.nonce !== 0n) {
            obj.nonce = message.nonce.toString();
        }
        if (message.decimals !== 0n) {
            obj.decimals = message.decimals.toString();
        }
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GetPriceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPriceResponse();
        message.price =
            object.price !== undefined && object.price !== null ? genesis_1.QuotePrice.fromPartial(object.price) : undefined;
        message.nonce = object.nonce ?? 0n;
        message.decimals = object.decimals ?? 0n;
        message.id = object.id ?? 0n;
        return message;
    },
};
function createBaseGetPricesRequest() {
    return { currencyPairIds: [] };
}
exports.GetPricesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.currencyPairIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPricesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPairIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPairIds: gt.Array.isArray(object?.currencyPairIds)
                ? object.currencyPairIds.map((e) => gt.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPairIds?.length) {
            obj.currencyPairIds = message.currencyPairIds;
        }
        return obj;
    },
    create(base) {
        return exports.GetPricesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPricesRequest();
        message.currencyPairIds = object.currencyPairIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseGetPricesResponse() {
    return { prices: [] };
}
exports.GetPricesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.prices) {
            exports.GetPriceResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPricesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.prices.push(exports.GetPriceResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            prices: gt.Array.isArray(object?.prices)
                ? object.prices.map((e) => exports.GetPriceResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.prices?.length) {
            obj.prices = message.prices.map((e) => exports.GetPriceResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetPricesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPricesResponse();
        message.prices = object.prices?.map((e) => exports.GetPriceResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetCurrencyPairMappingRequest() {
    return {};
}
exports.GetCurrencyPairMappingRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrencyPairMappingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetCurrencyPairMappingRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetCurrencyPairMappingRequest();
        return message;
    },
};
function createBaseGetCurrencyPairMappingResponse() {
    return { currencyPairMapping: new Map() };
}
exports.GetCurrencyPairMappingResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.currencyPairMapping.forEach((value, key) => {
            exports.GetCurrencyPairMappingResponse_CurrencyPairMappingEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrencyPairMappingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.GetCurrencyPairMappingResponse_CurrencyPairMappingEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.currencyPairMapping.set(entry1.key, entry1.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPairMapping: isObject(object.currencyPairMapping)
                ? Object.entries(object.currencyPairMapping).reduce((acc, [key, value]) => {
                    acc.set(BigInt(key), currency_pair_1.CurrencyPair.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPairMapping?.size) {
            obj.currencyPairMapping = {};
            message.currencyPairMapping.forEach((v, k) => {
                obj.currencyPairMapping[k.toString()] = currency_pair_1.CurrencyPair.toJSON(v);
            });
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrencyPairMappingResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCurrencyPairMappingResponse();
        message.currencyPairMapping = (() => {
            const m = new Map();
            (object.currencyPairMapping ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, currency_pair_1.CurrencyPair.fromPartial(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseGetCurrencyPairMappingResponse_CurrencyPairMappingEntry() {
    return { key: 0n, value: undefined };
}
exports.GetCurrencyPairMappingResponse_CurrencyPairMappingEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== 0n) {
            if (BigInt.asUintN(64, message.key) !== message.key) {
                throw new gt.Error("value provided for field message.key of type uint64 too large");
            }
            writer.uint32(8).uint64(message.key.toString());
        }
        if (message.value !== undefined) {
            currency_pair_1.CurrencyPair.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrencyPairMappingResponse_CurrencyPairMappingEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.key = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = currency_pair_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? BigInt(object.key) : 0n,
            value: isSet(object.value) ? currency_pair_1.CurrencyPair.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0n) {
            obj.key = message.key.toString();
        }
        if (message.value !== undefined) {
            obj.value = currency_pair_1.CurrencyPair.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrencyPairMappingResponse_CurrencyPairMappingEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCurrencyPairMappingResponse_CurrencyPairMappingEntry();
        message.key = object.key ?? 0n;
        message.value =
            object.value !== undefined && object.value !== null
                ? currency_pair_1.CurrencyPair.fromPartial(object.value)
                : undefined;
        return message;
    },
};
function createBaseGetCurrencyPairMappingListRequest() {
    return {};
}
exports.GetCurrencyPairMappingListRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrencyPairMappingListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetCurrencyPairMappingListRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetCurrencyPairMappingListRequest();
        return message;
    },
};
function createBaseCurrencyPairMapping() {
    return { id: 0n, currencyPair: undefined };
}
exports.CurrencyPairMapping = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new gt.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(8).uint64(message.id.toString());
        }
        if (message.currencyPair !== undefined) {
            currency_pair_1.CurrencyPair.encode(message.currencyPair, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPairMapping();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.currencyPair = currency_pair_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? BigInt(object.id) : 0n,
            currencyPair: isSet(object.currencyPair) ? currency_pair_1.CurrencyPair.fromJSON(object.currencyPair) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        if (message.currencyPair !== undefined) {
            obj.currencyPair = currency_pair_1.CurrencyPair.toJSON(message.currencyPair);
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPairMapping.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCurrencyPairMapping();
        message.id = object.id ?? 0n;
        message.currencyPair =
            object.currencyPair !== undefined && object.currencyPair !== null
                ? currency_pair_1.CurrencyPair.fromPartial(object.currencyPair)
                : undefined;
        return message;
    },
};
function createBaseGetCurrencyPairMappingListResponse() {
    return { mappings: [] };
}
exports.GetCurrencyPairMappingListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.mappings) {
            exports.CurrencyPairMapping.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrencyPairMappingListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.mappings.push(exports.CurrencyPairMapping.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mappings: gt.Array.isArray(object?.mappings)
                ? object.mappings.map((e) => exports.CurrencyPairMapping.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mappings?.length) {
            obj.mappings = message.mappings.map((e) => exports.CurrencyPairMapping.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCurrencyPairMappingListResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCurrencyPairMappingListResponse();
        message.mappings = object.mappings?.map((e) => exports.CurrencyPairMapping.fromPartial(e)) || [];
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetAllCurrencyPairs = this.GetAllCurrencyPairs.bind(this);
        this.GetPrice = this.GetPrice.bind(this);
        this.GetPrices = this.GetPrices.bind(this);
        this.GetCurrencyPairMapping = this.GetCurrencyPairMapping.bind(this);
        this.GetCurrencyPairMappingList = this.GetCurrencyPairMappingList.bind(this);
    }
    GetAllCurrencyPairs(request, metadata) {
        return this.rpc.unary(exports.QueryGetAllCurrencyPairsDesc, exports.GetAllCurrencyPairsRequest.fromPartial(request), metadata);
    }
    GetPrice(request, metadata) {
        return this.rpc.unary(exports.QueryGetPriceDesc, exports.GetPriceRequest.fromPartial(request), metadata);
    }
    GetPrices(request, metadata) {
        return this.rpc.unary(exports.QueryGetPricesDesc, exports.GetPricesRequest.fromPartial(request), metadata);
    }
    GetCurrencyPairMapping(request, metadata) {
        return this.rpc.unary(exports.QueryGetCurrencyPairMappingDesc, exports.GetCurrencyPairMappingRequest.fromPartial(request), metadata);
    }
    GetCurrencyPairMappingList(request, metadata) {
        return this.rpc.unary(exports.QueryGetCurrencyPairMappingListDesc, exports.GetCurrencyPairMappingListRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "connect.oracle.v2.Query" };
exports.QueryGetAllCurrencyPairsDesc = {
    methodName: "GetAllCurrencyPairs",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetAllCurrencyPairsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.GetAllCurrencyPairsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryGetPriceDesc = {
    methodName: "GetPrice",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetPriceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.GetPriceResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryGetPricesDesc = {
    methodName: "GetPrices",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetPricesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.GetPricesResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryGetCurrencyPairMappingDesc = {
    methodName: "GetCurrencyPairMapping",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetCurrencyPairMappingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.GetCurrencyPairMappingResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryGetCurrencyPairMappingListDesc = {
    methodName: "GetCurrencyPairMappingList",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetCurrencyPairMappingListRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.GetCurrencyPairMappingListResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map