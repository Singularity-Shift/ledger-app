"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/marketmap/v2/market.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketMap_MarketsEntry = exports.MarketMap = exports.ProviderConfig = exports.Ticker = exports.Market = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const currency_pair_1 = require("../../types/v2/currency_pair");
exports.protobufPackage = "connect.marketmap.v2";
function createBaseMarket() {
    return { ticker: undefined, providerConfigs: [] };
}
exports.Market = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.ticker !== undefined) {
            exports.Ticker.encode(message.ticker, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.providerConfigs) {
            exports.ProviderConfig.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ticker = exports.Ticker.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.providerConfigs.push(exports.ProviderConfig.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ticker: isSet(object.ticker) ? exports.Ticker.fromJSON(object.ticker) : undefined,
            providerConfigs: gt.Array.isArray(object?.providerConfigs)
                ? object.providerConfigs.map((e) => exports.ProviderConfig.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ticker !== undefined) {
            obj.ticker = exports.Ticker.toJSON(message.ticker);
        }
        if (message.providerConfigs?.length) {
            obj.providerConfigs = message.providerConfigs.map((e) => exports.ProviderConfig.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Market.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarket();
        message.ticker =
            object.ticker !== undefined && object.ticker !== null ? exports.Ticker.fromPartial(object.ticker) : undefined;
        message.providerConfigs = object.providerConfigs?.map((e) => exports.ProviderConfig.fromPartial(e)) || [];
        return message;
    },
};
function createBaseTicker() {
    return { currencyPair: undefined, decimals: 0n, minProviderCount: 0n, enabled: false, metadataJSON: "" };
}
exports.Ticker = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.currencyPair !== undefined) {
            currency_pair_1.CurrencyPair.encode(message.currencyPair, writer.uint32(10).fork()).ldelim();
        }
        if (message.decimals !== 0n) {
            if (BigInt.asUintN(64, message.decimals) !== message.decimals) {
                throw new gt.Error("value provided for field message.decimals of type uint64 too large");
            }
            writer.uint32(16).uint64(message.decimals.toString());
        }
        if (message.minProviderCount !== 0n) {
            if (BigInt.asUintN(64, message.minProviderCount) !== message.minProviderCount) {
                throw new gt.Error("value provided for field message.minProviderCount of type uint64 too large");
            }
            writer.uint32(24).uint64(message.minProviderCount.toString());
        }
        if (message.enabled !== false) {
            writer.uint32(112).bool(message.enabled);
        }
        if (message.metadataJSON !== "") {
            writer.uint32(122).string(message.metadataJSON);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTicker();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPair = currency_pair_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.decimals = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.minProviderCount = longToBigint(reader.uint64());
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.metadataJSON = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPair: isSet(object.currencyPair) ? currency_pair_1.CurrencyPair.fromJSON(object.currencyPair) : undefined,
            decimals: isSet(object.decimals) ? BigInt(object.decimals) : 0n,
            minProviderCount: isSet(object.minProviderCount) ? BigInt(object.minProviderCount) : 0n,
            enabled: isSet(object.enabled) ? gt.Boolean(object.enabled) : false,
            metadataJSON: isSet(object.metadataJSON) ? gt.String(object.metadataJSON) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPair !== undefined) {
            obj.currencyPair = currency_pair_1.CurrencyPair.toJSON(message.currencyPair);
        }
        if (message.decimals !== 0n) {
            obj.decimals = message.decimals.toString();
        }
        if (message.minProviderCount !== 0n) {
            obj.minProviderCount = message.minProviderCount.toString();
        }
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        if (message.metadataJSON !== "") {
            obj.metadataJSON = message.metadataJSON;
        }
        return obj;
    },
    create(base) {
        return exports.Ticker.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTicker();
        message.currencyPair =
            object.currencyPair !== undefined && object.currencyPair !== null
                ? currency_pair_1.CurrencyPair.fromPartial(object.currencyPair)
                : undefined;
        message.decimals = object.decimals ?? 0n;
        message.minProviderCount = object.minProviderCount ?? 0n;
        message.enabled = object.enabled ?? false;
        message.metadataJSON = object.metadataJSON ?? "";
        return message;
    },
};
function createBaseProviderConfig() {
    return { name: "", offChainTicker: "", normalizeByPair: undefined, invert: false, metadataJSON: "" };
}
exports.ProviderConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.offChainTicker !== "") {
            writer.uint32(18).string(message.offChainTicker);
        }
        if (message.normalizeByPair !== undefined) {
            currency_pair_1.CurrencyPair.encode(message.normalizeByPair, writer.uint32(26).fork()).ldelim();
        }
        if (message.invert !== false) {
            writer.uint32(32).bool(message.invert);
        }
        if (message.metadataJSON !== "") {
            writer.uint32(122).string(message.metadataJSON);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProviderConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.offChainTicker = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.normalizeByPair = currency_pair_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.invert = reader.bool();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.metadataJSON = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? gt.String(object.name) : "",
            offChainTicker: isSet(object.offChainTicker) ? gt.String(object.offChainTicker) : "",
            normalizeByPair: isSet(object.normalizeByPair)
                ? currency_pair_1.CurrencyPair.fromJSON(object.normalizeByPair)
                : undefined,
            invert: isSet(object.invert) ? gt.Boolean(object.invert) : false,
            metadataJSON: isSet(object.metadataJSON) ? gt.String(object.metadataJSON) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.offChainTicker !== "") {
            obj.offChainTicker = message.offChainTicker;
        }
        if (message.normalizeByPair !== undefined) {
            obj.normalizeByPair = currency_pair_1.CurrencyPair.toJSON(message.normalizeByPair);
        }
        if (message.invert !== false) {
            obj.invert = message.invert;
        }
        if (message.metadataJSON !== "") {
            obj.metadataJSON = message.metadataJSON;
        }
        return obj;
    },
    create(base) {
        return exports.ProviderConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProviderConfig();
        message.name = object.name ?? "";
        message.offChainTicker = object.offChainTicker ?? "";
        message.normalizeByPair =
            object.normalizeByPair !== undefined && object.normalizeByPair !== null
                ? currency_pair_1.CurrencyPair.fromPartial(object.normalizeByPair)
                : undefined;
        message.invert = object.invert ?? false;
        message.metadataJSON = object.metadataJSON ?? "";
        return message;
    },
};
function createBaseMarketMap() {
    return { markets: new Map() };
}
exports.MarketMap = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.markets.forEach((value, key) => {
            exports.MarketMap_MarketsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.MarketMap_MarketsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.markets.set(entry1.key, entry1.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            markets: isObject(object.markets)
                ? Object.entries(object.markets).reduce((acc, [key, value]) => {
                    acc.set(key, exports.Market.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.markets?.size) {
            obj.markets = {};
            message.markets.forEach((v, k) => {
                obj.markets[k] = exports.Market.toJSON(v);
            });
        }
        return obj;
    },
    create(base) {
        return exports.MarketMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarketMap();
        message.markets = (() => {
            const m = new Map();
            (object.markets ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, exports.Market.fromPartial(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseMarketMap_MarketsEntry() {
    return { key: "", value: undefined };
}
exports.MarketMap_MarketsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.Market.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketMap_MarketsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.Market.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? exports.Market.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Market.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.MarketMap_MarketsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarketMap_MarketsEntry();
        message.key = object.key ?? "";
        message.value =
            object.value !== undefined && object.value !== null ? exports.Market.fromPartial(object.value) : undefined;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=market.js.map