"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: tendermint/libs/bits/types.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitArray = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "tendermint.libs.bits";
function createBaseBitArray() {
    return { bits: 0n, elems: [] };
}
exports.BitArray = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bits !== 0n) {
            if (BigInt.asIntN(64, message.bits) !== message.bits) {
                throw new gt.Error("value provided for field message.bits of type int64 too large");
            }
            writer.uint32(8).int64(message.bits.toString());
        }
        writer.uint32(18).fork();
        for (const v of message.elems) {
            if (BigInt.asUintN(64, v) !== v) {
                throw new gt.Error("a value provided in array field elems of type uint64 is too large");
            }
            writer.uint64(v.toString());
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBitArray();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.bits = longToBigint(reader.int64());
                    continue;
                case 2:
                    if (tag === 16) {
                        message.elems.push(longToBigint(reader.uint64()));
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.elems.push(longToBigint(reader.uint64()));
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bits: isSet(object.bits) ? BigInt(object.bits) : 0n,
            elems: gt.Array.isArray(object?.elems) ? object.elems.map((e) => BigInt(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bits !== 0n) {
            obj.bits = message.bits.toString();
        }
        if (message.elems?.length) {
            obj.elems = message.elems.map((e) => e.toString());
        }
        return obj;
    },
    create(base) {
        return exports.BitArray.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBitArray();
        message.bits = object.bits ?? 0n;
        message.elems = object.elems?.map((e) => e) || [];
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map