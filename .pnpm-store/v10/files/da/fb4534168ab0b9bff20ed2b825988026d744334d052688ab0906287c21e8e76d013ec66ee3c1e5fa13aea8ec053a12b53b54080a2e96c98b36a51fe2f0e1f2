"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.1
// source: opinit/ophost/v1/tx.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.MsgUpdateParamsDesc = exports.MsgUpdateOracleConfigDesc = exports.MsgUpdateMetadataDesc = exports.MsgUpdateBatchInfoDesc = exports.MsgUpdateChallengerDesc = exports.MsgUpdateProposerDesc = exports.MsgFinalizeTokenWithdrawalDesc = exports.MsgInitiateTokenDepositDesc = exports.MsgDeleteOutputDesc = exports.MsgProposeOutputDesc = exports.MsgCreateBridgeDesc = exports.MsgRecordBatchDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgUpdateMetadataResponse = exports.MsgUpdateMetadata = exports.MsgUpdateOracleConfigResponse = exports.MsgUpdateOracleConfig = exports.MsgUpdateBatchInfoResponse = exports.MsgUpdateBatchInfo = exports.MsgUpdateChallengerResponse = exports.MsgUpdateChallenger = exports.MsgUpdateProposerResponse = exports.MsgUpdateProposer = exports.MsgFinalizeTokenWithdrawalResponse = exports.MsgFinalizeTokenWithdrawal = exports.MsgInitiateTokenDepositResponse = exports.MsgInitiateTokenDeposit = exports.MsgDeleteOutputResponse = exports.MsgDeleteOutput = exports.MsgProposeOutputResponse = exports.MsgProposeOutput = exports.MsgCreateBridgeResponse = exports.MsgCreateBridge = exports.MsgRecordBatchResponse = exports.MsgRecordBatch = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const types_1 = require("./types");
exports.protobufPackage = "opinit.ophost.v1";
function createBaseMsgRecordBatch() {
    return { submitter: "", bridgeId: 0n, batchBytes: new Uint8Array(0) };
}
exports.MsgRecordBatch = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.submitter !== "") {
            writer.uint32(10).string(message.submitter);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.batchBytes.length !== 0) {
            writer.uint32(26).bytes(message.batchBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecordBatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.submitter = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.batchBytes = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            submitter: isSet(object.submitter) ? gt.String(object.submitter) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            batchBytes: isSet(object.batchBytes) ? bytesFromBase64(object.batchBytes) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.submitter !== "") {
            obj.submitter = message.submitter;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.batchBytes.length !== 0) {
            obj.batchBytes = base64FromBytes(message.batchBytes);
        }
        return obj;
    },
    create(base) {
        return exports.MsgRecordBatch.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRecordBatch();
        message.submitter = object.submitter ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.batchBytes = object.batchBytes ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMsgRecordBatchResponse() {
    return {};
}
exports.MsgRecordBatchResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecordBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgRecordBatchResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgRecordBatchResponse();
        return message;
    },
};
function createBaseMsgCreateBridge() {
    return { creator: "", config: undefined };
}
exports.MsgCreateBridge = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.config !== undefined) {
            types_1.BridgeConfig.encode(message.config, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateBridge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.config = types_1.BridgeConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? gt.String(object.creator) : "",
            config: isSet(object.config) ? types_1.BridgeConfig.fromJSON(object.config) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.config !== undefined) {
            obj.config = types_1.BridgeConfig.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateBridge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateBridge();
        message.creator = object.creator ?? "";
        message.config =
            object.config !== undefined && object.config !== null
                ? types_1.BridgeConfig.fromPartial(object.config)
                : undefined;
        return message;
    },
};
function createBaseMsgCreateBridgeResponse() {
    return { bridgeId: 0n };
}
exports.MsgCreateBridgeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.bridgeId.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateBridgeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateBridgeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateBridgeResponse();
        message.bridgeId = object.bridgeId ?? 0n;
        return message;
    },
};
function createBaseMsgProposeOutput() {
    return { proposer: "", bridgeId: 0n, outputIndex: 0n, l2BlockNumber: 0n, outputRoot: new Uint8Array(0) };
}
exports.MsgProposeOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.proposer !== "") {
            writer.uint32(10).string(message.proposer);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(24).uint64(message.outputIndex.toString());
        }
        if (message.l2BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l2BlockNumber) !== message.l2BlockNumber) {
                throw new gt.Error("value provided for field message.l2BlockNumber of type uint64 too large");
            }
            writer.uint32(32).uint64(message.l2BlockNumber.toString());
        }
        if (message.outputRoot.length !== 0) {
            writer.uint32(42).bytes(message.outputRoot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgProposeOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.proposer = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.l2BlockNumber = longToBigint(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.outputRoot = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            proposer: isSet(object.proposer) ? gt.String(object.proposer) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            l2BlockNumber: isSet(object.l2BlockNumber) ? BigInt(object.l2BlockNumber) : 0n,
            outputRoot: isSet(object.outputRoot) ? bytesFromBase64(object.outputRoot) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.proposer !== "") {
            obj.proposer = message.proposer;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.l2BlockNumber !== 0n) {
            obj.l2BlockNumber = message.l2BlockNumber.toString();
        }
        if (message.outputRoot.length !== 0) {
            obj.outputRoot = base64FromBytes(message.outputRoot);
        }
        return obj;
    },
    create(base) {
        return exports.MsgProposeOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgProposeOutput();
        message.proposer = object.proposer ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.outputIndex = object.outputIndex ?? 0n;
        message.l2BlockNumber = object.l2BlockNumber ?? 0n;
        message.outputRoot = object.outputRoot ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMsgProposeOutputResponse() {
    return {};
}
exports.MsgProposeOutputResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgProposeOutputResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgProposeOutputResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgProposeOutputResponse();
        return message;
    },
};
function createBaseMsgDeleteOutput() {
    return { challenger: "", bridgeId: 0n, outputIndex: 0n };
}
exports.MsgDeleteOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.challenger !== "") {
            writer.uint32(10).string(message.challenger);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(24).uint64(message.outputIndex.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.challenger = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            challenger: isSet(object.challenger) ? gt.String(object.challenger) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.challenger !== "") {
            obj.challenger = message.challenger;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgDeleteOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgDeleteOutput();
        message.challenger = object.challenger ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.outputIndex = object.outputIndex ?? 0n;
        return message;
    },
};
function createBaseMsgDeleteOutputResponse() {
    return {};
}
exports.MsgDeleteOutputResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteOutputResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgDeleteOutputResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteOutputResponse();
        return message;
    },
};
function createBaseMsgInitiateTokenDeposit() {
    return { sender: "", bridgeId: 0n, to: "", amount: undefined, data: new Uint8Array(0) };
}
exports.MsgInitiateTokenDeposit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.to !== "") {
            writer.uint32(26).string(message.to);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
        }
        if (message.data.length !== 0) {
            writer.uint32(42).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitiateTokenDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            to: isSet(object.to) ? gt.String(object.to) : "",
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.MsgInitiateTokenDeposit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgInitiateTokenDeposit();
        message.sender = object.sender ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.to = object.to ?? "";
        message.amount =
            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMsgInitiateTokenDepositResponse() {
    return { sequence: 0n };
}
exports.MsgInitiateTokenDepositResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sequence !== 0n) {
            if (BigInt.asUintN(64, message.sequence) !== message.sequence) {
                throw new gt.Error("value provided for field message.sequence of type uint64 too large");
            }
            writer.uint32(8).uint64(message.sequence.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitiateTokenDepositResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== 0n) {
            obj.sequence = message.sequence.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgInitiateTokenDepositResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgInitiateTokenDepositResponse();
        message.sequence = object.sequence ?? 0n;
        return message;
    },
};
function createBaseMsgFinalizeTokenWithdrawal() {
    return {
        sender: "",
        bridgeId: 0n,
        outputIndex: 0n,
        withdrawalProofs: [],
        from: "",
        to: "",
        sequence: 0n,
        amount: undefined,
        version: new Uint8Array(0),
        storageRoot: new Uint8Array(0),
        lastBlockHash: new Uint8Array(0),
    };
}
exports.MsgFinalizeTokenWithdrawal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(24).uint64(message.outputIndex.toString());
        }
        for (const v of message.withdrawalProofs) {
            writer.uint32(34).bytes(v);
        }
        if (message.from !== "") {
            writer.uint32(42).string(message.from);
        }
        if (message.to !== "") {
            writer.uint32(50).string(message.to);
        }
        if (message.sequence !== 0n) {
            if (BigInt.asUintN(64, message.sequence) !== message.sequence) {
                throw new gt.Error("value provided for field message.sequence of type uint64 too large");
            }
            writer.uint32(56).uint64(message.sequence.toString());
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(66).fork()).ldelim();
        }
        if (message.version.length !== 0) {
            writer.uint32(74).bytes(message.version);
        }
        if (message.storageRoot.length !== 0) {
            writer.uint32(82).bytes(message.storageRoot);
        }
        if (message.lastBlockHash.length !== 0) {
            writer.uint32(90).bytes(message.lastBlockHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFinalizeTokenWithdrawal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.withdrawalProofs.push(reader.bytes());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.sequence = longToBigint(reader.uint64());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.version = reader.bytes();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.storageRoot = reader.bytes();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.lastBlockHash = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            withdrawalProofs: gt.Array.isArray(object?.withdrawalProofs)
                ? object.withdrawalProofs.map((e) => bytesFromBase64(e))
                : [],
            from: isSet(object.from) ? gt.String(object.from) : "",
            to: isSet(object.to) ? gt.String(object.to) : "",
            sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n,
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            version: isSet(object.version) ? bytesFromBase64(object.version) : new Uint8Array(0),
            storageRoot: isSet(object.storageRoot) ? bytesFromBase64(object.storageRoot) : new Uint8Array(0),
            lastBlockHash: isSet(object.lastBlockHash) ? bytesFromBase64(object.lastBlockHash) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.withdrawalProofs?.length) {
            obj.withdrawalProofs = message.withdrawalProofs.map((e) => base64FromBytes(e));
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.sequence !== 0n) {
            obj.sequence = message.sequence.toString();
        }
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        if (message.version.length !== 0) {
            obj.version = base64FromBytes(message.version);
        }
        if (message.storageRoot.length !== 0) {
            obj.storageRoot = base64FromBytes(message.storageRoot);
        }
        if (message.lastBlockHash.length !== 0) {
            obj.lastBlockHash = base64FromBytes(message.lastBlockHash);
        }
        return obj;
    },
    create(base) {
        return exports.MsgFinalizeTokenWithdrawal.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgFinalizeTokenWithdrawal();
        message.sender = object.sender ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.outputIndex = object.outputIndex ?? 0n;
        message.withdrawalProofs = object.withdrawalProofs?.map((e) => e) || [];
        message.from = object.from ?? "";
        message.to = object.to ?? "";
        message.sequence = object.sequence ?? 0n;
        message.amount =
            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.version = object.version ?? new Uint8Array(0);
        message.storageRoot = object.storageRoot ?? new Uint8Array(0);
        message.lastBlockHash = object.lastBlockHash ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMsgFinalizeTokenWithdrawalResponse() {
    return {};
}
exports.MsgFinalizeTokenWithdrawalResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFinalizeTokenWithdrawalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgFinalizeTokenWithdrawalResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgFinalizeTokenWithdrawalResponse();
        return message;
    },
};
function createBaseMsgUpdateProposer() {
    return { authority: "", bridgeId: 0n, newProposer: "" };
}
exports.MsgUpdateProposer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.newProposer !== "") {
            writer.uint32(26).string(message.newProposer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateProposer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newProposer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            newProposer: isSet(object.newProposer) ? gt.String(object.newProposer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.newProposer !== "") {
            obj.newProposer = message.newProposer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateProposer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateProposer();
        message.authority = object.authority ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.newProposer = object.newProposer ?? "";
        return message;
    },
};
function createBaseMsgUpdateProposerResponse() {
    return { outputIndex: 0n, l2BlockNumber: 0n };
}
exports.MsgUpdateProposerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(8).uint64(message.outputIndex.toString());
        }
        if (message.l2BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l2BlockNumber) !== message.l2BlockNumber) {
                throw new gt.Error("value provided for field message.l2BlockNumber of type uint64 too large");
            }
            writer.uint32(16).uint64(message.l2BlockNumber.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateProposerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.l2BlockNumber = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            l2BlockNumber: isSet(object.l2BlockNumber) ? BigInt(object.l2BlockNumber) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.l2BlockNumber !== 0n) {
            obj.l2BlockNumber = message.l2BlockNumber.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateProposerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateProposerResponse();
        message.outputIndex = object.outputIndex ?? 0n;
        message.l2BlockNumber = object.l2BlockNumber ?? 0n;
        return message;
    },
};
function createBaseMsgUpdateChallenger() {
    return { authority: "", bridgeId: 0n, challenger: "" };
}
exports.MsgUpdateChallenger = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.challenger !== "") {
            writer.uint32(26).string(message.challenger);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateChallenger();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.challenger = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            challenger: isSet(object.challenger) ? gt.String(object.challenger) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.challenger !== "") {
            obj.challenger = message.challenger;
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateChallenger.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateChallenger();
        message.authority = object.authority ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.challenger = object.challenger ?? "";
        return message;
    },
};
function createBaseMsgUpdateChallengerResponse() {
    return { outputIndex: 0n, l2BlockNumber: 0n };
}
exports.MsgUpdateChallengerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(8).uint64(message.outputIndex.toString());
        }
        if (message.l2BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l2BlockNumber) !== message.l2BlockNumber) {
                throw new gt.Error("value provided for field message.l2BlockNumber of type uint64 too large");
            }
            writer.uint32(16).uint64(message.l2BlockNumber.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateChallengerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.l2BlockNumber = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            l2BlockNumber: isSet(object.l2BlockNumber) ? BigInt(object.l2BlockNumber) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.l2BlockNumber !== 0n) {
            obj.l2BlockNumber = message.l2BlockNumber.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateChallengerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateChallengerResponse();
        message.outputIndex = object.outputIndex ?? 0n;
        message.l2BlockNumber = object.l2BlockNumber ?? 0n;
        return message;
    },
};
function createBaseMsgUpdateBatchInfo() {
    return { authority: "", bridgeId: 0n, newBatchInfo: undefined };
}
exports.MsgUpdateBatchInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.newBatchInfo !== undefined) {
            types_1.BatchInfo.encode(message.newBatchInfo, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateBatchInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newBatchInfo = types_1.BatchInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            newBatchInfo: isSet(object.newBatchInfo) ? types_1.BatchInfo.fromJSON(object.newBatchInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.newBatchInfo !== undefined) {
            obj.newBatchInfo = types_1.BatchInfo.toJSON(message.newBatchInfo);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateBatchInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateBatchInfo();
        message.authority = object.authority ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.newBatchInfo =
            object.newBatchInfo !== undefined && object.newBatchInfo !== null
                ? types_1.BatchInfo.fromPartial(object.newBatchInfo)
                : undefined;
        return message;
    },
};
function createBaseMsgUpdateBatchInfoResponse() {
    return { outputIndex: 0n, l2BlockNumber: 0n };
}
exports.MsgUpdateBatchInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(8).uint64(message.outputIndex.toString());
        }
        if (message.l2BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l2BlockNumber) !== message.l2BlockNumber) {
                throw new gt.Error("value provided for field message.l2BlockNumber of type uint64 too large");
            }
            writer.uint32(16).uint64(message.l2BlockNumber.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateBatchInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.l2BlockNumber = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            l2BlockNumber: isSet(object.l2BlockNumber) ? BigInt(object.l2BlockNumber) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.l2BlockNumber !== 0n) {
            obj.l2BlockNumber = message.l2BlockNumber.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateBatchInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateBatchInfoResponse();
        message.outputIndex = object.outputIndex ?? 0n;
        message.l2BlockNumber = object.l2BlockNumber ?? 0n;
        return message;
    },
};
function createBaseMsgUpdateOracleConfig() {
    return { authority: "", bridgeId: 0n, oracleEnabled: false };
}
exports.MsgUpdateOracleConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.oracleEnabled !== false) {
            writer.uint32(24).bool(message.oracleEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateOracleConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.oracleEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            oracleEnabled: isSet(object.oracleEnabled) ? gt.Boolean(object.oracleEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.oracleEnabled !== false) {
            obj.oracleEnabled = message.oracleEnabled;
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateOracleConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateOracleConfig();
        message.authority = object.authority ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.oracleEnabled = object.oracleEnabled ?? false;
        return message;
    },
};
function createBaseMsgUpdateOracleConfigResponse() {
    return {};
}
exports.MsgUpdateOracleConfigResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateOracleConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateOracleConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateOracleConfigResponse();
        return message;
    },
};
function createBaseMsgUpdateMetadata() {
    return { authority: "", bridgeId: 0n, metadata: new Uint8Array(0) };
}
exports.MsgUpdateMetadata = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.bridgeId !== 0n) {
            if (BigInt.asUintN(64, message.bridgeId) !== message.bridgeId) {
                throw new gt.Error("value provided for field message.bridgeId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.bridgeId.toString());
        }
        if (message.metadata.length !== 0) {
            writer.uint32(26).bytes(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bridgeId = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.metadata = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? BigInt(object.bridgeId) : 0n,
            metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.bridgeId !== 0n) {
            obj.bridgeId = message.bridgeId.toString();
        }
        if (message.metadata.length !== 0) {
            obj.metadata = base64FromBytes(message.metadata);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateMetadata();
        message.authority = object.authority ?? "";
        message.bridgeId = object.bridgeId ?? 0n;
        message.metadata = object.metadata ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMsgUpdateMetadataResponse() {
    return { outputIndex: 0n, l2BlockNumber: 0n };
}
exports.MsgUpdateMetadataResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outputIndex !== 0n) {
            if (BigInt.asUintN(64, message.outputIndex) !== message.outputIndex) {
                throw new gt.Error("value provided for field message.outputIndex of type uint64 too large");
            }
            writer.uint32(8).uint64(message.outputIndex.toString());
        }
        if (message.l2BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l2BlockNumber) !== message.l2BlockNumber) {
                throw new gt.Error("value provided for field message.l2BlockNumber of type uint64 too large");
            }
            writer.uint32(16).uint64(message.l2BlockNumber.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.outputIndex = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.l2BlockNumber = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? BigInt(object.outputIndex) : 0n,
            l2BlockNumber: isSet(object.l2BlockNumber) ? BigInt(object.l2BlockNumber) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputIndex !== 0n) {
            obj.outputIndex = message.outputIndex.toString();
        }
        if (message.l2BlockNumber !== 0n) {
            obj.l2BlockNumber = message.l2BlockNumber.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateMetadataResponse();
        message.outputIndex = object.outputIndex ?? 0n;
        message.l2BlockNumber = object.l2BlockNumber ?? 0n;
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.RecordBatch = this.RecordBatch.bind(this);
        this.CreateBridge = this.CreateBridge.bind(this);
        this.ProposeOutput = this.ProposeOutput.bind(this);
        this.DeleteOutput = this.DeleteOutput.bind(this);
        this.InitiateTokenDeposit = this.InitiateTokenDeposit.bind(this);
        this.FinalizeTokenWithdrawal = this.FinalizeTokenWithdrawal.bind(this);
        this.UpdateProposer = this.UpdateProposer.bind(this);
        this.UpdateChallenger = this.UpdateChallenger.bind(this);
        this.UpdateBatchInfo = this.UpdateBatchInfo.bind(this);
        this.UpdateMetadata = this.UpdateMetadata.bind(this);
        this.UpdateOracleConfig = this.UpdateOracleConfig.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    RecordBatch(request, metadata) {
        return this.rpc.unary(exports.MsgRecordBatchDesc, exports.MsgRecordBatch.fromPartial(request), metadata);
    }
    CreateBridge(request, metadata) {
        return this.rpc.unary(exports.MsgCreateBridgeDesc, exports.MsgCreateBridge.fromPartial(request), metadata);
    }
    ProposeOutput(request, metadata) {
        return this.rpc.unary(exports.MsgProposeOutputDesc, exports.MsgProposeOutput.fromPartial(request), metadata);
    }
    DeleteOutput(request, metadata) {
        return this.rpc.unary(exports.MsgDeleteOutputDesc, exports.MsgDeleteOutput.fromPartial(request), metadata);
    }
    InitiateTokenDeposit(request, metadata) {
        return this.rpc.unary(exports.MsgInitiateTokenDepositDesc, exports.MsgInitiateTokenDeposit.fromPartial(request), metadata);
    }
    FinalizeTokenWithdrawal(request, metadata) {
        return this.rpc.unary(exports.MsgFinalizeTokenWithdrawalDesc, exports.MsgFinalizeTokenWithdrawal.fromPartial(request), metadata);
    }
    UpdateProposer(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateProposerDesc, exports.MsgUpdateProposer.fromPartial(request), metadata);
    }
    UpdateChallenger(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateChallengerDesc, exports.MsgUpdateChallenger.fromPartial(request), metadata);
    }
    UpdateBatchInfo(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateBatchInfoDesc, exports.MsgUpdateBatchInfo.fromPartial(request), metadata);
    }
    UpdateMetadata(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateMetadataDesc, exports.MsgUpdateMetadata.fromPartial(request), metadata);
    }
    UpdateOracleConfig(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateOracleConfigDesc, exports.MsgUpdateOracleConfig.fromPartial(request), metadata);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateParamsDesc, exports.MsgUpdateParams.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = { serviceName: "opinit.ophost.v1.Msg" };
exports.MsgRecordBatchDesc = {
    methodName: "RecordBatch",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgRecordBatch.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgRecordBatchResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgCreateBridgeDesc = {
    methodName: "CreateBridge",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreateBridge.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgCreateBridgeResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgProposeOutputDesc = {
    methodName: "ProposeOutput",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgProposeOutput.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgProposeOutputResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgDeleteOutputDesc = {
    methodName: "DeleteOutput",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgDeleteOutput.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgDeleteOutputResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgInitiateTokenDepositDesc = {
    methodName: "InitiateTokenDeposit",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgInitiateTokenDeposit.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgInitiateTokenDepositResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgFinalizeTokenWithdrawalDesc = {
    methodName: "FinalizeTokenWithdrawal",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgFinalizeTokenWithdrawal.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgFinalizeTokenWithdrawalResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateProposerDesc = {
    methodName: "UpdateProposer",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateProposer.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateProposerResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateChallengerDesc = {
    methodName: "UpdateChallenger",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateChallenger.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateChallengerResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateBatchInfoDesc = {
    methodName: "UpdateBatchInfo",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateBatchInfo.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateBatchInfoResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateMetadataDesc = {
    methodName: "UpdateMetadata",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateMetadata.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateMetadataResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateOracleConfigDesc = {
    methodName: "UpdateOracleConfig",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateOracleConfig.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateOracleConfigResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateParamsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=tx.js.map