"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmwasm/wasm/v1/ibc.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgIBCCloseChannel = exports.MsgIBCWriteAcknowledgementResponse = exports.MsgIBCSendResponse = exports.MsgIBCSend = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmwasm.wasm.v1";
function createBaseMsgIBCSend() {
    return { channel: "", timeoutHeight: 0n, timeoutTimestamp: 0n, data: new Uint8Array(0) };
}
exports.MsgIBCSend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(18).string(message.channel);
        }
        if (message.timeoutHeight !== 0n) {
            if (BigInt.asUintN(64, message.timeoutHeight) !== message.timeoutHeight) {
                throw new gt.Error("value provided for field message.timeoutHeight of type uint64 too large");
            }
            writer.uint32(32).uint64(message.timeoutHeight.toString());
        }
        if (message.timeoutTimestamp !== 0n) {
            if (BigInt.asUintN(64, message.timeoutTimestamp) !== message.timeoutTimestamp) {
                throw new gt.Error("value provided for field message.timeoutTimestamp of type uint64 too large");
            }
            writer.uint32(40).uint64(message.timeoutTimestamp.toString());
        }
        if (message.data.length !== 0) {
            writer.uint32(50).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIBCSend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.timeoutHeight = longToBigint(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.timeoutTimestamp = longToBigint(reader.uint64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel: isSet(object.channel) ? gt.String(object.channel) : "",
            timeoutHeight: isSet(object.timeoutHeight) ? BigInt(object.timeoutHeight) : 0n,
            timeoutTimestamp: isSet(object.timeoutTimestamp) ? BigInt(object.timeoutTimestamp) : 0n,
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        if (message.timeoutHeight !== 0n) {
            obj.timeoutHeight = message.timeoutHeight.toString();
        }
        if (message.timeoutTimestamp !== 0n) {
            obj.timeoutTimestamp = message.timeoutTimestamp.toString();
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.MsgIBCSend.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgIBCSend();
        message.channel = object.channel ?? "";
        message.timeoutHeight = object.timeoutHeight ?? 0n;
        message.timeoutTimestamp = object.timeoutTimestamp ?? 0n;
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMsgIBCSendResponse() {
    return { sequence: 0n };
}
exports.MsgIBCSendResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sequence !== 0n) {
            if (BigInt.asUintN(64, message.sequence) !== message.sequence) {
                throw new gt.Error("value provided for field message.sequence of type uint64 too large");
            }
            writer.uint32(8).uint64(message.sequence.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIBCSendResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== 0n) {
            obj.sequence = message.sequence.toString();
        }
        return obj;
    },
    create(base) {
        return exports.MsgIBCSendResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgIBCSendResponse();
        message.sequence = object.sequence ?? 0n;
        return message;
    },
};
function createBaseMsgIBCWriteAcknowledgementResponse() {
    return {};
}
exports.MsgIBCWriteAcknowledgementResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIBCWriteAcknowledgementResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgIBCWriteAcknowledgementResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgIBCWriteAcknowledgementResponse();
        return message;
    },
};
function createBaseMsgIBCCloseChannel() {
    return { channel: "" };
}
exports.MsgIBCCloseChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(18).string(message.channel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIBCCloseChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel: isSet(object.channel) ? gt.String(object.channel) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        return obj;
    },
    create(base) {
        return exports.MsgIBCCloseChannel.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgIBCCloseChannel();
        message.channel = object.channel ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ibc.js.map