"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: initia/move/v1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "initia.move.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        executionCounter: 0n,
        stdlibs: [],
        modules: [],
        checksums: [],
        resources: [],
        tableInfos: [],
        tableEntries: [],
        dexPairs: [],
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.executionCounter !== 0n) {
            if (BigInt.asUintN(64, message.executionCounter) !== message.executionCounter) {
                throw new gt.Error("value provided for field message.executionCounter of type uint64 too large");
            }
            writer.uint32(16).uint64(message.executionCounter.toString());
        }
        for (const v of message.stdlibs) {
            writer.uint32(26).bytes(v);
        }
        for (const v of message.modules) {
            types_1.Module.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.checksums) {
            types_1.Checksum.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.resources) {
            types_1.Resource.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.tableInfos) {
            types_1.TableInfo.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.tableEntries) {
            types_1.TableEntry.encode(v, writer.uint32(66).fork()).ldelim();
        }
        for (const v of message.dexPairs) {
            types_1.DexPair.encode(v, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.executionCounter = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stdlibs.push(reader.bytes());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.modules.push(types_1.Module.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.checksums.push(types_1.Checksum.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.resources.push(types_1.Resource.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.tableInfos.push(types_1.TableInfo.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.tableEntries.push(types_1.TableEntry.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.dexPairs.push(types_1.DexPair.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            executionCounter: isSet(object.executionCounter) ? BigInt(object.executionCounter) : 0n,
            stdlibs: gt.Array.isArray(object?.stdlibs) ? object.stdlibs.map((e) => bytesFromBase64(e)) : [],
            modules: gt.Array.isArray(object?.modules) ? object.modules.map((e) => types_1.Module.fromJSON(e)) : [],
            checksums: gt.Array.isArray(object?.checksums)
                ? object.checksums.map((e) => types_1.Checksum.fromJSON(e))
                : [],
            resources: gt.Array.isArray(object?.resources)
                ? object.resources.map((e) => types_1.Resource.fromJSON(e))
                : [],
            tableInfos: gt.Array.isArray(object?.tableInfos)
                ? object.tableInfos.map((e) => types_1.TableInfo.fromJSON(e))
                : [],
            tableEntries: gt.Array.isArray(object?.tableEntries)
                ? object.tableEntries.map((e) => types_1.TableEntry.fromJSON(e))
                : [],
            dexPairs: gt.Array.isArray(object?.dexPairs)
                ? object.dexPairs.map((e) => types_1.DexPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.executionCounter !== 0n) {
            obj.executionCounter = message.executionCounter.toString();
        }
        if (message.stdlibs?.length) {
            obj.stdlibs = message.stdlibs.map((e) => base64FromBytes(e));
        }
        if (message.modules?.length) {
            obj.modules = message.modules.map((e) => types_1.Module.toJSON(e));
        }
        if (message.checksums?.length) {
            obj.checksums = message.checksums.map((e) => types_1.Checksum.toJSON(e));
        }
        if (message.resources?.length) {
            obj.resources = message.resources.map((e) => types_1.Resource.toJSON(e));
        }
        if (message.tableInfos?.length) {
            obj.tableInfos = message.tableInfos.map((e) => types_1.TableInfo.toJSON(e));
        }
        if (message.tableEntries?.length) {
            obj.tableEntries = message.tableEntries.map((e) => types_1.TableEntry.toJSON(e));
        }
        if (message.dexPairs?.length) {
            obj.dexPairs = message.dexPairs.map((e) => types_1.DexPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.executionCounter = object.executionCounter ?? 0n;
        message.stdlibs = object.stdlibs?.map((e) => e) || [];
        message.modules = object.modules?.map((e) => types_1.Module.fromPartial(e)) || [];
        message.checksums = object.checksums?.map((e) => types_1.Checksum.fromPartial(e)) || [];
        message.resources = object.resources?.map((e) => types_1.Resource.fromPartial(e)) || [];
        message.tableInfos = object.tableInfos?.map((e) => types_1.TableInfo.fromPartial(e)) || [];
        message.tableEntries = object.tableEntries?.map((e) => types_1.TableEntry.fromPartial(e)) || [];
        message.dexPairs = object.dexPairs?.map((e) => types_1.DexPair.fromPartial(e)) || [];
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map