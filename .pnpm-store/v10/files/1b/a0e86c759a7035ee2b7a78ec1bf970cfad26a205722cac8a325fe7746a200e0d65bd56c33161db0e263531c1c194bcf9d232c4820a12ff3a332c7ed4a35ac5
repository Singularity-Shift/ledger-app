"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: minievm/evm/v1/query.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryParamsDesc = exports.QueryCallDesc = exports.QueryDenomDesc = exports.QueryERC721OriginTokenInfosDesc = exports.QueryERC721ClassIdByContractAddrDesc = exports.QueryContractAddrByDenomDesc = exports.QueryERC20WrapperDesc = exports.QueryERC20FactoryDesc = exports.QueryStateDesc = exports.QueryCodeDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryERC721OriginTokenInfosResponse = exports.QueryERC721OriginTokenInfosRequest = exports.QueryERC721ClassIdByContractAddrResponse = exports.QueryERC721ClassIdByContractAddrRequest = exports.QueryCallResponse = exports.TraceOptions = exports.QueryCallRequest = exports.QueryDenomResponse = exports.QueryDenomRequest = exports.QueryContractAddrByDenomResponse = exports.QueryContractAddrByDenomRequest = exports.QueryERC20WrapperResponse = exports.QueryERC20WrapperRequest = exports.QueryERC20FactoryResponse = exports.QueryERC20FactoryRequest = exports.QueryStateResponse = exports.QueryStateRequest = exports.QueryCodeResponse = exports.QueryCodeRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "minievm.evm.v1";
function createBaseQueryCodeRequest() {
    return { contractAddr: "" };
}
exports.QueryCodeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCodeRequest();
        message.contractAddr = object.contractAddr ?? "";
        return message;
    },
};
function createBaseQueryCodeResponse() {
    return { code: "" };
}
exports.QueryCodeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? gt.String(object.code) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCodeResponse();
        message.code = object.code ?? "";
        return message;
    },
};
function createBaseQueryStateRequest() {
    return { contractAddr: "", key: "" };
}
exports.QueryStateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "",
            key: isSet(object.key) ? gt.String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStateRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseQueryStateResponse() {
    return { value: "" };
}
exports.QueryStateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? gt.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStateResponse();
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseQueryERC20FactoryRequest() {
    return {};
}
exports.QueryERC20FactoryRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC20FactoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryERC20FactoryRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryERC20FactoryRequest();
        return message;
    },
};
function createBaseQueryERC20FactoryResponse() {
    return { address: "" };
}
exports.QueryERC20FactoryResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC20FactoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? gt.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryERC20FactoryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryERC20FactoryResponse();
        message.address = object.address ?? "";
        return message;
    },
};
function createBaseQueryERC20WrapperRequest() {
    return {};
}
exports.QueryERC20WrapperRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC20WrapperRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryERC20WrapperRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryERC20WrapperRequest();
        return message;
    },
};
function createBaseQueryERC20WrapperResponse() {
    return { address: "" };
}
exports.QueryERC20WrapperResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC20WrapperResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? gt.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryERC20WrapperResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryERC20WrapperResponse();
        message.address = object.address ?? "";
        return message;
    },
};
function createBaseQueryContractAddrByDenomRequest() {
    return { denom: "" };
}
exports.QueryContractAddrByDenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractAddrByDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? gt.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractAddrByDenomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryContractAddrByDenomRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryContractAddrByDenomResponse() {
    return { address: "" };
}
exports.QueryContractAddrByDenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractAddrByDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? gt.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractAddrByDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryContractAddrByDenomResponse();
        message.address = object.address ?? "";
        return message;
    },
};
function createBaseQueryDenomRequest() {
    return { contractAddr: "" };
}
exports.QueryDenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryDenomRequest();
        message.contractAddr = object.contractAddr ?? "";
        return message;
    },
};
function createBaseQueryDenomResponse() {
    return { denom: "" };
}
exports.QueryDenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? gt.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryDenomResponse();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryCallRequest() {
    return { sender: "", contractAddr: "", input: "", value: "", traceOptions: undefined };
}
exports.QueryCallRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.input !== "") {
            writer.uint32(26).string(message.input);
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        if (message.traceOptions !== undefined) {
            exports.TraceOptions.encode(message.traceOptions, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.traceOptions = exports.TraceOptions.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "",
            input: isSet(object.input) ? gt.String(object.input) : "",
            value: isSet(object.value) ? gt.String(object.value) : "",
            traceOptions: isSet(object.traceOptions) ? exports.TraceOptions.fromJSON(object.traceOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.traceOptions !== undefined) {
            obj.traceOptions = exports.TraceOptions.toJSON(message.traceOptions);
        }
        return obj;
    },
    create(base) {
        return exports.QueryCallRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCallRequest();
        message.sender = object.sender ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.input = object.input ?? "";
        message.value = object.value ?? "";
        message.traceOptions =
            object.traceOptions !== undefined && object.traceOptions !== null
                ? exports.TraceOptions.fromPartial(object.traceOptions)
                : undefined;
        return message;
    },
};
function createBaseTraceOptions() {
    return { withMemory: false, withStack: false, withStorage: false, withReturnData: false };
}
exports.TraceOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withMemory !== false) {
            writer.uint32(8).bool(message.withMemory);
        }
        if (message.withStack !== false) {
            writer.uint32(16).bool(message.withStack);
        }
        if (message.withStorage !== false) {
            writer.uint32(24).bool(message.withStorage);
        }
        if (message.withReturnData !== false) {
            writer.uint32(32).bool(message.withReturnData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTraceOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withMemory = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.withStack = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.withStorage = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.withReturnData = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            withMemory: isSet(object.withMemory) ? gt.Boolean(object.withMemory) : false,
            withStack: isSet(object.withStack) ? gt.Boolean(object.withStack) : false,
            withStorage: isSet(object.withStorage) ? gt.Boolean(object.withStorage) : false,
            withReturnData: isSet(object.withReturnData) ? gt.Boolean(object.withReturnData) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.withMemory !== false) {
            obj.withMemory = message.withMemory;
        }
        if (message.withStack !== false) {
            obj.withStack = message.withStack;
        }
        if (message.withStorage !== false) {
            obj.withStorage = message.withStorage;
        }
        if (message.withReturnData !== false) {
            obj.withReturnData = message.withReturnData;
        }
        return obj;
    },
    create(base) {
        return exports.TraceOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTraceOptions();
        message.withMemory = object.withMemory ?? false;
        message.withStack = object.withStack ?? false;
        message.withStorage = object.withStorage ?? false;
        message.withReturnData = object.withReturnData ?? false;
        return message;
    },
};
function createBaseQueryCallResponse() {
    return { response: "", usedGas: 0n, logs: [], traceOutput: "", error: "" };
}
exports.QueryCallResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.response !== "") {
            writer.uint32(10).string(message.response);
        }
        if (message.usedGas !== 0n) {
            if (BigInt.asUintN(64, message.usedGas) !== message.usedGas) {
                throw new gt.Error("value provided for field message.usedGas of type uint64 too large");
            }
            writer.uint32(16).uint64(message.usedGas.toString());
        }
        for (const v of message.logs) {
            types_1.Log.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.traceOutput !== "") {
            writer.uint32(34).string(message.traceOutput);
        }
        if (message.error !== "") {
            writer.uint32(42).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.usedGas = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logs.push(types_1.Log.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.traceOutput = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? gt.String(object.response) : "",
            usedGas: isSet(object.usedGas) ? BigInt(object.usedGas) : 0n,
            logs: gt.Array.isArray(object?.logs) ? object.logs.map((e) => types_1.Log.fromJSON(e)) : [],
            traceOutput: isSet(object.traceOutput) ? gt.String(object.traceOutput) : "",
            error: isSet(object.error) ? gt.String(object.error) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== "") {
            obj.response = message.response;
        }
        if (message.usedGas !== 0n) {
            obj.usedGas = message.usedGas.toString();
        }
        if (message.logs?.length) {
            obj.logs = message.logs.map((e) => types_1.Log.toJSON(e));
        }
        if (message.traceOutput !== "") {
            obj.traceOutput = message.traceOutput;
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCallResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCallResponse();
        message.response = object.response ?? "";
        message.usedGas = object.usedGas ?? 0n;
        message.logs = object.logs?.map((e) => types_1.Log.fromPartial(e)) || [];
        message.traceOutput = object.traceOutput ?? "";
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseQueryERC721ClassIdByContractAddrRequest() {
    return { contractAddr: "" };
}
exports.QueryERC721ClassIdByContractAddrRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC721ClassIdByContractAddrRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        return obj;
    },
    create(base) {
        return exports.QueryERC721ClassIdByContractAddrRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryERC721ClassIdByContractAddrRequest();
        message.contractAddr = object.contractAddr ?? "";
        return message;
    },
};
function createBaseQueryERC721ClassIdByContractAddrResponse() {
    return { classId: "" };
}
exports.QueryERC721ClassIdByContractAddrResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC721ClassIdByContractAddrResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { classId: isSet(object.classId) ? gt.String(object.classId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryERC721ClassIdByContractAddrResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryERC721ClassIdByContractAddrResponse();
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryERC721OriginTokenInfosRequest() {
    return { classId: "", tokenIds: [] };
}
exports.QueryERC721OriginTokenInfosRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        for (const v of message.tokenIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC721OriginTokenInfosRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? gt.String(object.classId) : "",
            tokenIds: gt.Array.isArray(object?.tokenIds) ? object.tokenIds.map((e) => gt.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.tokenIds?.length) {
            obj.tokenIds = message.tokenIds;
        }
        return obj;
    },
    create(base) {
        return exports.QueryERC721OriginTokenInfosRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryERC721OriginTokenInfosRequest();
        message.classId = object.classId ?? "";
        message.tokenIds = object.tokenIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryERC721OriginTokenInfosResponse() {
    return { tokenInfos: [] };
}
exports.QueryERC721OriginTokenInfosResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.tokenInfos) {
            types_1.ERC721OriginTokenInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryERC721OriginTokenInfosResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenInfos.push(types_1.ERC721OriginTokenInfo.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenInfos: gt.Array.isArray(object?.tokenInfos)
                ? object.tokenInfos.map((e) => types_1.ERC721OriginTokenInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenInfos?.length) {
            obj.tokenInfos = message.tokenInfos.map((e) => types_1.ERC721OriginTokenInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryERC721OriginTokenInfosResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryERC721OriginTokenInfosResponse();
        message.tokenInfos = object.tokenInfos?.map((e) => types_1.ERC721OriginTokenInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Code = this.Code.bind(this);
        this.State = this.State.bind(this);
        this.ERC20Factory = this.ERC20Factory.bind(this);
        this.ERC20Wrapper = this.ERC20Wrapper.bind(this);
        this.ContractAddrByDenom = this.ContractAddrByDenom.bind(this);
        this.ERC721ClassIdByContractAddr = this.ERC721ClassIdByContractAddr.bind(this);
        this.ERC721OriginTokenInfos = this.ERC721OriginTokenInfos.bind(this);
        this.Denom = this.Denom.bind(this);
        this.Call = this.Call.bind(this);
        this.Params = this.Params.bind(this);
    }
    Code(request, metadata) {
        return this.rpc.unary(exports.QueryCodeDesc, exports.QueryCodeRequest.fromPartial(request), metadata);
    }
    State(request, metadata) {
        return this.rpc.unary(exports.QueryStateDesc, exports.QueryStateRequest.fromPartial(request), metadata);
    }
    ERC20Factory(request, metadata) {
        return this.rpc.unary(exports.QueryERC20FactoryDesc, exports.QueryERC20FactoryRequest.fromPartial(request), metadata);
    }
    ERC20Wrapper(request, metadata) {
        return this.rpc.unary(exports.QueryERC20WrapperDesc, exports.QueryERC20WrapperRequest.fromPartial(request), metadata);
    }
    ContractAddrByDenom(request, metadata) {
        return this.rpc.unary(exports.QueryContractAddrByDenomDesc, exports.QueryContractAddrByDenomRequest.fromPartial(request), metadata);
    }
    ERC721ClassIdByContractAddr(request, metadata) {
        return this.rpc.unary(exports.QueryERC721ClassIdByContractAddrDesc, exports.QueryERC721ClassIdByContractAddrRequest.fromPartial(request), metadata);
    }
    ERC721OriginTokenInfos(request, metadata) {
        return this.rpc.unary(exports.QueryERC721OriginTokenInfosDesc, exports.QueryERC721OriginTokenInfosRequest.fromPartial(request), metadata);
    }
    Denom(request, metadata) {
        return this.rpc.unary(exports.QueryDenomDesc, exports.QueryDenomRequest.fromPartial(request), metadata);
    }
    Call(request, metadata) {
        return this.rpc.unary(exports.QueryCallDesc, exports.QueryCallRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "minievm.evm.v1.Query" };
exports.QueryCodeDesc = {
    methodName: "Code",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryCodeRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryCodeResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryStateDesc = {
    methodName: "State",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryStateRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryStateResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryERC20FactoryDesc = {
    methodName: "ERC20Factory",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryERC20FactoryRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryERC20FactoryResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryERC20WrapperDesc = {
    methodName: "ERC20Wrapper",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryERC20WrapperRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryERC20WrapperResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryContractAddrByDenomDesc = {
    methodName: "ContractAddrByDenom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryContractAddrByDenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryContractAddrByDenomResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryERC721ClassIdByContractAddrDesc = {
    methodName: "ERC721ClassIdByContractAddr",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryERC721ClassIdByContractAddrRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryERC721ClassIdByContractAddrResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryERC721OriginTokenInfosDesc = {
    methodName: "ERC721OriginTokenInfos",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryERC721OriginTokenInfosRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryERC721OriginTokenInfosResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryDenomDesc = {
    methodName: "Denom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryDenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryDenomResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryCallDesc = {
    methodName: "Call",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryCallRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryCallResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryParamsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map