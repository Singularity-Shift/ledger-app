"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmos/autocli/v1/options.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PositionalArgDescriptor = exports.FlagOptions = exports.RpcCommandOptions_FlagOptionsEntry = exports.RpcCommandOptions = exports.ServiceCommandDescriptor_SubCommandsEntry = exports.ServiceCommandDescriptor = exports.ModuleOptions = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.autocli.v1";
function createBaseModuleOptions() {
    return { tx: undefined, query: undefined };
}
exports.ModuleOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tx !== undefined) {
            exports.ServiceCommandDescriptor.encode(message.tx, writer.uint32(10).fork()).ldelim();
        }
        if (message.query !== undefined) {
            exports.ServiceCommandDescriptor.encode(message.query, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tx = exports.ServiceCommandDescriptor.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.query = exports.ServiceCommandDescriptor.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tx: isSet(object.tx) ? exports.ServiceCommandDescriptor.fromJSON(object.tx) : undefined,
            query: isSet(object.query) ? exports.ServiceCommandDescriptor.fromJSON(object.query) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tx !== undefined) {
            obj.tx = exports.ServiceCommandDescriptor.toJSON(message.tx);
        }
        if (message.query !== undefined) {
            obj.query = exports.ServiceCommandDescriptor.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.ModuleOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModuleOptions();
        message.tx =
            object.tx !== undefined && object.tx !== null
                ? exports.ServiceCommandDescriptor.fromPartial(object.tx)
                : undefined;
        message.query =
            object.query !== undefined && object.query !== null
                ? exports.ServiceCommandDescriptor.fromPartial(object.query)
                : undefined;
        return message;
    },
};
function createBaseServiceCommandDescriptor() {
    return { service: "", rpcCommandOptions: [], subCommands: new Map() };
}
exports.ServiceCommandDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.service !== "") {
            writer.uint32(10).string(message.service);
        }
        for (const v of message.rpcCommandOptions) {
            exports.RpcCommandOptions.encode(v, writer.uint32(18).fork()).ldelim();
        }
        message.subCommands.forEach((value, key) => {
            exports.ServiceCommandDescriptor_SubCommandsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceCommandDescriptor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.service = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rpcCommandOptions.push(exports.RpcCommandOptions.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.ServiceCommandDescriptor_SubCommandsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.subCommands.set(entry3.key, entry3.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            service: isSet(object.service) ? gt.String(object.service) : "",
            rpcCommandOptions: gt.Array.isArray(object?.rpcCommandOptions)
                ? object.rpcCommandOptions.map((e) => exports.RpcCommandOptions.fromJSON(e))
                : [],
            subCommands: isObject(object.subCommands)
                ? Object.entries(object.subCommands).reduce((acc, [key, value]) => {
                    acc.set(key, exports.ServiceCommandDescriptor.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.service !== "") {
            obj.service = message.service;
        }
        if (message.rpcCommandOptions?.length) {
            obj.rpcCommandOptions = message.rpcCommandOptions.map((e) => exports.RpcCommandOptions.toJSON(e));
        }
        if (message.subCommands?.size) {
            obj.subCommands = {};
            message.subCommands.forEach((v, k) => {
                obj.subCommands[k] = exports.ServiceCommandDescriptor.toJSON(v);
            });
        }
        return obj;
    },
    create(base) {
        return exports.ServiceCommandDescriptor.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseServiceCommandDescriptor();
        message.service = object.service ?? "";
        message.rpcCommandOptions = object.rpcCommandOptions?.map((e) => exports.RpcCommandOptions.fromPartial(e)) || [];
        message.subCommands = (() => {
            const m = new Map();
            (object.subCommands ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, exports.ServiceCommandDescriptor.fromPartial(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseServiceCommandDescriptor_SubCommandsEntry() {
    return { key: "", value: undefined };
}
exports.ServiceCommandDescriptor_SubCommandsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.ServiceCommandDescriptor.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceCommandDescriptor_SubCommandsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.ServiceCommandDescriptor.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? exports.ServiceCommandDescriptor.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.ServiceCommandDescriptor.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.ServiceCommandDescriptor_SubCommandsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseServiceCommandDescriptor_SubCommandsEntry();
        message.key = object.key ?? "";
        message.value =
            object.value !== undefined && object.value !== null
                ? exports.ServiceCommandDescriptor.fromPartial(object.value)
                : undefined;
        return message;
    },
};
function createBaseRpcCommandOptions() {
    return {
        rpcMethod: "",
        use: "",
        long: "",
        short: "",
        example: "",
        alias: [],
        suggestFor: [],
        deprecated: "",
        version: "",
        flagOptions: new Map(),
        positionalArgs: [],
        skip: false,
    };
}
exports.RpcCommandOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rpcMethod !== "") {
            writer.uint32(10).string(message.rpcMethod);
        }
        if (message.use !== "") {
            writer.uint32(18).string(message.use);
        }
        if (message.long !== "") {
            writer.uint32(26).string(message.long);
        }
        if (message.short !== "") {
            writer.uint32(34).string(message.short);
        }
        if (message.example !== "") {
            writer.uint32(42).string(message.example);
        }
        for (const v of message.alias) {
            writer.uint32(50).string(v);
        }
        for (const v of message.suggestFor) {
            writer.uint32(58).string(v);
        }
        if (message.deprecated !== "") {
            writer.uint32(66).string(message.deprecated);
        }
        if (message.version !== "") {
            writer.uint32(74).string(message.version);
        }
        message.flagOptions.forEach((value, key) => {
            exports.RpcCommandOptions_FlagOptionsEntry.encode({ key: key, value }, writer.uint32(82).fork()).ldelim();
        });
        for (const v of message.positionalArgs) {
            exports.PositionalArgDescriptor.encode(v, writer.uint32(90).fork()).ldelim();
        }
        if (message.skip !== false) {
            writer.uint32(96).bool(message.skip);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpcCommandOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rpcMethod = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.use = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.long = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.short = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.example = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.alias.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.suggestFor.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.deprecated = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    const entry10 = exports.RpcCommandOptions_FlagOptionsEntry.decode(reader, reader.uint32());
                    if (entry10.value !== undefined) {
                        message.flagOptions.set(entry10.key, entry10.value);
                    }
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.positionalArgs.push(exports.PositionalArgDescriptor.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.skip = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rpcMethod: isSet(object.rpcMethod) ? gt.String(object.rpcMethod) : "",
            use: isSet(object.use) ? gt.String(object.use) : "",
            long: isSet(object.long) ? gt.String(object.long) : "",
            short: isSet(object.short) ? gt.String(object.short) : "",
            example: isSet(object.example) ? gt.String(object.example) : "",
            alias: gt.Array.isArray(object?.alias) ? object.alias.map((e) => gt.String(e)) : [],
            suggestFor: gt.Array.isArray(object?.suggestFor) ? object.suggestFor.map((e) => gt.String(e)) : [],
            deprecated: isSet(object.deprecated) ? gt.String(object.deprecated) : "",
            version: isSet(object.version) ? gt.String(object.version) : "",
            flagOptions: isObject(object.flagOptions)
                ? Object.entries(object.flagOptions).reduce((acc, [key, value]) => {
                    acc.set(key, exports.FlagOptions.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
            positionalArgs: gt.Array.isArray(object?.positionalArgs)
                ? object.positionalArgs.map((e) => exports.PositionalArgDescriptor.fromJSON(e))
                : [],
            skip: isSet(object.skip) ? gt.Boolean(object.skip) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rpcMethod !== "") {
            obj.rpcMethod = message.rpcMethod;
        }
        if (message.use !== "") {
            obj.use = message.use;
        }
        if (message.long !== "") {
            obj.long = message.long;
        }
        if (message.short !== "") {
            obj.short = message.short;
        }
        if (message.example !== "") {
            obj.example = message.example;
        }
        if (message.alias?.length) {
            obj.alias = message.alias;
        }
        if (message.suggestFor?.length) {
            obj.suggestFor = message.suggestFor;
        }
        if (message.deprecated !== "") {
            obj.deprecated = message.deprecated;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.flagOptions?.size) {
            obj.flagOptions = {};
            message.flagOptions.forEach((v, k) => {
                obj.flagOptions[k] = exports.FlagOptions.toJSON(v);
            });
        }
        if (message.positionalArgs?.length) {
            obj.positionalArgs = message.positionalArgs.map((e) => exports.PositionalArgDescriptor.toJSON(e));
        }
        if (message.skip !== false) {
            obj.skip = message.skip;
        }
        return obj;
    },
    create(base) {
        return exports.RpcCommandOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRpcCommandOptions();
        message.rpcMethod = object.rpcMethod ?? "";
        message.use = object.use ?? "";
        message.long = object.long ?? "";
        message.short = object.short ?? "";
        message.example = object.example ?? "";
        message.alias = object.alias?.map((e) => e) || [];
        message.suggestFor = object.suggestFor?.map((e) => e) || [];
        message.deprecated = object.deprecated ?? "";
        message.version = object.version ?? "";
        message.flagOptions = (() => {
            const m = new Map();
            (object.flagOptions ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, exports.FlagOptions.fromPartial(value));
                }
            });
            return m;
        })();
        message.positionalArgs = object.positionalArgs?.map((e) => exports.PositionalArgDescriptor.fromPartial(e)) || [];
        message.skip = object.skip ?? false;
        return message;
    },
};
function createBaseRpcCommandOptions_FlagOptionsEntry() {
    return { key: "", value: undefined };
}
exports.RpcCommandOptions_FlagOptionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.FlagOptions.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpcCommandOptions_FlagOptionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.FlagOptions.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? exports.FlagOptions.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.FlagOptions.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.RpcCommandOptions_FlagOptionsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRpcCommandOptions_FlagOptionsEntry();
        message.key = object.key ?? "";
        message.value =
            object.value !== undefined && object.value !== null ? exports.FlagOptions.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseFlagOptions() {
    return {
        name: "",
        shorthand: "",
        usage: "",
        defaultValue: "",
        deprecated: "",
        shorthandDeprecated: "",
        hidden: false,
    };
}
exports.FlagOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.shorthand !== "") {
            writer.uint32(18).string(message.shorthand);
        }
        if (message.usage !== "") {
            writer.uint32(26).string(message.usage);
        }
        if (message.defaultValue !== "") {
            writer.uint32(34).string(message.defaultValue);
        }
        if (message.deprecated !== "") {
            writer.uint32(50).string(message.deprecated);
        }
        if (message.shorthandDeprecated !== "") {
            writer.uint32(58).string(message.shorthandDeprecated);
        }
        if (message.hidden !== false) {
            writer.uint32(64).bool(message.hidden);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlagOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shorthand = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.usage = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.defaultValue = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.deprecated = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.shorthandDeprecated = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.hidden = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? gt.String(object.name) : "",
            shorthand: isSet(object.shorthand) ? gt.String(object.shorthand) : "",
            usage: isSet(object.usage) ? gt.String(object.usage) : "",
            defaultValue: isSet(object.defaultValue) ? gt.String(object.defaultValue) : "",
            deprecated: isSet(object.deprecated) ? gt.String(object.deprecated) : "",
            shorthandDeprecated: isSet(object.shorthandDeprecated) ? gt.String(object.shorthandDeprecated) : "",
            hidden: isSet(object.hidden) ? gt.Boolean(object.hidden) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.shorthand !== "") {
            obj.shorthand = message.shorthand;
        }
        if (message.usage !== "") {
            obj.usage = message.usage;
        }
        if (message.defaultValue !== "") {
            obj.defaultValue = message.defaultValue;
        }
        if (message.deprecated !== "") {
            obj.deprecated = message.deprecated;
        }
        if (message.shorthandDeprecated !== "") {
            obj.shorthandDeprecated = message.shorthandDeprecated;
        }
        if (message.hidden !== false) {
            obj.hidden = message.hidden;
        }
        return obj;
    },
    create(base) {
        return exports.FlagOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFlagOptions();
        message.name = object.name ?? "";
        message.shorthand = object.shorthand ?? "";
        message.usage = object.usage ?? "";
        message.defaultValue = object.defaultValue ?? "";
        message.deprecated = object.deprecated ?? "";
        message.shorthandDeprecated = object.shorthandDeprecated ?? "";
        message.hidden = object.hidden ?? false;
        return message;
    },
};
function createBasePositionalArgDescriptor() {
    return { protoField: "", varargs: false };
}
exports.PositionalArgDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.protoField !== "") {
            writer.uint32(10).string(message.protoField);
        }
        if (message.varargs !== false) {
            writer.uint32(16).bool(message.varargs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionalArgDescriptor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.protoField = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.varargs = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            protoField: isSet(object.protoField) ? gt.String(object.protoField) : "",
            varargs: isSet(object.varargs) ? gt.Boolean(object.varargs) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.protoField !== "") {
            obj.protoField = message.protoField;
        }
        if (message.varargs !== false) {
            obj.varargs = message.varargs;
        }
        return obj;
    },
    create(base) {
        return exports.PositionalArgDescriptor.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePositionalArgDescriptor();
        message.protoField = object.protoField ?? "";
        message.varargs = object.varargs ?? false;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=options.js.map