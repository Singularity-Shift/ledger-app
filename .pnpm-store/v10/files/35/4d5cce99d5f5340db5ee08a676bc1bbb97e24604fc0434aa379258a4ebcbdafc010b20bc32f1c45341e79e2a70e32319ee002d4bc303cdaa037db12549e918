"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.1
// source: opinit/ophost/v1/types.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchInfoWithOutput = exports.Output = exports.TokenPair = exports.BatchInfo = exports.BridgeConfig = exports.Params = exports.BatchInfo_ChainType = exports.protobufPackage = void 0;
exports.batchInfo_ChainTypeFromJSON = batchInfo_ChainTypeFromJSON;
exports.batchInfo_ChainTypeToJSON = batchInfo_ChainTypeToJSON;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "opinit.ophost.v1";
/** ChainType defines the type of chain. */
var BatchInfo_ChainType;
(function (BatchInfo_ChainType) {
    /** CHAIN_TYPE_UNSPECIFIED - Unspecified chain type. */
    BatchInfo_ChainType[BatchInfo_ChainType["CHAIN_TYPE_UNSPECIFIED"] = 0] = "CHAIN_TYPE_UNSPECIFIED";
    /** CHAIN_TYPE_INITIA - The chain type of the initia chain. */
    BatchInfo_ChainType[BatchInfo_ChainType["CHAIN_TYPE_INITIA"] = 1] = "CHAIN_TYPE_INITIA";
    /** CHAIN_TYPE_CELESTIA - The chain type of the celestia chain. */
    BatchInfo_ChainType[BatchInfo_ChainType["CHAIN_TYPE_CELESTIA"] = 2] = "CHAIN_TYPE_CELESTIA";
    BatchInfo_ChainType[BatchInfo_ChainType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BatchInfo_ChainType || (exports.BatchInfo_ChainType = BatchInfo_ChainType = {}));
function batchInfo_ChainTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CHAIN_TYPE_UNSPECIFIED":
            return BatchInfo_ChainType.CHAIN_TYPE_UNSPECIFIED;
        case 1:
        case "CHAIN_TYPE_INITIA":
            return BatchInfo_ChainType.CHAIN_TYPE_INITIA;
        case 2:
        case "CHAIN_TYPE_CELESTIA":
            return BatchInfo_ChainType.CHAIN_TYPE_CELESTIA;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BatchInfo_ChainType.UNRECOGNIZED;
    }
}
function batchInfo_ChainTypeToJSON(object) {
    switch (object) {
        case BatchInfo_ChainType.CHAIN_TYPE_UNSPECIFIED:
            return "CHAIN_TYPE_UNSPECIFIED";
        case BatchInfo_ChainType.CHAIN_TYPE_INITIA:
            return "CHAIN_TYPE_INITIA";
        case BatchInfo_ChainType.CHAIN_TYPE_CELESTIA:
            return "CHAIN_TYPE_CELESTIA";
        case BatchInfo_ChainType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseParams() {
    return { registrationFee: [] };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.registrationFee) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.registrationFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            registrationFee: gt.Array.isArray(object?.registrationFee)
                ? object.registrationFee.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.registrationFee?.length) {
            obj.registrationFee = message.registrationFee.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.registrationFee = object.registrationFee?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBridgeConfig() {
    return {
        challenger: "",
        proposer: "",
        batchInfo: undefined,
        submissionInterval: undefined,
        finalizationPeriod: undefined,
        submissionStartHeight: 0n,
        oracleEnabled: false,
        metadata: new Uint8Array(0),
    };
}
exports.BridgeConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.challenger !== "") {
            writer.uint32(10).string(message.challenger);
        }
        if (message.proposer !== "") {
            writer.uint32(18).string(message.proposer);
        }
        if (message.batchInfo !== undefined) {
            exports.BatchInfo.encode(message.batchInfo, writer.uint32(26).fork()).ldelim();
        }
        if (message.submissionInterval !== undefined) {
            duration_1.Duration.encode(message.submissionInterval, writer.uint32(34).fork()).ldelim();
        }
        if (message.finalizationPeriod !== undefined) {
            duration_1.Duration.encode(message.finalizationPeriod, writer.uint32(42).fork()).ldelim();
        }
        if (message.submissionStartHeight !== 0n) {
            if (BigInt.asUintN(64, message.submissionStartHeight) !== message.submissionStartHeight) {
                throw new gt.Error("value provided for field message.submissionStartHeight of type uint64 too large");
            }
            writer.uint32(48).uint64(message.submissionStartHeight.toString());
        }
        if (message.oracleEnabled !== false) {
            writer.uint32(56).bool(message.oracleEnabled);
        }
        if (message.metadata.length !== 0) {
            writer.uint32(66).bytes(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBridgeConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.challenger = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.proposer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.batchInfo = exports.BatchInfo.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.submissionInterval = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.finalizationPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.submissionStartHeight = longToBigint(reader.uint64());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.oracleEnabled = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.metadata = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            challenger: isSet(object.challenger) ? gt.String(object.challenger) : "",
            proposer: isSet(object.proposer) ? gt.String(object.proposer) : "",
            batchInfo: isSet(object.batchInfo) ? exports.BatchInfo.fromJSON(object.batchInfo) : undefined,
            submissionInterval: isSet(object.submissionInterval)
                ? duration_1.Duration.fromJSON(object.submissionInterval)
                : undefined,
            finalizationPeriod: isSet(object.finalizationPeriod)
                ? duration_1.Duration.fromJSON(object.finalizationPeriod)
                : undefined,
            submissionStartHeight: isSet(object.submissionStartHeight) ? BigInt(object.submissionStartHeight) : 0n,
            oracleEnabled: isSet(object.oracleEnabled) ? gt.Boolean(object.oracleEnabled) : false,
            metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.challenger !== "") {
            obj.challenger = message.challenger;
        }
        if (message.proposer !== "") {
            obj.proposer = message.proposer;
        }
        if (message.batchInfo !== undefined) {
            obj.batchInfo = exports.BatchInfo.toJSON(message.batchInfo);
        }
        if (message.submissionInterval !== undefined) {
            obj.submissionInterval = duration_1.Duration.toJSON(message.submissionInterval);
        }
        if (message.finalizationPeriod !== undefined) {
            obj.finalizationPeriod = duration_1.Duration.toJSON(message.finalizationPeriod);
        }
        if (message.submissionStartHeight !== 0n) {
            obj.submissionStartHeight = message.submissionStartHeight.toString();
        }
        if (message.oracleEnabled !== false) {
            obj.oracleEnabled = message.oracleEnabled;
        }
        if (message.metadata.length !== 0) {
            obj.metadata = base64FromBytes(message.metadata);
        }
        return obj;
    },
    create(base) {
        return exports.BridgeConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBridgeConfig();
        message.challenger = object.challenger ?? "";
        message.proposer = object.proposer ?? "";
        message.batchInfo =
            object.batchInfo !== undefined && object.batchInfo !== null
                ? exports.BatchInfo.fromPartial(object.batchInfo)
                : undefined;
        message.submissionInterval =
            object.submissionInterval !== undefined && object.submissionInterval !== null
                ? duration_1.Duration.fromPartial(object.submissionInterval)
                : undefined;
        message.finalizationPeriod =
            object.finalizationPeriod !== undefined && object.finalizationPeriod !== null
                ? duration_1.Duration.fromPartial(object.finalizationPeriod)
                : undefined;
        message.submissionStartHeight = object.submissionStartHeight ?? 0n;
        message.oracleEnabled = object.oracleEnabled ?? false;
        message.metadata = object.metadata ?? new Uint8Array(0);
        return message;
    },
};
function createBaseBatchInfo() {
    return { submitter: "", chainType: 0 };
}
exports.BatchInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.submitter !== "") {
            writer.uint32(10).string(message.submitter);
        }
        if (message.chainType !== 0) {
            writer.uint32(16).int32(message.chainType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.submitter = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.chainType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            submitter: isSet(object.submitter) ? gt.String(object.submitter) : "",
            chainType: isSet(object.chainType) ? batchInfo_ChainTypeFromJSON(object.chainType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.submitter !== "") {
            obj.submitter = message.submitter;
        }
        if (message.chainType !== 0) {
            obj.chainType = batchInfo_ChainTypeToJSON(message.chainType);
        }
        return obj;
    },
    create(base) {
        return exports.BatchInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBatchInfo();
        message.submitter = object.submitter ?? "";
        message.chainType = object.chainType ?? 0;
        return message;
    },
};
function createBaseTokenPair() {
    return { l1Denom: "", l2Denom: "" };
}
exports.TokenPair = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.l1Denom !== "") {
            writer.uint32(10).string(message.l1Denom);
        }
        if (message.l2Denom !== "") {
            writer.uint32(18).string(message.l2Denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.l1Denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.l2Denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            l1Denom: isSet(object.l1Denom) ? gt.String(object.l1Denom) : "",
            l2Denom: isSet(object.l2Denom) ? gt.String(object.l2Denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.l1Denom !== "") {
            obj.l1Denom = message.l1Denom;
        }
        if (message.l2Denom !== "") {
            obj.l2Denom = message.l2Denom;
        }
        return obj;
    },
    create(base) {
        return exports.TokenPair.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenPair();
        message.l1Denom = object.l1Denom ?? "";
        message.l2Denom = object.l2Denom ?? "";
        return message;
    },
};
function createBaseOutput() {
    return { outputRoot: new Uint8Array(0), l1BlockNumber: 0n, l1BlockTime: undefined, l2BlockNumber: 0n };
}
exports.Output = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outputRoot.length !== 0) {
            writer.uint32(10).bytes(message.outputRoot);
        }
        if (message.l1BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l1BlockNumber) !== message.l1BlockNumber) {
                throw new gt.Error("value provided for field message.l1BlockNumber of type uint64 too large");
            }
            writer.uint32(16).uint64(message.l1BlockNumber.toString());
        }
        if (message.l1BlockTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.l1BlockTime), writer.uint32(26).fork()).ldelim();
        }
        if (message.l2BlockNumber !== 0n) {
            if (BigInt.asUintN(64, message.l2BlockNumber) !== message.l2BlockNumber) {
                throw new gt.Error("value provided for field message.l2BlockNumber of type uint64 too large");
            }
            writer.uint32(32).uint64(message.l2BlockNumber.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.outputRoot = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.l1BlockNumber = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.l1BlockTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.l2BlockNumber = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputRoot: isSet(object.outputRoot) ? bytesFromBase64(object.outputRoot) : new Uint8Array(0),
            l1BlockNumber: isSet(object.l1BlockNumber) ? BigInt(object.l1BlockNumber) : 0n,
            l1BlockTime: isSet(object.l1BlockTime) ? fromJsonTimestamp(object.l1BlockTime) : undefined,
            l2BlockNumber: isSet(object.l2BlockNumber) ? BigInt(object.l2BlockNumber) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputRoot.length !== 0) {
            obj.outputRoot = base64FromBytes(message.outputRoot);
        }
        if (message.l1BlockNumber !== 0n) {
            obj.l1BlockNumber = message.l1BlockNumber.toString();
        }
        if (message.l1BlockTime !== undefined) {
            obj.l1BlockTime = message.l1BlockTime.toISOString();
        }
        if (message.l2BlockNumber !== 0n) {
            obj.l2BlockNumber = message.l2BlockNumber.toString();
        }
        return obj;
    },
    create(base) {
        return exports.Output.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOutput();
        message.outputRoot = object.outputRoot ?? new Uint8Array(0);
        message.l1BlockNumber = object.l1BlockNumber ?? 0n;
        message.l1BlockTime = object.l1BlockTime ?? undefined;
        message.l2BlockNumber = object.l2BlockNumber ?? 0n;
        return message;
    },
};
function createBaseBatchInfoWithOutput() {
    return { batchInfo: undefined, output: undefined };
}
exports.BatchInfoWithOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.batchInfo !== undefined) {
            exports.BatchInfo.encode(message.batchInfo, writer.uint32(10).fork()).ldelim();
        }
        if (message.output !== undefined) {
            exports.Output.encode(message.output, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchInfoWithOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.batchInfo = exports.BatchInfo.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.output = exports.Output.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            batchInfo: isSet(object.batchInfo) ? exports.BatchInfo.fromJSON(object.batchInfo) : undefined,
            output: isSet(object.output) ? exports.Output.fromJSON(object.output) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.batchInfo !== undefined) {
            obj.batchInfo = exports.BatchInfo.toJSON(message.batchInfo);
        }
        if (message.output !== undefined) {
            obj.output = exports.Output.toJSON(message.output);
        }
        return obj;
    },
    create(base) {
        return exports.BatchInfoWithOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBatchInfoWithOutput();
        message.batchInfo =
            object.batchInfo !== undefined && object.batchInfo !== null
                ? exports.BatchInfo.fromPartial(object.batchInfo)
                : undefined;
        message.output =
            object.output !== undefined && object.output !== null ? exports.Output.fromPartial(object.output) : undefined;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (gt.Number(t.seconds.toString()) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new gt.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof gt.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new gt.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map