import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "sdk.proposals.v1";
/**
 * ProposalInfo contains the metadata about a given proposal that was built by
 * the block-sdk. This is used to verify and consilidate proposal data across
 * the network.
 */
export interface ProposalInfo {
    /**
     * TxsByLane contains information about how each partial proposal
     * was constructed by the block-sdk lanes.
     */
    txsByLane: Map<string, bigint>;
    /**
     * MaxBlockSize corresponds to the upper bound on the size of the
     * block that was used to construct this block proposal.
     */
    maxBlockSize: bigint;
    /**
     * MaxGasLimit corresponds to the upper bound on the gas limit of the
     * block that was used to construct this block proposal.
     */
    maxGasLimit: bigint;
    /** BlockSize corresponds to the size of this block proposal. */
    blockSize: bigint;
    /** GasLimit corresponds to the gas limit of this block proposal. */
    gasLimit: bigint;
}
export interface ProposalInfo_TxsByLaneEntry {
    key: string;
    value: bigint;
}
export declare const ProposalInfo: {
    encode(message: ProposalInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProposalInfo;
    fromJSON(object: any): ProposalInfo;
    toJSON(message: ProposalInfo): unknown;
    create(base?: DeepPartial<ProposalInfo>): ProposalInfo;
    fromPartial(object: DeepPartial<ProposalInfo>): ProposalInfo;
};
export declare const ProposalInfo_TxsByLaneEntry: {
    encode(message: ProposalInfo_TxsByLaneEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProposalInfo_TxsByLaneEntry;
    fromJSON(object: any): ProposalInfo_TxsByLaneEntry;
    toJSON(message: ProposalInfo_TxsByLaneEntry): unknown;
    create(base?: DeepPartial<ProposalInfo_TxsByLaneEntry>): ProposalInfo_TxsByLaneEntry;
    fromPartial(object: DeepPartial<ProposalInfo_TxsByLaneEntry>): ProposalInfo_TxsByLaneEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
