import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx';
import { MsgExecute } from '@initia/initia.proto/initia/move/v1/tx';
import { MsgCall } from '@initia/initia.proto/minievm/evm/v1/tx';
import { MsgTransfer } from '@initia/initia.proto/ibc/applications/nft_transfer/v1/tx';
import { Chain } from '@initia/initia-registry-types';
import { Tx } from './tx';
export interface SendNFTParams {
    collectionAddress: string;
}
interface Params {
    targetLayer: Chain;
    recipientAddress: string;
    tokens: {
        collection_addr: string;
        collection_name: string;
        nft: {
            token_id: string;
            uri: string;
            description: string;
        };
        object_addr: string;
    }[];
}
export declare class SendNFT {
    private tx;
    private sendNFTParams;
    constructor(tx: Tx, sendNFTParams: SendNFTParams);
    private getMoveMessages;
    private getWasmMessages;
    private getEvmMessages;
    private getMessagesWithinLayer;
    getIBCMessages(params: Params): Promise<{
        typeUrl: string;
        value: MsgExecuteContract;
    }[] | {
        typeUrl: string;
        value: MsgTransfer;
    }[]>;
    private getInterchainMessages;
    getMessages(params: Params): Promise<{
        typeUrl: string;
        value: MsgExecute;
    }[] | {
        typeUrl: string;
        value: MsgExecuteContract;
    }[] | {
        typeUrl: string;
        value: MsgCall;
    }[] | {
        typeUrl: string;
        value: MsgTransfer;
    }[]>;
    private transformAddress;
    private getClassId;
    private getTargetChainCollectionAddress;
}
export {};
