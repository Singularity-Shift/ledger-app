import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Params, UpgradePolicy } from "./types";
export declare const protobufPackage = "initia.move.v1";
/** MsgPublish is the message to store compiled Move module */
export interface MsgPublish {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** CodeBytes is raw move module bytes code */
    codeBytes: Uint8Array[];
    /**
     * UpgradePolicy defines upgrade rules which will be applied
     * at next publish message.
     * Upgrades in the direction of enhancing security are permitted.
     * `ARBITRARY` => `COMPATIBLE`
     * `ARBITRARY` => `IMMUTABLE`
     * `COMPATIBLE` => `IMMUTABLE`
     * but reverse ways are not allowed (ignored).
     */
    upgradePolicy: UpgradePolicy;
}
/** MsgPublishResponse returns store result data. */
export interface MsgPublishResponse {
}
/** MsgExecute is the message to execute the given module function */
export interface MsgExecute {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** ModuleAddr is the address of the module deployer */
    moduleAddress: string;
    /** ModuleName is the name of module to execute */
    moduleName: string;
    /** FunctionName is the name of a function to execute */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /**
     * Args is the arguments of a function to execute
     * - number: little endian
     * - string: base64 bytes
     */
    args: Uint8Array[];
}
/** MsgExecuteResponse returns execution result data. */
export interface MsgExecuteResponse {
}
/** MsgExecuteJSON is the message to execute the given module function */
export interface MsgExecuteJSON {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** ModuleAddr is the address of the module deployer */
    moduleAddress: string;
    /** ModuleName is the name of module to execute */
    moduleName: string;
    /** FunctionName is the name of a function to execute */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /** Args is the arguments of a function to execute in json stringify format */
    args: string[];
}
/** MsgExecuteJSONResponse returns execution result data. */
export interface MsgExecuteJSONResponse {
}
/** MsgScript is the message to execute script code with sender as signer */
export interface MsgScript {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** CodeBytes is the script bytes code to execute */
    codeBytes: Uint8Array;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /**
     * Args is the arguments of a function to execute
     * - number: little endian
     * - string: base64 bytes
     */
    args: Uint8Array[];
}
/** MsgScriptResponse returns execution result data. */
export interface MsgScriptResponse {
}
/** MsgScriptJSON is the message to execute script code with sender as signer */
export interface MsgScriptJSON {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** CodeBytes is the script bytes code to execute */
    codeBytes: Uint8Array;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /** Args is the arguments of a function to execute in json stringify format */
    args: string[];
}
/** MsgScriptJSONResponse returns execution result data. */
export interface MsgScriptJSONResponse {
}
/** MsgGovPublish is the message to store compiled Move module via gov proposal */
export interface MsgGovPublish {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** CodeBytes is raw move module bytes code */
    codeBytes: Uint8Array[];
    /**
     * UpgradePolicy defines upgrade rules which will be applied
     * at next publish message.
     * Upgrades in the direction of enhancing security are permitted.
     * `ARBITRARY` => `COMPATIBLE`
     * `ARBITRARY` => `IMMUTABLE`
     * `COMPATIBLE` => `IMMUTABLE`
     * but reverse ways are not allowed (ignored).
     */
    upgradePolicy: UpgradePolicy;
}
/** MsgGovPublishResponse returns execution result data. */
export interface MsgGovPublishResponse {
}
/**
 * MsgGovExecute is the message to execute the given module
 * function via gov proposal
 */
export interface MsgGovExecute {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** ModuleAddr is the address of the module deployer */
    moduleAddress: string;
    /** ModuleName is the name of module to execute */
    moduleName: string;
    /** FunctionName is the name of a function to execute */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /**
     * Args is the arguments of a function to execute
     * - number: little endian
     * - string: base64 bytes
     */
    args: Uint8Array[];
}
/** MsgGovExecuteResponse returns execution result data. */
export interface MsgGovExecuteResponse {
}
/**
 * MsgGovExecuteJSON is the message to execute the given module
 * function via gov proposal
 */
export interface MsgGovExecuteJSON {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** ModuleAddr is the address of the module deployer */
    moduleAddress: string;
    /** ModuleName is the name of module to execute */
    moduleName: string;
    /** FunctionName is the name of a function to execute */
    functionName: string;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /** Args is the arguments of a function to execute in json stringify format */
    args: string[];
}
/** MsgGovExecuteJSONResponse returns execution result data. */
export interface MsgGovExecuteJSONResponse {
}
/** MsgGovScript is the message to execute script code with sender as signer via gov */
export interface MsgGovScript {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** CodeBytes is the script bytes code to execute */
    codeBytes: Uint8Array;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /**
     * Args is the arguments of a function to execute
     * - number: little endian
     * - string: base64 bytes
     */
    args: Uint8Array[];
}
/** MsgGovScriptResponse returns execution result data. */
export interface MsgGovScriptResponse {
}
/** MsgGovScriptJSON is the message to execute script code with sender as signer via gov */
export interface MsgGovScriptJSON {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** CodeBytes is the script bytes code to execute */
    codeBytes: Uint8Array;
    /**
     * TypeArgs is the type arguments of a function to execute
     * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
     */
    typeArgs: string[];
    /** Args is the arguments of a function to execute in json stringify format */
    args: string[];
}
/** MsgGovScriptJSONResponse returns execution result data. */
export interface MsgGovScriptJSONResponse {
}
/**
 * MsgWhitelist is a message to register a dex pair to
 * whitelist of various features.
 * - whitelist from coin register operation
 * - allow counter party denom can be used as gas fee
 * - register lp denom as staking denom
 */
export interface MsgWhitelist {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Dex coin LP metadata address */
    metadataLp: string;
    /** RewardWeight is registered to distribution's Params */
    rewardWeight: string;
}
/** MsgWhitelistResponse returns result data. */
export interface MsgWhitelistResponse {
}
/**
 * MsgDelist is a message to unregister a dex pair
 * from the whitelist of various features.
 */
export interface MsgDelist {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /** Dex coin LP metadata address */
    metadataLp: string;
}
/** MsgDelistResponse returns result data. */
export interface MsgDelistResponse {
}
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /**
     * params defines the x/staking parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params?: Params | undefined;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}
export declare const MsgPublish: {
    encode(message: MsgPublish, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublish;
    fromJSON(object: any): MsgPublish;
    toJSON(message: MsgPublish): unknown;
    create(base?: DeepPartial<MsgPublish>): MsgPublish;
    fromPartial(object: DeepPartial<MsgPublish>): MsgPublish;
};
export declare const MsgPublishResponse: {
    encode(_: MsgPublishResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishResponse;
    fromJSON(_: any): MsgPublishResponse;
    toJSON(_: MsgPublishResponse): unknown;
    create(base?: DeepPartial<MsgPublishResponse>): MsgPublishResponse;
    fromPartial(_: DeepPartial<MsgPublishResponse>): MsgPublishResponse;
};
export declare const MsgExecute: {
    encode(message: MsgExecute, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecute;
    fromJSON(object: any): MsgExecute;
    toJSON(message: MsgExecute): unknown;
    create(base?: DeepPartial<MsgExecute>): MsgExecute;
    fromPartial(object: DeepPartial<MsgExecute>): MsgExecute;
};
export declare const MsgExecuteResponse: {
    encode(_: MsgExecuteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteResponse;
    fromJSON(_: any): MsgExecuteResponse;
    toJSON(_: MsgExecuteResponse): unknown;
    create(base?: DeepPartial<MsgExecuteResponse>): MsgExecuteResponse;
    fromPartial(_: DeepPartial<MsgExecuteResponse>): MsgExecuteResponse;
};
export declare const MsgExecuteJSON: {
    encode(message: MsgExecuteJSON, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteJSON;
    fromJSON(object: any): MsgExecuteJSON;
    toJSON(message: MsgExecuteJSON): unknown;
    create(base?: DeepPartial<MsgExecuteJSON>): MsgExecuteJSON;
    fromPartial(object: DeepPartial<MsgExecuteJSON>): MsgExecuteJSON;
};
export declare const MsgExecuteJSONResponse: {
    encode(_: MsgExecuteJSONResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteJSONResponse;
    fromJSON(_: any): MsgExecuteJSONResponse;
    toJSON(_: MsgExecuteJSONResponse): unknown;
    create(base?: DeepPartial<MsgExecuteJSONResponse>): MsgExecuteJSONResponse;
    fromPartial(_: DeepPartial<MsgExecuteJSONResponse>): MsgExecuteJSONResponse;
};
export declare const MsgScript: {
    encode(message: MsgScript, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgScript;
    fromJSON(object: any): MsgScript;
    toJSON(message: MsgScript): unknown;
    create(base?: DeepPartial<MsgScript>): MsgScript;
    fromPartial(object: DeepPartial<MsgScript>): MsgScript;
};
export declare const MsgScriptResponse: {
    encode(_: MsgScriptResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgScriptResponse;
    fromJSON(_: any): MsgScriptResponse;
    toJSON(_: MsgScriptResponse): unknown;
    create(base?: DeepPartial<MsgScriptResponse>): MsgScriptResponse;
    fromPartial(_: DeepPartial<MsgScriptResponse>): MsgScriptResponse;
};
export declare const MsgScriptJSON: {
    encode(message: MsgScriptJSON, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgScriptJSON;
    fromJSON(object: any): MsgScriptJSON;
    toJSON(message: MsgScriptJSON): unknown;
    create(base?: DeepPartial<MsgScriptJSON>): MsgScriptJSON;
    fromPartial(object: DeepPartial<MsgScriptJSON>): MsgScriptJSON;
};
export declare const MsgScriptJSONResponse: {
    encode(_: MsgScriptJSONResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgScriptJSONResponse;
    fromJSON(_: any): MsgScriptJSONResponse;
    toJSON(_: MsgScriptJSONResponse): unknown;
    create(base?: DeepPartial<MsgScriptJSONResponse>): MsgScriptJSONResponse;
    fromPartial(_: DeepPartial<MsgScriptJSONResponse>): MsgScriptJSONResponse;
};
export declare const MsgGovPublish: {
    encode(message: MsgGovPublish, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovPublish;
    fromJSON(object: any): MsgGovPublish;
    toJSON(message: MsgGovPublish): unknown;
    create(base?: DeepPartial<MsgGovPublish>): MsgGovPublish;
    fromPartial(object: DeepPartial<MsgGovPublish>): MsgGovPublish;
};
export declare const MsgGovPublishResponse: {
    encode(_: MsgGovPublishResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovPublishResponse;
    fromJSON(_: any): MsgGovPublishResponse;
    toJSON(_: MsgGovPublishResponse): unknown;
    create(base?: DeepPartial<MsgGovPublishResponse>): MsgGovPublishResponse;
    fromPartial(_: DeepPartial<MsgGovPublishResponse>): MsgGovPublishResponse;
};
export declare const MsgGovExecute: {
    encode(message: MsgGovExecute, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovExecute;
    fromJSON(object: any): MsgGovExecute;
    toJSON(message: MsgGovExecute): unknown;
    create(base?: DeepPartial<MsgGovExecute>): MsgGovExecute;
    fromPartial(object: DeepPartial<MsgGovExecute>): MsgGovExecute;
};
export declare const MsgGovExecuteResponse: {
    encode(_: MsgGovExecuteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovExecuteResponse;
    fromJSON(_: any): MsgGovExecuteResponse;
    toJSON(_: MsgGovExecuteResponse): unknown;
    create(base?: DeepPartial<MsgGovExecuteResponse>): MsgGovExecuteResponse;
    fromPartial(_: DeepPartial<MsgGovExecuteResponse>): MsgGovExecuteResponse;
};
export declare const MsgGovExecuteJSON: {
    encode(message: MsgGovExecuteJSON, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovExecuteJSON;
    fromJSON(object: any): MsgGovExecuteJSON;
    toJSON(message: MsgGovExecuteJSON): unknown;
    create(base?: DeepPartial<MsgGovExecuteJSON>): MsgGovExecuteJSON;
    fromPartial(object: DeepPartial<MsgGovExecuteJSON>): MsgGovExecuteJSON;
};
export declare const MsgGovExecuteJSONResponse: {
    encode(_: MsgGovExecuteJSONResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovExecuteJSONResponse;
    fromJSON(_: any): MsgGovExecuteJSONResponse;
    toJSON(_: MsgGovExecuteJSONResponse): unknown;
    create(base?: DeepPartial<MsgGovExecuteJSONResponse>): MsgGovExecuteJSONResponse;
    fromPartial(_: DeepPartial<MsgGovExecuteJSONResponse>): MsgGovExecuteJSONResponse;
};
export declare const MsgGovScript: {
    encode(message: MsgGovScript, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovScript;
    fromJSON(object: any): MsgGovScript;
    toJSON(message: MsgGovScript): unknown;
    create(base?: DeepPartial<MsgGovScript>): MsgGovScript;
    fromPartial(object: DeepPartial<MsgGovScript>): MsgGovScript;
};
export declare const MsgGovScriptResponse: {
    encode(_: MsgGovScriptResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovScriptResponse;
    fromJSON(_: any): MsgGovScriptResponse;
    toJSON(_: MsgGovScriptResponse): unknown;
    create(base?: DeepPartial<MsgGovScriptResponse>): MsgGovScriptResponse;
    fromPartial(_: DeepPartial<MsgGovScriptResponse>): MsgGovScriptResponse;
};
export declare const MsgGovScriptJSON: {
    encode(message: MsgGovScriptJSON, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovScriptJSON;
    fromJSON(object: any): MsgGovScriptJSON;
    toJSON(message: MsgGovScriptJSON): unknown;
    create(base?: DeepPartial<MsgGovScriptJSON>): MsgGovScriptJSON;
    fromPartial(object: DeepPartial<MsgGovScriptJSON>): MsgGovScriptJSON;
};
export declare const MsgGovScriptJSONResponse: {
    encode(_: MsgGovScriptJSONResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovScriptJSONResponse;
    fromJSON(_: any): MsgGovScriptJSONResponse;
    toJSON(_: MsgGovScriptJSONResponse): unknown;
    create(base?: DeepPartial<MsgGovScriptJSONResponse>): MsgGovScriptJSONResponse;
    fromPartial(_: DeepPartial<MsgGovScriptJSONResponse>): MsgGovScriptJSONResponse;
};
export declare const MsgWhitelist: {
    encode(message: MsgWhitelist, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgWhitelist;
    fromJSON(object: any): MsgWhitelist;
    toJSON(message: MsgWhitelist): unknown;
    create(base?: DeepPartial<MsgWhitelist>): MsgWhitelist;
    fromPartial(object: DeepPartial<MsgWhitelist>): MsgWhitelist;
};
export declare const MsgWhitelistResponse: {
    encode(_: MsgWhitelistResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgWhitelistResponse;
    fromJSON(_: any): MsgWhitelistResponse;
    toJSON(_: MsgWhitelistResponse): unknown;
    create(base?: DeepPartial<MsgWhitelistResponse>): MsgWhitelistResponse;
    fromPartial(_: DeepPartial<MsgWhitelistResponse>): MsgWhitelistResponse;
};
export declare const MsgDelist: {
    encode(message: MsgDelist, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgDelist;
    fromJSON(object: any): MsgDelist;
    toJSON(message: MsgDelist): unknown;
    create(base?: DeepPartial<MsgDelist>): MsgDelist;
    fromPartial(object: DeepPartial<MsgDelist>): MsgDelist;
};
export declare const MsgDelistResponse: {
    encode(_: MsgDelistResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgDelistResponse;
    fromJSON(_: any): MsgDelistResponse;
    toJSON(_: MsgDelistResponse): unknown;
    create(base?: DeepPartial<MsgDelistResponse>): MsgDelistResponse;
    fromPartial(_: DeepPartial<MsgDelistResponse>): MsgDelistResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
    fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
    fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
};
/** Msg defines the move Msg service. */
export interface Msg {
    /** Publish stores compiled Move module */
    Publish(request: DeepPartial<MsgPublish>, metadata?: grpc.Metadata): Promise<MsgPublishResponse>;
    /**
     * Deprecated: Use ExecuteJSON instead
     * Execute runs a entry function with the given message
     */
    Execute(request: DeepPartial<MsgExecute>, metadata?: grpc.Metadata): Promise<MsgExecuteResponse>;
    /** ExecuteJSON runs a entry function with the given message */
    ExecuteJSON(request: DeepPartial<MsgExecuteJSON>, metadata?: grpc.Metadata): Promise<MsgExecuteJSONResponse>;
    /**
     * Deprecated: Use ScriptJSON instead
     * Script runs a scripts with the given message
     */
    Script(request: DeepPartial<MsgScript>, metadata?: grpc.Metadata): Promise<MsgScriptResponse>;
    /** ScriptJSON runs a scripts with the given message */
    ScriptJSON(request: DeepPartial<MsgScriptJSON>, metadata?: grpc.Metadata): Promise<MsgScriptJSONResponse>;
    /** GovPublish stores compiled Move module via gov proposal */
    GovPublish(request: DeepPartial<MsgGovPublish>, metadata?: grpc.Metadata): Promise<MsgGovPublishResponse>;
    /**
     * Deprecated: Use GovExecuteJSON instead
     * GovExecute runs a entry function with the given message via gov proposal
     */
    GovExecute(request: DeepPartial<MsgGovExecute>, metadata?: grpc.Metadata): Promise<MsgGovExecuteResponse>;
    /** GovExecuteJSON runs a entry function with the given message via gov proposal */
    GovExecuteJSON(request: DeepPartial<MsgGovExecuteJSON>, metadata?: grpc.Metadata): Promise<MsgGovExecuteJSONResponse>;
    /**
     * Deprecated: Use GovScriptJSON instead
     * GovScript runs a scripts with the given message via gov proposal
     */
    GovScript(request: DeepPartial<MsgGovScript>, metadata?: grpc.Metadata): Promise<MsgGovScriptResponse>;
    /** GovScriptJSON runs a scripts with the given message via gov proposal */
    GovScriptJSON(request: DeepPartial<MsgGovScriptJSON>, metadata?: grpc.Metadata): Promise<MsgGovScriptJSONResponse>;
    /**
     * Whitelist registers a dex pair to whitelist of various features.
     * - whitelist from coin register operation
     * - allow counter party denom can be used as gas fee
     * - register lp denom as staking denom
     */
    Whitelist(request: DeepPartial<MsgWhitelist>, metadata?: grpc.Metadata): Promise<MsgWhitelistResponse>;
    /** Delist unregisters a dex pair from the whitelist. */
    Delist(request: DeepPartial<MsgDelist>, metadata?: grpc.Metadata): Promise<MsgDelistResponse>;
    /**
     * UpdateParams defines an operation for updating the x/move module
     * parameters.
     */
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Publish(request: DeepPartial<MsgPublish>, metadata?: grpc.Metadata): Promise<MsgPublishResponse>;
    Execute(request: DeepPartial<MsgExecute>, metadata?: grpc.Metadata): Promise<MsgExecuteResponse>;
    ExecuteJSON(request: DeepPartial<MsgExecuteJSON>, metadata?: grpc.Metadata): Promise<MsgExecuteJSONResponse>;
    Script(request: DeepPartial<MsgScript>, metadata?: grpc.Metadata): Promise<MsgScriptResponse>;
    ScriptJSON(request: DeepPartial<MsgScriptJSON>, metadata?: grpc.Metadata): Promise<MsgScriptJSONResponse>;
    GovPublish(request: DeepPartial<MsgGovPublish>, metadata?: grpc.Metadata): Promise<MsgGovPublishResponse>;
    GovExecute(request: DeepPartial<MsgGovExecute>, metadata?: grpc.Metadata): Promise<MsgGovExecuteResponse>;
    GovExecuteJSON(request: DeepPartial<MsgGovExecuteJSON>, metadata?: grpc.Metadata): Promise<MsgGovExecuteJSONResponse>;
    GovScript(request: DeepPartial<MsgGovScript>, metadata?: grpc.Metadata): Promise<MsgGovScriptResponse>;
    GovScriptJSON(request: DeepPartial<MsgGovScriptJSON>, metadata?: grpc.Metadata): Promise<MsgGovScriptJSONResponse>;
    Whitelist(request: DeepPartial<MsgWhitelist>, metadata?: grpc.Metadata): Promise<MsgWhitelistResponse>;
    Delist(request: DeepPartial<MsgDelist>, metadata?: grpc.Metadata): Promise<MsgDelistResponse>;
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgPublishDesc: UnaryMethodDefinitionish;
export declare const MsgExecuteDesc: UnaryMethodDefinitionish;
export declare const MsgExecuteJSONDesc: UnaryMethodDefinitionish;
export declare const MsgScriptDesc: UnaryMethodDefinitionish;
export declare const MsgScriptJSONDesc: UnaryMethodDefinitionish;
export declare const MsgGovPublishDesc: UnaryMethodDefinitionish;
export declare const MsgGovExecuteDesc: UnaryMethodDefinitionish;
export declare const MsgGovExecuteJSONDesc: UnaryMethodDefinitionish;
export declare const MsgGovScriptDesc: UnaryMethodDefinitionish;
export declare const MsgGovScriptJSONDesc: UnaryMethodDefinitionish;
export declare const MsgWhitelistDesc: UnaryMethodDefinitionish;
export declare const MsgDelistDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
