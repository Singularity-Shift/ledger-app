"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: ibc/applications/nft_transfer/v1/packet.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonFungibleTokenPacketData = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "ibc.applications.nft_transfer.v1";
function createBaseNonFungibleTokenPacketData() {
    return {
        classId: "",
        classUri: "",
        classData: "",
        tokenIds: [],
        tokenUris: [],
        tokenData: [],
        sender: "",
        receiver: "",
        memo: "",
    };
}
exports.NonFungibleTokenPacketData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.classUri !== "") {
            writer.uint32(18).string(message.classUri);
        }
        if (message.classData !== "") {
            writer.uint32(26).string(message.classData);
        }
        for (const v of message.tokenIds) {
            writer.uint32(34).string(v);
        }
        for (const v of message.tokenUris) {
            writer.uint32(42).string(v);
        }
        for (const v of message.tokenData) {
            writer.uint32(50).string(v);
        }
        if (message.sender !== "") {
            writer.uint32(58).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(66).string(message.receiver);
        }
        if (message.memo !== "") {
            writer.uint32(74).string(message.memo);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNonFungibleTokenPacketData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classUri = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.classData = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.tokenIds.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenUris.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenData.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.receiver = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.memo = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? gt.String(object.classId) : "",
            classUri: isSet(object.classUri) ? gt.String(object.classUri) : "",
            classData: isSet(object.classData) ? gt.String(object.classData) : "",
            tokenIds: gt.Array.isArray(object?.tokenIds) ? object.tokenIds.map((e) => gt.String(e)) : [],
            tokenUris: gt.Array.isArray(object?.tokenUris) ? object.tokenUris.map((e) => gt.String(e)) : [],
            tokenData: gt.Array.isArray(object?.tokenData) ? object.tokenData.map((e) => gt.String(e)) : [],
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            receiver: isSet(object.receiver) ? gt.String(object.receiver) : "",
            memo: isSet(object.memo) ? gt.String(object.memo) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.classUri !== "") {
            obj.classUri = message.classUri;
        }
        if (message.classData !== "") {
            obj.classData = message.classData;
        }
        if (message.tokenIds?.length) {
            obj.tokenIds = message.tokenIds;
        }
        if (message.tokenUris?.length) {
            obj.tokenUris = message.tokenUris;
        }
        if (message.tokenData?.length) {
            obj.tokenData = message.tokenData;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.receiver !== "") {
            obj.receiver = message.receiver;
        }
        if (message.memo !== "") {
            obj.memo = message.memo;
        }
        return obj;
    },
    create(base) {
        return exports.NonFungibleTokenPacketData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNonFungibleTokenPacketData();
        message.classId = object.classId ?? "";
        message.classUri = object.classUri ?? "";
        message.classData = object.classData ?? "";
        message.tokenIds = object.tokenIds?.map((e) => e) || [];
        message.tokenUris = object.tokenUris?.map((e) => e) || [];
        message.tokenData = object.tokenData?.map((e) => e) || [];
        message.sender = object.sender ?? "";
        message.receiver = object.receiver ?? "";
        message.memo = object.memo ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=packet.js.map