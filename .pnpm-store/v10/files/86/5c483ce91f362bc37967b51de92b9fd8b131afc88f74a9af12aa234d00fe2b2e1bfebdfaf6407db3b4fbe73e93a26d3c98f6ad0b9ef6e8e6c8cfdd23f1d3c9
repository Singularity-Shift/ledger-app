import { BehaviorSubject } from 'rxjs';
import { Eip1193Provider, TransactionRequest } from 'ethers';
import { Keplr } from '@keplr-wallet/types';
import { Coin } from '@cosmjs/amino';
import { AccountData, GeneratedType } from '@cosmjs/proto-signing';
import { AminoConverters } from '@cosmjs/stargate';
import { Chain } from '@initia/initia-registry-types';
import { Msg } from '@initia/initia.js';
import { TxBodyValue } from './tx';
export interface WalletWidget {
    address$: BehaviorSubject<string>;
    account$: BehaviorSubject<AccountData | null>;
    wallet$: BehaviorSubject<WidgetWallet | null>;
    keplr$: BehaviorSubject<Keplr | null>;
    ethereum$: BehaviorSubject<Eip1193Provider | null>;
    isLoading$: BehaviorSubject<boolean>;
    onboard: () => void;
    view: (event?: MouseEvent) => void;
    bridge: () => void;
    bridgeComponent: {
        render: (container: HTMLElement) => void;
        address$: BehaviorSubject<string>;
        disconnect: () => void;
        openConnectPage: () => void;
    };
    requestTx: (txBodyValue: TxBodyValue, options?: RequestTxOptions) => Promise<string>;
    requestInitiaTx: (tx: {
        msgs: Msg[];
        memo?: string;
    }, options?: RequestTxOptions) => Promise<string>;
    requestEthereumTx: (transactionData: TransactionRequest, options?: RequestTxOptions) => Promise<string>;
    estimateTx: (txBodyValue: TxBodyValue, chainId?: string) => Promise<number>;
    estimateInitiaTx: (tx: {
        msgs: Msg[];
        memo?: string;
    }, chainId?: string) => Promise<number>;
    estimateEthereumTx(transactionData: TransactionRequest, chainId?: string): Promise<bigint>;
    signArbitrary: (data: string | Uint8Array) => Promise<string>;
    verifyArbitrary: (data: string | Uint8Array, signature: string) => Promise<boolean>;
    disconnect: () => Promise<void>;
}
export interface BaseWallet {
    type: "cosmos" | "evm";
    name: WalletNames | string;
    logo?: string;
    getProvider?: () => Eip1193Provider | Keplr | undefined;
    fallbackUrl?: string;
    isEip6963?: boolean;
    hidden?: boolean;
}
export interface AdditionalWallet extends BaseWallet {
    getAddress: () => Promise<string>;
    signMessage: (message: string | Uint8Array) => Promise<string>;
}
export type WidgetWallet = BaseWallet | AdditionalWallet;
export interface RequestTxOptions {
    chainId?: string;
    gas?: number;
    mode?: "sync" | "block";
    fee?: Coin;
}
export declare enum WalletNames {
    Keplr = "Keplr",
    Leap = "Leap Wallet"
}
export type WidgetTheme = "auto" | "dark" | "light";
export interface WidgetConfig {
    chainId?: string;
    customLayer?: Chain;
    protoTypes?: Iterable<[string, GeneratedType]>;
    aminoConverters?: AminoConverters;
    useKeplrAsDirectSigner?: boolean;
    additionalWallets?: WidgetWallet[];
    filterWallet?: (type: WidgetWallet) => boolean;
    gasAdjustment?: number;
    apiUrl?: string;
    dexApiUrl?: string;
    explorerUrl?: string;
    registryUrl?: string;
    swaplistUrl?: string;
    errorsUrl?: string;
    modules?: {
        usernames: string;
        dex_utils: string;
        swap_transfer: string;
    };
    theme?: WidgetTheme;
    bridgeOptions?: BridgeOptions;
    userAgreementConfig?: UserAgreementConfig;
}
export interface BridgeOptions {
    defaultTargetAddress?: string;
    defaultDstChainId?: string;
    defaultDstAssetDenom?: string;
    defaultSrcChainId?: string;
    defaultSrcAssetDenom?: string;
    readOnlyDstChain?: boolean;
    readOnlyDstAsset?: boolean;
    onTransferComplete?: () => void;
}
export interface UserAgreementConfig {
    productNamePossessive: string;
    termsOfServiceUrl: string;
    privacyPolicyUrl: string;
}
