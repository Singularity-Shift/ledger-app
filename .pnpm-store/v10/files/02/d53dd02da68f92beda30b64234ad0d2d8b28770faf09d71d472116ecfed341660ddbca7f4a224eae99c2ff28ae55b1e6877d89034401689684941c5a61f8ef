"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: celestia/blob/v1/params.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "celestia.blob.v1";
function createBaseParams() {
    return { gasPerBlobByte: 0, govMaxSquareSize: 0n };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.gasPerBlobByte !== 0) {
            writer.uint32(8).uint32(message.gasPerBlobByte);
        }
        if (message.govMaxSquareSize !== 0n) {
            if (BigInt.asUintN(64, message.govMaxSquareSize) !== message.govMaxSquareSize) {
                throw new gt.Error("value provided for field message.govMaxSquareSize of type uint64 too large");
            }
            writer.uint32(16).uint64(message.govMaxSquareSize.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.gasPerBlobByte = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.govMaxSquareSize = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gasPerBlobByte: isSet(object.gasPerBlobByte) ? gt.Number(object.gasPerBlobByte) : 0,
            govMaxSquareSize: isSet(object.govMaxSquareSize) ? BigInt(object.govMaxSquareSize) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gasPerBlobByte !== 0) {
            obj.gasPerBlobByte = Math.round(message.gasPerBlobByte);
        }
        if (message.govMaxSquareSize !== 0n) {
            obj.govMaxSquareSize = message.govMaxSquareSize.toString();
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.gasPerBlobByte = object.gasPerBlobByte ?? 0;
        message.govMaxSquareSize = object.govMaxSquareSize ?? 0n;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=params.js.map