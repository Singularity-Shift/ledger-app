"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/marketmap/v2/tx.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.MsgRemoveMarketsDesc = exports.MsgUpsertMarketsDesc = exports.MsgRemoveMarketAuthoritiesDesc = exports.MsgUpdateParamsDesc = exports.MsgUpdateMarketsDesc = exports.MsgCreateMarketsDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgRemoveMarketsResponse = exports.MsgRemoveMarkets = exports.MsgRemoveMarketAuthoritiesResponse = exports.MsgRemoveMarketAuthorities = exports.MsgParamsResponse = exports.MsgParams = exports.MsgUpdateMarketsResponse = exports.MsgUpdateMarkets = exports.MsgCreateMarketsResponse = exports.MsgCreateMarkets = exports.MsgUpsertMarketsResponse_MarketUpdatesEntry = exports.MsgUpsertMarketsResponse = exports.MsgUpsertMarkets = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const market_1 = require("./market");
const params_1 = require("./params");
exports.protobufPackage = "connect.marketmap.v2";
function createBaseMsgUpsertMarkets() {
    return { authority: "", markets: [] };
}
exports.MsgUpsertMarkets = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        for (const v of message.markets) {
            market_1.Market.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpsertMarkets();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.markets.push(market_1.Market.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            markets: gt.Array.isArray(object?.markets) ? object.markets.map((e) => market_1.Market.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.markets?.length) {
            obj.markets = message.markets.map((e) => market_1.Market.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpsertMarkets.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpsertMarkets();
        message.authority = object.authority ?? "";
        message.markets = object.markets?.map((e) => market_1.Market.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgUpsertMarketsResponse() {
    return { marketUpdates: new Map() };
}
exports.MsgUpsertMarketsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.marketUpdates.forEach((value, key) => {
            exports.MsgUpsertMarketsResponse_MarketUpdatesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpsertMarketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.MsgUpsertMarketsResponse_MarketUpdatesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.marketUpdates.set(entry1.key, entry1.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketUpdates: isObject(object.marketUpdates)
                ? Object.entries(object.marketUpdates).reduce((acc, [key, value]) => {
                    acc.set(key, Boolean(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.marketUpdates?.size) {
            obj.marketUpdates = {};
            message.marketUpdates.forEach((v, k) => {
                obj.marketUpdates[k] = v;
            });
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpsertMarketsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpsertMarketsResponse();
        message.marketUpdates = (() => {
            const m = new Map();
            (object.marketUpdates ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, gt.Boolean(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseMsgUpsertMarketsResponse_MarketUpdatesEntry() {
    return { key: "", value: false };
}
exports.MsgUpsertMarketsResponse_MarketUpdatesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== false) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpsertMarketsResponse_MarketUpdatesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? gt.Boolean(object.value) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== false) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpsertMarketsResponse_MarketUpdatesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpsertMarketsResponse_MarketUpdatesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? false;
        return message;
    },
};
function createBaseMsgCreateMarkets() {
    return { authority: "", createMarkets: [] };
}
exports.MsgCreateMarkets = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        for (const v of message.createMarkets) {
            market_1.Market.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateMarkets();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createMarkets.push(market_1.Market.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            createMarkets: gt.Array.isArray(object?.createMarkets)
                ? object.createMarkets.map((e) => market_1.Market.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.createMarkets?.length) {
            obj.createMarkets = message.createMarkets.map((e) => market_1.Market.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateMarkets.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateMarkets();
        message.authority = object.authority ?? "";
        message.createMarkets = object.createMarkets?.map((e) => market_1.Market.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCreateMarketsResponse() {
    return {};
}
exports.MsgCreateMarketsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateMarketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgCreateMarketsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgCreateMarketsResponse();
        return message;
    },
};
function createBaseMsgUpdateMarkets() {
    return { authority: "", updateMarkets: [] };
}
exports.MsgUpdateMarkets = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        for (const v of message.updateMarkets) {
            market_1.Market.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateMarkets();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.updateMarkets.push(market_1.Market.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            updateMarkets: gt.Array.isArray(object?.updateMarkets)
                ? object.updateMarkets.map((e) => market_1.Market.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.updateMarkets?.length) {
            obj.updateMarkets = message.updateMarkets.map((e) => market_1.Market.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateMarkets.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateMarkets();
        message.authority = object.authority ?? "";
        message.updateMarkets = object.updateMarkets?.map((e) => market_1.Market.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgUpdateMarketsResponse() {
    return {};
}
exports.MsgUpdateMarketsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateMarketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateMarketsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateMarketsResponse();
        return message;
    },
};
function createBaseMsgParams() {
    return { params: undefined, authority: "" };
}
exports.MsgParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.authority !== "") {
            writer.uint32(18).string(message.authority);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        return obj;
    },
    create(base) {
        return exports.MsgParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgParams();
        message.params =
            object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        message.authority = object.authority ?? "";
        return message;
    },
};
function createBaseMsgParamsResponse() {
    return {};
}
exports.MsgParamsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgParamsResponse();
        return message;
    },
};
function createBaseMsgRemoveMarketAuthorities() {
    return { removeAddresses: [], admin: "" };
}
exports.MsgRemoveMarketAuthorities = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.removeAddresses) {
            writer.uint32(10).string(v);
        }
        if (message.admin !== "") {
            writer.uint32(18).string(message.admin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveMarketAuthorities();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.removeAddresses.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.admin = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            removeAddresses: gt.Array.isArray(object?.removeAddresses)
                ? object.removeAddresses.map((e) => gt.String(e))
                : [],
            admin: isSet(object.admin) ? gt.String(object.admin) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.removeAddresses?.length) {
            obj.removeAddresses = message.removeAddresses;
        }
        if (message.admin !== "") {
            obj.admin = message.admin;
        }
        return obj;
    },
    create(base) {
        return exports.MsgRemoveMarketAuthorities.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveMarketAuthorities();
        message.removeAddresses = object.removeAddresses?.map((e) => e) || [];
        message.admin = object.admin ?? "";
        return message;
    },
};
function createBaseMsgRemoveMarketAuthoritiesResponse() {
    return {};
}
exports.MsgRemoveMarketAuthoritiesResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveMarketAuthoritiesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgRemoveMarketAuthoritiesResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgRemoveMarketAuthoritiesResponse();
        return message;
    },
};
function createBaseMsgRemoveMarkets() {
    return { authority: "", markets: [] };
}
exports.MsgRemoveMarkets = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        for (const v of message.markets) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveMarkets();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.markets.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            markets: gt.Array.isArray(object?.markets) ? object.markets.map((e) => gt.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.markets?.length) {
            obj.markets = message.markets;
        }
        return obj;
    },
    create(base) {
        return exports.MsgRemoveMarkets.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveMarkets();
        message.authority = object.authority ?? "";
        message.markets = object.markets?.map((e) => e) || [];
        return message;
    },
};
function createBaseMsgRemoveMarketsResponse() {
    return { deletedMarkets: [] };
}
exports.MsgRemoveMarketsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.deletedMarkets) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveMarketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.deletedMarkets.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            deletedMarkets: gt.Array.isArray(object?.deletedMarkets)
                ? object.deletedMarkets.map((e) => gt.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.deletedMarkets?.length) {
            obj.deletedMarkets = message.deletedMarkets;
        }
        return obj;
    },
    create(base) {
        return exports.MsgRemoveMarketsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveMarketsResponse();
        message.deletedMarkets = object.deletedMarkets?.map((e) => e) || [];
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.CreateMarkets = this.CreateMarkets.bind(this);
        this.UpdateMarkets = this.UpdateMarkets.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
        this.RemoveMarketAuthorities = this.RemoveMarketAuthorities.bind(this);
        this.UpsertMarkets = this.UpsertMarkets.bind(this);
        this.RemoveMarkets = this.RemoveMarkets.bind(this);
    }
    CreateMarkets(request, metadata) {
        return this.rpc.unary(exports.MsgCreateMarketsDesc, exports.MsgCreateMarkets.fromPartial(request), metadata);
    }
    UpdateMarkets(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateMarketsDesc, exports.MsgUpdateMarkets.fromPartial(request), metadata);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateParamsDesc, exports.MsgParams.fromPartial(request), metadata);
    }
    RemoveMarketAuthorities(request, metadata) {
        return this.rpc.unary(exports.MsgRemoveMarketAuthoritiesDesc, exports.MsgRemoveMarketAuthorities.fromPartial(request), metadata);
    }
    UpsertMarkets(request, metadata) {
        return this.rpc.unary(exports.MsgUpsertMarketsDesc, exports.MsgUpsertMarkets.fromPartial(request), metadata);
    }
    RemoveMarkets(request, metadata) {
        return this.rpc.unary(exports.MsgRemoveMarketsDesc, exports.MsgRemoveMarkets.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = { serviceName: "connect.marketmap.v2.Msg" };
exports.MsgCreateMarketsDesc = {
    methodName: "CreateMarkets",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreateMarkets.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgCreateMarketsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateMarketsDesc = {
    methodName: "UpdateMarkets",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateMarkets.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateMarketsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgParamsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgRemoveMarketAuthoritiesDesc = {
    methodName: "RemoveMarketAuthorities",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgRemoveMarketAuthorities.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgRemoveMarketAuthoritiesResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpsertMarketsDesc = {
    methodName: "UpsertMarkets",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpsertMarkets.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpsertMarketsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgRemoveMarketsDesc = {
    methodName: "RemoveMarkets",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgRemoveMarkets.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgRemoveMarketsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=tx.js.map