import { default as BigNumber } from 'bignumber.js';
import { BcsType, BcsTypeOptions, bcs } from '@mysten/bcs';
type BCS = typeof bcs;
interface InitiaBCS extends BCS {
    address: typeof addressSerializer;
    object: typeof addressSerializer;
    fixedPoint32: ReturnType<typeof createFixedPointSerializer>;
    fixedPoint64: ReturnType<typeof createFixedPointSerializer>;
    decimal128: ReturnType<typeof createFixedPointSerializer>;
    decimal256: ReturnType<typeof createFixedPointSerializer>;
    bigdecimal: ReturnType<typeof createFixedPointSerializer>;
}
declare function createFixedPointSerializer(scaleFactor: BigNumber, bcsType: (options?: BcsTypeOptions<string, number | bigint | string>) => BcsType<string, string | number | bigint>): (options?: BcsTypeOptions<string, string | number | bigint>) => BcsType<number, string | number>;
declare function addressSerializer(options?: BcsTypeOptions<Uint8Array, Iterable<number>>): BcsType<string, string>;
declare const initiaBCS: InitiaBCS;
export default initiaBCS;
