import { JSONSerializable } from '../../../util/json';
import { Coin } from '../../Coin';
import { AccAddress } from '../../bech32';
import { Any } from '@initia/initia.proto/google/protobuf/any';
import { MsgMint as MsgMint_pb } from '@initia/initia.proto/miniwasm/tokenfactory/v1/tx';
export declare class MsgMint extends JSONSerializable<MsgMint.Amino, MsgMint.Data, MsgMint.Proto> {
    sender: AccAddress;
    amount: Coin;
    mint_to_address: AccAddress;
    constructor(sender: AccAddress, amount: Coin, mint_to_address: AccAddress);
    static fromAmino(data: MsgMint.Amino): MsgMint;
    toAmino(): MsgMint.Amino;
    static fromData(data: MsgMint.Data): MsgMint;
    toData(): MsgMint.Data;
    static fromProto(data: MsgMint.Proto): MsgMint;
    toProto(): MsgMint.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): MsgMint;
}
export declare namespace MsgMint {
    interface Amino {
        type: 'tokenfactory/MsgMint';
        value: {
            sender: AccAddress;
            amount: Coin.Amino;
            mint_to_address: AccAddress;
        };
    }
    interface Data {
        '@type': '/miniwasm.tokenfactory.v1.MsgMint';
        sender: AccAddress;
        amount: Coin.Data;
        mint_to_address: AccAddress;
    }
    type Proto = MsgMint_pb;
}
