import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { AccessTuple, Log, Params } from "./types";
export declare const protobufPackage = "minievm.evm.v1";
/** MsgCreate is a message to create a contract with the CREATE opcode. */
export interface MsgCreate {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** Code is hex encoded raw contract bytes code. */
    code: string;
    /** Value is the amount of fee denom token to transfer to the contract. */
    value: string;
    /** AccessList is a predefined list of Ethereum addresses and their corresponding storage slots that a transaction will interact with during its execution. can be none */
    accessList: AccessTuple[];
}
/** MsgCreateResponse defines the Msg/Create response type. */
export interface MsgCreateResponse {
    result: string;
    /** hex encoded address */
    contractAddr: string;
    /** logs are the contract logs generated by the contract execution. */
    logs: Log[];
}
/** MsgCreate2 is a message to create a contract with the CREATE2 opcode. */
export interface MsgCreate2 {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /** Code is hex encoded raw contract bytes code. */
    code: string;
    /** Salt is a random value to distinguish contract creation. */
    salt: bigint;
    /** Value is the amount of fee denom token to transfer to the contract. */
    value: string;
    /** AccessList is a predefined list of Ethereum addresses and their corresponding storage slots that a transaction will interact with during its execution. can be none */
    accessList: AccessTuple[];
}
/** MsgCreate2Response defines the Msg/Create2 response type. */
export interface MsgCreate2Response {
    result: string;
    /** hex encoded address */
    contractAddr: string;
    /** logs are the contract logs generated by the contract execution. */
    logs: Log[];
}
/** MsgCall is a message to call an Ethereum contract. */
export interface MsgCall {
    /** Sender is the that actor that signed the messages */
    sender: string;
    /**
     * ContractAddr is the contract address to be executed.
     * It can be cosmos address or hex encoded address.
     */
    contractAddr: string;
    /** Hex encoded execution input bytes. */
    input: string;
    /** Value is the amount of fee denom token to transfer to the contract. */
    value: string;
    /** AccessList is a predefined list of Ethereum addresses and their corresponding storage slots that a transaction will interact with during its execution. can be none */
    accessList: AccessTuple[];
}
/** MsgCallResponse defines the Msg/Call response type. */
export interface MsgCallResponse {
    result: string;
    /** logs are the contract logs generated by the contract execution. */
    logs: Log[];
}
/** MsgUpdateParams defines a Msg for updating the x/evm module parameters. */
export interface MsgUpdateParams {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    /**
     * params defines the x/evm parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params?: Params | undefined;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}
export declare const MsgCreate: {
    encode(message: MsgCreate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreate;
    fromJSON(object: any): MsgCreate;
    toJSON(message: MsgCreate): unknown;
    create(base?: DeepPartial<MsgCreate>): MsgCreate;
    fromPartial(object: DeepPartial<MsgCreate>): MsgCreate;
};
export declare const MsgCreateResponse: {
    encode(message: MsgCreateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateResponse;
    fromJSON(object: any): MsgCreateResponse;
    toJSON(message: MsgCreateResponse): unknown;
    create(base?: DeepPartial<MsgCreateResponse>): MsgCreateResponse;
    fromPartial(object: DeepPartial<MsgCreateResponse>): MsgCreateResponse;
};
export declare const MsgCreate2: {
    encode(message: MsgCreate2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreate2;
    fromJSON(object: any): MsgCreate2;
    toJSON(message: MsgCreate2): unknown;
    create(base?: DeepPartial<MsgCreate2>): MsgCreate2;
    fromPartial(object: DeepPartial<MsgCreate2>): MsgCreate2;
};
export declare const MsgCreate2Response: {
    encode(message: MsgCreate2Response, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreate2Response;
    fromJSON(object: any): MsgCreate2Response;
    toJSON(message: MsgCreate2Response): unknown;
    create(base?: DeepPartial<MsgCreate2Response>): MsgCreate2Response;
    fromPartial(object: DeepPartial<MsgCreate2Response>): MsgCreate2Response;
};
export declare const MsgCall: {
    encode(message: MsgCall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCall;
    fromJSON(object: any): MsgCall;
    toJSON(message: MsgCall): unknown;
    create(base?: DeepPartial<MsgCall>): MsgCall;
    fromPartial(object: DeepPartial<MsgCall>): MsgCall;
};
export declare const MsgCallResponse: {
    encode(message: MsgCallResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCallResponse;
    fromJSON(object: any): MsgCallResponse;
    toJSON(message: MsgCallResponse): unknown;
    create(base?: DeepPartial<MsgCallResponse>): MsgCallResponse;
    fromPartial(object: DeepPartial<MsgCallResponse>): MsgCallResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
    fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
    fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
};
/** Msg defines the evm Msg service. */
export interface Msg {
    /** Create defines a method calling create of EVM. */
    Create(request: DeepPartial<MsgCreate>, metadata?: grpc.Metadata): Promise<MsgCreateResponse>;
    /** Create2 defines a method calling create2 of EVM. */
    Create2(request: DeepPartial<MsgCreate2>, metadata?: grpc.Metadata): Promise<MsgCreate2Response>;
    /** Call defines a method submitting Ethereum transactions. */
    Call(request: DeepPartial<MsgCall>, metadata?: grpc.Metadata): Promise<MsgCallResponse>;
    /**
     * UpdateParams defines an operation for updating the x/evm module
     * parameters.
     */
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: DeepPartial<MsgCreate>, metadata?: grpc.Metadata): Promise<MsgCreateResponse>;
    Create2(request: DeepPartial<MsgCreate2>, metadata?: grpc.Metadata): Promise<MsgCreate2Response>;
    Call(request: DeepPartial<MsgCall>, metadata?: grpc.Metadata): Promise<MsgCallResponse>;
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgCreateDesc: UnaryMethodDefinitionish;
export declare const MsgCreate2Desc: UnaryMethodDefinitionish;
export declare const MsgCallDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
