"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: sdk/mempool/v1/query.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.ServiceGetTxDistributionDesc = exports.ServiceDesc = exports.ServiceClientImpl = exports.GetTxDistributionResponse_DistributionEntry = exports.GetTxDistributionResponse = exports.GetTxDistributionRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "sdk.mempool.v1";
function createBaseGetTxDistributionRequest() {
    return {};
}
exports.GetTxDistributionRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTxDistributionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetTxDistributionRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetTxDistributionRequest();
        return message;
    },
};
function createBaseGetTxDistributionResponse() {
    return { distribution: new Map() };
}
exports.GetTxDistributionResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.distribution.forEach((value, key) => {
            exports.GetTxDistributionResponse_DistributionEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTxDistributionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.GetTxDistributionResponse_DistributionEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.distribution.set(entry1.key, entry1.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            distribution: isObject(object.distribution)
                ? Object.entries(object.distribution).reduce((acc, [key, value]) => {
                    acc.set(key, BigInt(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.distribution?.size) {
            obj.distribution = {};
            message.distribution.forEach((v, k) => {
                obj.distribution[k] = v.toString();
            });
        }
        return obj;
    },
    create(base) {
        return exports.GetTxDistributionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTxDistributionResponse();
        message.distribution = (() => {
            const m = new Map();
            (object.distribution ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, BigInt(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseGetTxDistributionResponse_DistributionEntry() {
    return { key: "", value: 0n };
}
exports.GetTxDistributionResponse_DistributionEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0n) {
            if (BigInt.asUintN(64, message.value) !== message.value) {
                throw new gt.Error("value provided for field message.value of type uint64 too large");
            }
            writer.uint32(16).uint64(message.value.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTxDistributionResponse_DistributionEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? BigInt(object.value) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0n) {
            obj.value = message.value.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GetTxDistributionResponse_DistributionEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTxDistributionResponse_DistributionEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0n;
        return message;
    },
};
class ServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetTxDistribution = this.GetTxDistribution.bind(this);
    }
    GetTxDistribution(request, metadata) {
        return this.rpc.unary(exports.ServiceGetTxDistributionDesc, exports.GetTxDistributionRequest.fromPartial(request), metadata);
    }
}
exports.ServiceClientImpl = ServiceClientImpl;
exports.ServiceDesc = { serviceName: "sdk.mempool.v1.Service" };
exports.ServiceGetTxDistributionDesc = {
    methodName: "GetTxDistribution",
    service: exports.ServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.GetTxDistributionRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.GetTxDistributionResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map