"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: noble/forwarding/v1/events.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowedDenomsConfigured = exports.AccountCleared = exports.AccountRegistered = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "noble.forwarding.v1";
function createBaseAccountRegistered() {
    return { address: "", channel: "", recipient: "", fallback: "" };
}
exports.AccountRegistered = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.channel !== "") {
            writer.uint32(18).string(message.channel);
        }
        if (message.recipient !== "") {
            writer.uint32(26).string(message.recipient);
        }
        if (message.fallback !== "") {
            writer.uint32(34).string(message.fallback);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountRegistered();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fallback = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? gt.String(object.address) : "",
            channel: isSet(object.channel) ? gt.String(object.channel) : "",
            recipient: isSet(object.recipient) ? gt.String(object.recipient) : "",
            fallback: isSet(object.fallback) ? gt.String(object.fallback) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        if (message.fallback !== "") {
            obj.fallback = message.fallback;
        }
        return obj;
    },
    create(base) {
        return exports.AccountRegistered.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccountRegistered();
        message.address = object.address ?? "";
        message.channel = object.channel ?? "";
        message.recipient = object.recipient ?? "";
        message.fallback = object.fallback ?? "";
        return message;
    },
};
function createBaseAccountCleared() {
    return { address: "", recipient: "" };
}
exports.AccountCleared = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountCleared();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? gt.String(object.address) : "",
            recipient: isSet(object.recipient) ? gt.String(object.recipient) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        return obj;
    },
    create(base) {
        return exports.AccountCleared.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccountCleared();
        message.address = object.address ?? "";
        message.recipient = object.recipient ?? "";
        return message;
    },
};
function createBaseAllowedDenomsConfigured() {
    return { previousDenoms: [], currentDenoms: [] };
}
exports.AllowedDenomsConfigured = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.previousDenoms) {
            writer.uint32(10).string(v);
        }
        for (const v of message.currentDenoms) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllowedDenomsConfigured();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.previousDenoms.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.currentDenoms.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            previousDenoms: gt.Array.isArray(object?.previousDenoms)
                ? object.previousDenoms.map((e) => gt.String(e))
                : [],
            currentDenoms: gt.Array.isArray(object?.currentDenoms)
                ? object.currentDenoms.map((e) => gt.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.previousDenoms?.length) {
            obj.previousDenoms = message.previousDenoms;
        }
        if (message.currentDenoms?.length) {
            obj.currentDenoms = message.currentDenoms;
        }
        return obj;
    },
    create(base) {
        return exports.AllowedDenomsConfigured.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAllowedDenomsConfigured();
        message.previousDenoms = object.previousDenoms?.map((e) => e) || [];
        message.currentDenoms = object.currentDenoms?.map((e) => e) || [];
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map