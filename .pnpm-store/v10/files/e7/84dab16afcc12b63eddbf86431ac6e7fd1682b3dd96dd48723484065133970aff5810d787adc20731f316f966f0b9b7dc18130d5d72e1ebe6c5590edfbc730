import { BcsTypeOptions } from '@mysten/bcs';
export declare const bcs: {
    address: (options?: BcsTypeOptions<Uint8Array, Iterable<number>>) => import('@mysten/bcs').BcsType<string, string>;
    object: (options?: BcsTypeOptions<Uint8Array, Iterable<number>>) => import('@mysten/bcs').BcsType<string, string>;
    fixed_point32: (options?: BcsTypeOptions<string, string | number | bigint>) => import('@mysten/bcs').BcsType<number, string | number>;
    fixed_point64: (options?: BcsTypeOptions<string, string | number | bigint>) => import('@mysten/bcs').BcsType<number, string | number>;
    decimal128: (options?: BcsTypeOptions<string, string | number | bigint>) => import('@mysten/bcs').BcsType<number, string | number>;
    decimal256: (options?: BcsTypeOptions<string, string | number | bigint>) => import('@mysten/bcs').BcsType<number, string | number>;
    biguint: (options?: BcsTypeOptions<string, string | number | bigint>) => import('@mysten/bcs').BcsType<bigint, string | number | bigint>;
    bigdecimal: (options?: BcsTypeOptions<string, string | number>) => import('@mysten/bcs').BcsType<number, string | number>;
    u8(options?: BcsTypeOptions<number>): import('@mysten/bcs').BcsType<number, number>;
    u16(options?: BcsTypeOptions<number>): import('@mysten/bcs').BcsType<number, number>;
    u32(options?: BcsTypeOptions<number>): import('@mysten/bcs').BcsType<number, number>;
    u64(options?: BcsTypeOptions<string, number | bigint | string>): import('@mysten/bcs').BcsType<string, string | number | bigint>;
    u128(options?: BcsTypeOptions<string, number | bigint | string>): import('@mysten/bcs').BcsType<string, string | number | bigint>;
    u256(options?: BcsTypeOptions<string, number | bigint | string>): import('@mysten/bcs').BcsType<string, string | number | bigint>;
    bool(options?: BcsTypeOptions<boolean>): import('@mysten/bcs').BcsType<boolean, boolean>;
    uleb128(options?: BcsTypeOptions<number>): import('@mysten/bcs').BcsType<number, number>;
    bytes<T extends number>(size: T, options?: BcsTypeOptions<Uint8Array, Iterable<number>>): import('@mysten/bcs').BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>>;
    byteVector(options?: BcsTypeOptions<Uint8Array, Iterable<number>>): import('@mysten/bcs').BcsType<Uint8Array<ArrayBufferLike>, Iterable<number>>;
    string(options?: BcsTypeOptions<string>): import('@mysten/bcs').BcsType<string, string>;
    fixedArray<T, Input>(size: number, type: import('@mysten/bcs').BcsType<T, Input>, options?: BcsTypeOptions<T[], Iterable<Input> & {
        length: number;
    }>): import('@mysten/bcs').BcsType<T[], Iterable<Input> & {
        length: number;
    }>;
    option<T, Input>(type: import('@mysten/bcs').BcsType<T, Input>): import('@mysten/bcs').BcsType<T | null, Input | null | undefined>;
    vector<T, Input>(type: import('@mysten/bcs').BcsType<T, Input>, options?: BcsTypeOptions<T[], Iterable<Input> & {
        length: number;
    }>): import('@mysten/bcs').BcsType<T[], Iterable<Input> & {
        length: number;
    }>;
    tuple<const Types extends readonly import('@mysten/bcs').BcsType<any>[]>(types: Types, options?: BcsTypeOptions<{ -readonly [K in keyof Types]: Types[K] extends import('@mysten/bcs').BcsType<infer T, any> ? T : never; }, { [K in keyof Types]: Types[K] extends import('@mysten/bcs').BcsType<any, infer T> ? T : never; }>): import('@mysten/bcs').BcsType<{ -readonly [K in keyof Types]: Types[K] extends import('@mysten/bcs').BcsType<infer T, any> ? T : never; }, { [K_1 in keyof Types]: Types[K_1] extends import('@mysten/bcs').BcsType<any, infer T_1> ? T_1 : never; }>;
    struct<T extends Record<string, import('@mysten/bcs').BcsType<any>>>(name: string, fields: T, options?: Omit<BcsTypeOptions<{ [K in keyof T]: T[K] extends import('@mysten/bcs').BcsType<infer U, any> ? U : never; }, { [K in keyof T]: T[K] extends import('@mysten/bcs').BcsType<any, infer U> ? U : never; }>, "name">): import('@mysten/bcs').BcsType<{ [K in keyof T]: T[K] extends import('@mysten/bcs').BcsType<infer U, any> ? U : never; }, { [K_1 in keyof T]: T[K_1] extends import('@mysten/bcs').BcsType<any, infer U_1> ? U_1 : never; }>;
    enum<T extends Record<string, import('@mysten/bcs').BcsType<any> | null>>(name: string, values: T, options?: Omit<BcsTypeOptions<import('@mysten/bcs').EnumOutputShape<{ [K in keyof T]: T[K] extends import('@mysten/bcs').BcsType<infer U, any> ? U : true; }>, import('@mysten/bcs').EnumInputShape<{ [K in keyof T]: T[K] extends import('@mysten/bcs').BcsType<any, infer U> ? U : boolean | object | null; }>>, "name">): import('@mysten/bcs').BcsType<import('@mysten/bcs').EnumOutputShape<{ [K in keyof T]: T[K] extends import('@mysten/bcs').BcsType<infer U, any> ? U : true; }>, import('@mysten/bcs').EnumInputShape<{ [K_1 in keyof T]: T[K_1] extends import('@mysten/bcs').BcsType<any, infer U_1> ? U_1 : boolean | object | null; }>>;
    map<K, V, InputK = K, InputV = V>(keyType: import('@mysten/bcs').BcsType<K, InputK>, valueType: import('@mysten/bcs').BcsType<V, InputV>): import('@mysten/bcs').BcsType<Map<K, V>, Map<InputK, InputV>>;
    lazy<T extends import('@mysten/bcs').BcsType<any>>(cb: () => T): T;
};
export declare function toLittleEndian(bigint: bigint): Uint8Array;
export declare function fromLittleEndian(bytes: number[]): bigint;
