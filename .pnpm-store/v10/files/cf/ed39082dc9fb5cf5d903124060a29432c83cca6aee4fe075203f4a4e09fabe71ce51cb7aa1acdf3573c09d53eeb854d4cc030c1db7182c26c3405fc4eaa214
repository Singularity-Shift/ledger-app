"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: noble/forwarding/v1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState_TotalForwardedEntry = exports.GenesisState_NumOfForwardsEntry = exports.GenesisState_NumOfAccountsEntry = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "noble.forwarding.v1";
function createBaseGenesisState() {
    return { allowedDenoms: [], numOfAccounts: new Map(), numOfForwards: new Map(), totalForwarded: new Map() };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.allowedDenoms) {
            writer.uint32(10).string(v);
        }
        message.numOfAccounts.forEach((value, key) => {
            exports.GenesisState_NumOfAccountsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        message.numOfForwards.forEach((value, key) => {
            exports.GenesisState_NumOfForwardsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        message.totalForwarded.forEach((value, key) => {
            exports.GenesisState_TotalForwardedEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.allowedDenoms.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.GenesisState_NumOfAccountsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.numOfAccounts.set(entry2.key, entry2.value);
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.GenesisState_NumOfForwardsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.numOfForwards.set(entry3.key, entry3.value);
                    }
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.GenesisState_TotalForwardedEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.totalForwarded.set(entry4.key, entry4.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allowedDenoms: gt.Array.isArray(object?.allowedDenoms)
                ? object.allowedDenoms.map((e) => gt.String(e))
                : [],
            numOfAccounts: isObject(object.numOfAccounts)
                ? Object.entries(object.numOfAccounts).reduce((acc, [key, value]) => {
                    acc.set(key, BigInt(value));
                    return acc;
                }, new Map())
                : new Map(),
            numOfForwards: isObject(object.numOfForwards)
                ? Object.entries(object.numOfForwards).reduce((acc, [key, value]) => {
                    acc.set(key, BigInt(value));
                    return acc;
                }, new Map())
                : new Map(),
            totalForwarded: isObject(object.totalForwarded)
                ? Object.entries(object.totalForwarded).reduce((acc, [key, value]) => {
                    acc.set(key, String(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allowedDenoms?.length) {
            obj.allowedDenoms = message.allowedDenoms;
        }
        if (message.numOfAccounts?.size) {
            obj.numOfAccounts = {};
            message.numOfAccounts.forEach((v, k) => {
                obj.numOfAccounts[k] = v.toString();
            });
        }
        if (message.numOfForwards?.size) {
            obj.numOfForwards = {};
            message.numOfForwards.forEach((v, k) => {
                obj.numOfForwards[k] = v.toString();
            });
        }
        if (message.totalForwarded?.size) {
            obj.totalForwarded = {};
            message.totalForwarded.forEach((v, k) => {
                obj.totalForwarded[k] = v;
            });
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.allowedDenoms = object.allowedDenoms?.map((e) => e) || [];
        message.numOfAccounts = (() => {
            const m = new Map();
            (object.numOfAccounts ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, BigInt(value));
                }
            });
            return m;
        })();
        message.numOfForwards = (() => {
            const m = new Map();
            (object.numOfForwards ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, BigInt(value));
                }
            });
            return m;
        })();
        message.totalForwarded = (() => {
            const m = new Map();
            (object.totalForwarded ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, gt.String(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseGenesisState_NumOfAccountsEntry() {
    return { key: "", value: 0n };
}
exports.GenesisState_NumOfAccountsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0n) {
            if (BigInt.asUintN(64, message.value) !== message.value) {
                throw new gt.Error("value provided for field message.value of type uint64 too large");
            }
            writer.uint32(16).uint64(message.value.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState_NumOfAccountsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? BigInt(object.value) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0n) {
            obj.value = message.value.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState_NumOfAccountsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState_NumOfAccountsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0n;
        return message;
    },
};
function createBaseGenesisState_NumOfForwardsEntry() {
    return { key: "", value: 0n };
}
exports.GenesisState_NumOfForwardsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0n) {
            if (BigInt.asUintN(64, message.value) !== message.value) {
                throw new gt.Error("value provided for field message.value of type uint64 too large");
            }
            writer.uint32(16).uint64(message.value.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState_NumOfForwardsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? BigInt(object.value) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0n) {
            obj.value = message.value.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState_NumOfForwardsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState_NumOfForwardsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0n;
        return message;
    },
};
function createBaseGenesisState_TotalForwardedEntry() {
    return { key: "", value: "" };
}
exports.GenesisState_TotalForwardedEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState_TotalForwardedEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? gt.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState_TotalForwardedEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState_TotalForwardedEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map