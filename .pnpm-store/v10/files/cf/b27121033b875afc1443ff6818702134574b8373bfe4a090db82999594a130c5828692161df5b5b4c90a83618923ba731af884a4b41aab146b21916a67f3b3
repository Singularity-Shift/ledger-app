"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: noble/forwarding/v1/query.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryStatsByChannelDesc = exports.QueryStatsDesc = exports.QueryAddressDesc = exports.QueryDenomsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.Stats = exports.QueryStatsByChannelResponse = exports.QueryStatsByChannel = exports.QueryStatsResponse_StatsEntry = exports.QueryStatsResponse = exports.QueryStats = exports.QueryAddressResponse = exports.QueryAddress = exports.QueryDenomsResponse = exports.QueryDenoms = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "noble.forwarding.v1";
function createBaseQueryDenoms() {
    return {};
}
exports.QueryDenoms = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenoms();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryDenoms.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryDenoms();
        return message;
    },
};
function createBaseQueryDenomsResponse() {
    return { allowedDenoms: [] };
}
exports.QueryDenomsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.allowedDenoms) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.allowedDenoms.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allowedDenoms: gt.Array.isArray(object?.allowedDenoms)
                ? object.allowedDenoms.map((e) => gt.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allowedDenoms?.length) {
            obj.allowedDenoms = message.allowedDenoms;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryDenomsResponse();
        message.allowedDenoms = object.allowedDenoms?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryAddress() {
    return { channel: "", recipient: "", fallback: "" };
}
exports.QueryAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(10).string(message.channel);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        if (message.fallback !== "") {
            writer.uint32(26).string(message.fallback);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fallback = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel: isSet(object.channel) ? gt.String(object.channel) : "",
            recipient: isSet(object.recipient) ? gt.String(object.recipient) : "",
            fallback: isSet(object.fallback) ? gt.String(object.fallback) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        if (message.fallback !== "") {
            obj.fallback = message.fallback;
        }
        return obj;
    },
    create(base) {
        return exports.QueryAddress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryAddress();
        message.channel = object.channel ?? "";
        message.recipient = object.recipient ?? "";
        message.fallback = object.fallback ?? "";
        return message;
    },
};
function createBaseQueryAddressResponse() {
    return { address: "", exists: false };
}
exports.QueryAddressResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.exists !== false) {
            writer.uint32(16).bool(message.exists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.exists = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? gt.String(object.address) : "",
            exists: isSet(object.exists) ? gt.Boolean(object.exists) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.exists !== false) {
            obj.exists = message.exists;
        }
        return obj;
    },
    create(base) {
        return exports.QueryAddressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryAddressResponse();
        message.address = object.address ?? "";
        message.exists = object.exists ?? false;
        return message;
    },
};
function createBaseQueryStats() {
    return {};
}
exports.QueryStats = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryStats.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryStats();
        return message;
    },
};
function createBaseQueryStatsResponse() {
    return { stats: new Map() };
}
exports.QueryStatsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.stats.forEach((value, key) => {
            exports.QueryStatsResponse_StatsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStatsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.QueryStatsResponse_StatsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.stats.set(entry1.key, entry1.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stats: isObject(object.stats)
                ? Object.entries(object.stats).reduce((acc, [key, value]) => {
                    acc.set(key, exports.Stats.fromJSON(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stats?.size) {
            obj.stats = {};
            message.stats.forEach((v, k) => {
                obj.stats[k] = exports.Stats.toJSON(v);
            });
        }
        return obj;
    },
    create(base) {
        return exports.QueryStatsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStatsResponse();
        message.stats = (() => {
            const m = new Map();
            (object.stats ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, exports.Stats.fromPartial(value));
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseQueryStatsResponse_StatsEntry() {
    return { key: "", value: undefined };
}
exports.QueryStatsResponse_StatsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.Stats.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStatsResponse_StatsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.Stats.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? exports.Stats.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Stats.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.QueryStatsResponse_StatsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStatsResponse_StatsEntry();
        message.key = object.key ?? "";
        message.value =
            object.value !== undefined && object.value !== null ? exports.Stats.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseQueryStatsByChannel() {
    return { channel: "" };
}
exports.QueryStatsByChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(10).string(message.channel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStatsByChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel: isSet(object.channel) ? gt.String(object.channel) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStatsByChannel.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStatsByChannel();
        message.channel = object.channel ?? "";
        return message;
    },
};
function createBaseQueryStatsByChannelResponse() {
    return { numOfAccounts: 0n, numOfForwards: 0n, totalForwarded: [] };
}
exports.QueryStatsByChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.numOfAccounts !== 0n) {
            if (BigInt.asUintN(64, message.numOfAccounts) !== message.numOfAccounts) {
                throw new gt.Error("value provided for field message.numOfAccounts of type uint64 too large");
            }
            writer.uint32(8).uint64(message.numOfAccounts.toString());
        }
        if (message.numOfForwards !== 0n) {
            if (BigInt.asUintN(64, message.numOfForwards) !== message.numOfForwards) {
                throw new gt.Error("value provided for field message.numOfForwards of type uint64 too large");
            }
            writer.uint32(16).uint64(message.numOfForwards.toString());
        }
        for (const v of message.totalForwarded) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStatsByChannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.numOfAccounts = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.numOfForwards = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.totalForwarded.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            numOfAccounts: isSet(object.numOfAccounts) ? BigInt(object.numOfAccounts) : 0n,
            numOfForwards: isSet(object.numOfForwards) ? BigInt(object.numOfForwards) : 0n,
            totalForwarded: gt.Array.isArray(object?.totalForwarded)
                ? object.totalForwarded.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.numOfAccounts !== 0n) {
            obj.numOfAccounts = message.numOfAccounts.toString();
        }
        if (message.numOfForwards !== 0n) {
            obj.numOfForwards = message.numOfForwards.toString();
        }
        if (message.totalForwarded?.length) {
            obj.totalForwarded = message.totalForwarded.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryStatsByChannelResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStatsByChannelResponse();
        message.numOfAccounts = object.numOfAccounts ?? 0n;
        message.numOfForwards = object.numOfForwards ?? 0n;
        message.totalForwarded = object.totalForwarded?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBaseStats() {
    return { chainId: "", numOfAccounts: 0n, numOfForwards: 0n, totalForwarded: [] };
}
exports.Stats = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        if (message.numOfAccounts !== 0n) {
            if (BigInt.asUintN(64, message.numOfAccounts) !== message.numOfAccounts) {
                throw new gt.Error("value provided for field message.numOfAccounts of type uint64 too large");
            }
            writer.uint32(16).uint64(message.numOfAccounts.toString());
        }
        if (message.numOfForwards !== 0n) {
            if (BigInt.asUintN(64, message.numOfForwards) !== message.numOfForwards) {
                throw new gt.Error("value provided for field message.numOfForwards of type uint64 too large");
            }
            writer.uint32(24).uint64(message.numOfForwards.toString());
        }
        for (const v of message.totalForwarded) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.numOfAccounts = longToBigint(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.numOfForwards = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.totalForwarded.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
            numOfAccounts: isSet(object.numOfAccounts) ? BigInt(object.numOfAccounts) : 0n,
            numOfForwards: isSet(object.numOfForwards) ? BigInt(object.numOfForwards) : 0n,
            totalForwarded: gt.Array.isArray(object?.totalForwarded)
                ? object.totalForwarded.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        if (message.numOfAccounts !== 0n) {
            obj.numOfAccounts = message.numOfAccounts.toString();
        }
        if (message.numOfForwards !== 0n) {
            obj.numOfForwards = message.numOfForwards.toString();
        }
        if (message.totalForwarded?.length) {
            obj.totalForwarded = message.totalForwarded.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Stats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStats();
        message.chainId = object.chainId ?? "";
        message.numOfAccounts = object.numOfAccounts ?? 0n;
        message.numOfForwards = object.numOfForwards ?? 0n;
        message.totalForwarded = object.totalForwarded?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Denoms = this.Denoms.bind(this);
        this.Address = this.Address.bind(this);
        this.Stats = this.Stats.bind(this);
        this.StatsByChannel = this.StatsByChannel.bind(this);
    }
    Denoms(request, metadata) {
        return this.rpc.unary(exports.QueryDenomsDesc, exports.QueryDenoms.fromPartial(request), metadata);
    }
    Address(request, metadata) {
        return this.rpc.unary(exports.QueryAddressDesc, exports.QueryAddress.fromPartial(request), metadata);
    }
    Stats(request, metadata) {
        return this.rpc.unary(exports.QueryStatsDesc, exports.QueryStats.fromPartial(request), metadata);
    }
    StatsByChannel(request, metadata) {
        return this.rpc.unary(exports.QueryStatsByChannelDesc, exports.QueryStatsByChannel.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "noble.forwarding.v1.Query" };
exports.QueryDenomsDesc = {
    methodName: "Denoms",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryDenoms.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryDenomsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryAddressDesc = {
    methodName: "Address",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAddress.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryAddressResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryStatsDesc = {
    methodName: "Stats",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryStats.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryStatsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.QueryStatsByChannelDesc = {
    methodName: "StatsByChannel",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryStatsByChannel.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryStatsByChannelResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map