import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { ClassTrace, Params } from "./types";
export declare const protobufPackage = "ibc.applications.nft_transfer.v1";
/**
 * QueryClassTraceRequest is the request type for the Query/ClassTrace RPC
 * method
 */
export interface QueryClassTraceRequest {
    /** hash (in hex format) of the class id trace information. */
    hash: string;
}
/**
 * QueryClassTraceResponse is the response type for the Query/ClassTrace RPC
 * method.
 */
export interface QueryClassTraceResponse {
    /** class_trace returns the requested class id trace information. */
    classTrace?: ClassTrace | undefined;
}
/**
 * QueryClassTracesRequest is the request type for the Query/ClassTraces RPC
 * method
 */
export interface QueryClassTracesRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/**
 * QueryClassTracesResponse is the response type for the Query/ClassTraces RPC
 * method.
 */
export interface QueryClassTracesResponse {
    /** class_traces returns all class id traces information. */
    classTraces: ClassTrace[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/**
 * QueryClassHashRequest is the request type for the Query/ClassHash RPC
 * method
 */
export interface QueryClassHashRequest {
    /** The class id trace ([port_id]/[channel_id])+/[class_id] */
    trace: string;
}
/**
 * QueryClassHashResponse is the response type for the Query/ClassHash RPC
 * method.
 */
export interface QueryClassHashResponse {
    /** hash (in hex format) of the class id trace information. */
    hash: string;
}
/** QueryEscrowAddressRequest is the request type for the EscrowAddress RPC method. */
export interface QueryEscrowAddressRequest {
    /** unique port identifier */
    portId: string;
    /** unique channel identifier */
    channelId: string;
}
/** QueryEscrowAddressResponse is the response type of the EscrowAddress RPC method. */
export interface QueryEscrowAddressResponse {
    /** the escrow account address */
    escrowAddress: string;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
}
export declare const QueryClassTraceRequest: {
    encode(message: QueryClassTraceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClassTraceRequest;
    fromJSON(object: any): QueryClassTraceRequest;
    toJSON(message: QueryClassTraceRequest): unknown;
    create(base?: DeepPartial<QueryClassTraceRequest>): QueryClassTraceRequest;
    fromPartial(object: DeepPartial<QueryClassTraceRequest>): QueryClassTraceRequest;
};
export declare const QueryClassTraceResponse: {
    encode(message: QueryClassTraceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClassTraceResponse;
    fromJSON(object: any): QueryClassTraceResponse;
    toJSON(message: QueryClassTraceResponse): unknown;
    create(base?: DeepPartial<QueryClassTraceResponse>): QueryClassTraceResponse;
    fromPartial(object: DeepPartial<QueryClassTraceResponse>): QueryClassTraceResponse;
};
export declare const QueryClassTracesRequest: {
    encode(message: QueryClassTracesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClassTracesRequest;
    fromJSON(object: any): QueryClassTracesRequest;
    toJSON(message: QueryClassTracesRequest): unknown;
    create(base?: DeepPartial<QueryClassTracesRequest>): QueryClassTracesRequest;
    fromPartial(object: DeepPartial<QueryClassTracesRequest>): QueryClassTracesRequest;
};
export declare const QueryClassTracesResponse: {
    encode(message: QueryClassTracesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClassTracesResponse;
    fromJSON(object: any): QueryClassTracesResponse;
    toJSON(message: QueryClassTracesResponse): unknown;
    create(base?: DeepPartial<QueryClassTracesResponse>): QueryClassTracesResponse;
    fromPartial(object: DeepPartial<QueryClassTracesResponse>): QueryClassTracesResponse;
};
export declare const QueryClassHashRequest: {
    encode(message: QueryClassHashRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClassHashRequest;
    fromJSON(object: any): QueryClassHashRequest;
    toJSON(message: QueryClassHashRequest): unknown;
    create(base?: DeepPartial<QueryClassHashRequest>): QueryClassHashRequest;
    fromPartial(object: DeepPartial<QueryClassHashRequest>): QueryClassHashRequest;
};
export declare const QueryClassHashResponse: {
    encode(message: QueryClassHashResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryClassHashResponse;
    fromJSON(object: any): QueryClassHashResponse;
    toJSON(message: QueryClassHashResponse): unknown;
    create(base?: DeepPartial<QueryClassHashResponse>): QueryClassHashResponse;
    fromPartial(object: DeepPartial<QueryClassHashResponse>): QueryClassHashResponse;
};
export declare const QueryEscrowAddressRequest: {
    encode(message: QueryEscrowAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEscrowAddressRequest;
    fromJSON(object: any): QueryEscrowAddressRequest;
    toJSON(message: QueryEscrowAddressRequest): unknown;
    create(base?: DeepPartial<QueryEscrowAddressRequest>): QueryEscrowAddressRequest;
    fromPartial(object: DeepPartial<QueryEscrowAddressRequest>): QueryEscrowAddressRequest;
};
export declare const QueryEscrowAddressResponse: {
    encode(message: QueryEscrowAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEscrowAddressResponse;
    fromJSON(object: any): QueryEscrowAddressResponse;
    toJSON(message: QueryEscrowAddressResponse): unknown;
    create(base?: DeepPartial<QueryEscrowAddressResponse>): QueryEscrowAddressResponse;
    fromPartial(object: DeepPartial<QueryEscrowAddressResponse>): QueryEscrowAddressResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
/** Query provides defines the gRPC querier service. */
export interface Query {
    /** ClassTrace queries a denomination trace information. */
    ClassTrace(request: DeepPartial<QueryClassTraceRequest>, metadata?: grpc.Metadata): Promise<QueryClassTraceResponse>;
    /** ClassTraces queries all denomination traces. */
    ClassTraces(request: DeepPartial<QueryClassTracesRequest>, metadata?: grpc.Metadata): Promise<QueryClassTracesResponse>;
    /** ClassHash queries a class id hash information. */
    ClassHash(request: DeepPartial<QueryClassHashRequest>, metadata?: grpc.Metadata): Promise<QueryClassHashResponse>;
    /** EscrowAddress returns the escrow address for a particular port and channel id. */
    EscrowAddress(request: DeepPartial<QueryEscrowAddressRequest>, metadata?: grpc.Metadata): Promise<QueryEscrowAddressResponse>;
    /** Params queries all parameters of the ibc-transfer module. */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    ClassTrace(request: DeepPartial<QueryClassTraceRequest>, metadata?: grpc.Metadata): Promise<QueryClassTraceResponse>;
    ClassTraces(request: DeepPartial<QueryClassTracesRequest>, metadata?: grpc.Metadata): Promise<QueryClassTracesResponse>;
    ClassHash(request: DeepPartial<QueryClassHashRequest>, metadata?: grpc.Metadata): Promise<QueryClassHashResponse>;
    EscrowAddress(request: DeepPartial<QueryEscrowAddressRequest>, metadata?: grpc.Metadata): Promise<QueryEscrowAddressResponse>;
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryClassTraceDesc: UnaryMethodDefinitionish;
export declare const QueryClassTracesDesc: UnaryMethodDefinitionish;
export declare const QueryClassHashDesc: UnaryMethodDefinitionish;
export declare const QueryEscrowAddressDesc: UnaryMethodDefinitionish;
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
