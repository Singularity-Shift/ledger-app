"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: sdk/proposals/v1/types.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalInfo_TxsByLaneEntry = exports.ProposalInfo = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "sdk.proposals.v1";
function createBaseProposalInfo() {
    return { txsByLane: new Map(), maxBlockSize: 0n, maxGasLimit: 0n, blockSize: 0n, gasLimit: 0n };
}
exports.ProposalInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.txsByLane.forEach((value, key) => {
            exports.ProposalInfo_TxsByLaneEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.maxBlockSize !== 0n) {
            if (BigInt.asIntN(64, message.maxBlockSize) !== message.maxBlockSize) {
                throw new gt.Error("value provided for field message.maxBlockSize of type int64 too large");
            }
            writer.uint32(16).int64(message.maxBlockSize.toString());
        }
        if (message.maxGasLimit !== 0n) {
            if (BigInt.asUintN(64, message.maxGasLimit) !== message.maxGasLimit) {
                throw new gt.Error("value provided for field message.maxGasLimit of type uint64 too large");
            }
            writer.uint32(24).uint64(message.maxGasLimit.toString());
        }
        if (message.blockSize !== 0n) {
            if (BigInt.asIntN(64, message.blockSize) !== message.blockSize) {
                throw new gt.Error("value provided for field message.blockSize of type int64 too large");
            }
            writer.uint32(32).int64(message.blockSize.toString());
        }
        if (message.gasLimit !== 0n) {
            if (BigInt.asUintN(64, message.gasLimit) !== message.gasLimit) {
                throw new gt.Error("value provided for field message.gasLimit of type uint64 too large");
            }
            writer.uint32(40).uint64(message.gasLimit.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.ProposalInfo_TxsByLaneEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.txsByLane.set(entry1.key, entry1.value);
                    }
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.maxBlockSize = longToBigint(reader.int64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.maxGasLimit = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.blockSize = longToBigint(reader.int64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.gasLimit = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            txsByLane: isObject(object.txsByLane)
                ? Object.entries(object.txsByLane).reduce((acc, [key, value]) => {
                    acc.set(key, BigInt(value));
                    return acc;
                }, new Map())
                : new Map(),
            maxBlockSize: isSet(object.maxBlockSize) ? BigInt(object.maxBlockSize) : 0n,
            maxGasLimit: isSet(object.maxGasLimit) ? BigInt(object.maxGasLimit) : 0n,
            blockSize: isSet(object.blockSize) ? BigInt(object.blockSize) : 0n,
            gasLimit: isSet(object.gasLimit) ? BigInt(object.gasLimit) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.txsByLane?.size) {
            obj.txsByLane = {};
            message.txsByLane.forEach((v, k) => {
                obj.txsByLane[k] = v.toString();
            });
        }
        if (message.maxBlockSize !== 0n) {
            obj.maxBlockSize = message.maxBlockSize.toString();
        }
        if (message.maxGasLimit !== 0n) {
            obj.maxGasLimit = message.maxGasLimit.toString();
        }
        if (message.blockSize !== 0n) {
            obj.blockSize = message.blockSize.toString();
        }
        if (message.gasLimit !== 0n) {
            obj.gasLimit = message.gasLimit.toString();
        }
        return obj;
    },
    create(base) {
        return exports.ProposalInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProposalInfo();
        message.txsByLane = (() => {
            const m = new Map();
            (object.txsByLane ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, BigInt(value));
                }
            });
            return m;
        })();
        message.maxBlockSize = object.maxBlockSize ?? 0n;
        message.maxGasLimit = object.maxGasLimit ?? 0n;
        message.blockSize = object.blockSize ?? 0n;
        message.gasLimit = object.gasLimit ?? 0n;
        return message;
    },
};
function createBaseProposalInfo_TxsByLaneEntry() {
    return { key: "", value: 0n };
}
exports.ProposalInfo_TxsByLaneEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0n) {
            if (BigInt.asUintN(64, message.value) !== message.value) {
                throw new gt.Error("value provided for field message.value of type uint64 too large");
            }
            writer.uint32(16).uint64(message.value.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposalInfo_TxsByLaneEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? gt.String(object.key) : "",
            value: isSet(object.value) ? BigInt(object.value) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0n) {
            obj.value = message.value.toString();
        }
        return obj;
    },
    create(base) {
        return exports.ProposalInfo_TxsByLaneEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProposalInfo_TxsByLaneEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0n;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map