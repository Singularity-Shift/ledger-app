"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: minievm/evm/v1/tx.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.MsgUpdateParamsDesc = exports.MsgCallDesc = exports.MsgCreate2Desc = exports.MsgCreateDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgCallResponse = exports.MsgCall = exports.MsgCreate2Response = exports.MsgCreate2 = exports.MsgCreateResponse = exports.MsgCreate = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "minievm.evm.v1";
function createBaseMsgCreate() {
    return { sender: "", code: "", value: "", accessList: [] };
}
exports.MsgCreate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.code !== "") {
            writer.uint32(18).string(message.code);
        }
        if (message.value !== "") {
            writer.uint32(26).string(message.value);
        }
        for (const v of message.accessList) {
            types_1.AccessTuple.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.accessList.push(types_1.AccessTuple.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            code: isSet(object.code) ? gt.String(object.code) : "",
            value: isSet(object.value) ? gt.String(object.value) : "",
            accessList: gt.Array.isArray(object?.accessList)
                ? object.accessList.map((e) => types_1.AccessTuple.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.accessList?.length) {
            obj.accessList = message.accessList.map((e) => types_1.AccessTuple.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreate();
        message.sender = object.sender ?? "";
        message.code = object.code ?? "";
        message.value = object.value ?? "";
        message.accessList = object.accessList?.map((e) => types_1.AccessTuple.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCreateResponse() {
    return { result: "", contractAddr: "", logs: [] };
}
exports.MsgCreateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        for (const v of message.logs) {
            types_1.Log.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logs.push(types_1.Log.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? gt.String(object.result) : "",
            contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "",
            logs: gt.Array.isArray(object?.logs) ? object.logs.map((e) => types_1.Log.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.logs?.length) {
            obj.logs = message.logs.map((e) => types_1.Log.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateResponse();
        message.result = object.result ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.logs = object.logs?.map((e) => types_1.Log.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCreate2() {
    return { sender: "", code: "", salt: 0n, value: "", accessList: [] };
}
exports.MsgCreate2 = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.code !== "") {
            writer.uint32(18).string(message.code);
        }
        if (message.salt !== 0n) {
            if (BigInt.asUintN(64, message.salt) !== message.salt) {
                throw new gt.Error("value provided for field message.salt of type uint64 too large");
            }
            writer.uint32(24).uint64(message.salt.toString());
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        for (const v of message.accessList) {
            types_1.AccessTuple.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreate2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.salt = longToBigint(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.accessList.push(types_1.AccessTuple.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            code: isSet(object.code) ? gt.String(object.code) : "",
            salt: isSet(object.salt) ? BigInt(object.salt) : 0n,
            value: isSet(object.value) ? gt.String(object.value) : "",
            accessList: gt.Array.isArray(object?.accessList)
                ? object.accessList.map((e) => types_1.AccessTuple.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.salt !== 0n) {
            obj.salt = message.salt.toString();
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.accessList?.length) {
            obj.accessList = message.accessList.map((e) => types_1.AccessTuple.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreate2.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreate2();
        message.sender = object.sender ?? "";
        message.code = object.code ?? "";
        message.salt = object.salt ?? 0n;
        message.value = object.value ?? "";
        message.accessList = object.accessList?.map((e) => types_1.AccessTuple.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCreate2Response() {
    return { result: "", contractAddr: "", logs: [] };
}
exports.MsgCreate2Response = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        for (const v of message.logs) {
            types_1.Log.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreate2Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logs.push(types_1.Log.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? gt.String(object.result) : "",
            contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "",
            logs: gt.Array.isArray(object?.logs) ? object.logs.map((e) => types_1.Log.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.logs?.length) {
            obj.logs = message.logs.map((e) => types_1.Log.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreate2Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreate2Response();
        message.result = object.result ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.logs = object.logs?.map((e) => types_1.Log.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCall() {
    return { sender: "", contractAddr: "", input: "", value: "", accessList: [] };
}
exports.MsgCall = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.input !== "") {
            writer.uint32(26).string(message.input);
        }
        if (message.value !== "") {
            writer.uint32(34).string(message.value);
        }
        for (const v of message.accessList) {
            types_1.AccessTuple.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCall();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.accessList.push(types_1.AccessTuple.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? gt.String(object.sender) : "",
            contractAddr: isSet(object.contractAddr) ? gt.String(object.contractAddr) : "",
            input: isSet(object.input) ? gt.String(object.input) : "",
            value: isSet(object.value) ? gt.String(object.value) : "",
            accessList: gt.Array.isArray(object?.accessList)
                ? object.accessList.map((e) => types_1.AccessTuple.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.accessList?.length) {
            obj.accessList = message.accessList.map((e) => types_1.AccessTuple.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCall.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCall();
        message.sender = object.sender ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.input = object.input ?? "";
        message.value = object.value ?? "";
        message.accessList = object.accessList?.map((e) => types_1.AccessTuple.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCallResponse() {
    return { result: "", logs: [] };
}
exports.MsgCallResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        for (const v of message.logs) {
            types_1.Log.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.logs.push(types_1.Log.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: isSet(object.result) ? gt.String(object.result) : "",
            logs: gt.Array.isArray(object?.logs) ? object.logs.map((e) => types_1.Log.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        if (message.logs?.length) {
            obj.logs = message.logs.map((e) => types_1.Log.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgCallResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCallResponse();
        message.result = object.result ?? "";
        message.logs = object.logs?.map((e) => types_1.Log.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? gt.String(object.authority) : "",
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Create2 = this.Create2.bind(this);
        this.Call = this.Call.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    Create(request, metadata) {
        return this.rpc.unary(exports.MsgCreateDesc, exports.MsgCreate.fromPartial(request), metadata);
    }
    Create2(request, metadata) {
        return this.rpc.unary(exports.MsgCreate2Desc, exports.MsgCreate2.fromPartial(request), metadata);
    }
    Call(request, metadata) {
        return this.rpc.unary(exports.MsgCallDesc, exports.MsgCall.fromPartial(request), metadata);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateParamsDesc, exports.MsgUpdateParams.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = { serviceName: "minievm.evm.v1.Msg" };
exports.MsgCreateDesc = {
    methodName: "Create",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreate.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgCreateResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgCreate2Desc = {
    methodName: "Create2",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreate2.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgCreate2Response.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgCallDesc = {
    methodName: "Call",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCall.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgCallResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateParamsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=tx.js.map