"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: minievm/evm/v1/types.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC721OriginTokenInfo = exports.AccessTuple = exports.Log = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "minievm.evm.v1";
function createBaseParams() {
    return {
        extraEips: [],
        allowedPublishers: [],
        allowCustomErc20: false,
        allowedCustomErc20s: [],
        feeDenom: "",
        gasRefundRatio: "",
        numRetainBlockHashes: 0n,
    };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.extraEips) {
            if (BigInt.asIntN(64, v) !== v) {
                throw new gt.Error("a value provided in array field extraEips of type int64 is too large");
            }
            writer.int64(v.toString());
        }
        writer.ldelim();
        for (const v of message.allowedPublishers) {
            writer.uint32(18).string(v);
        }
        if (message.allowCustomErc20 !== false) {
            writer.uint32(24).bool(message.allowCustomErc20);
        }
        for (const v of message.allowedCustomErc20s) {
            writer.uint32(34).string(v);
        }
        if (message.feeDenom !== "") {
            writer.uint32(42).string(message.feeDenom);
        }
        if (message.gasRefundRatio !== "") {
            writer.uint32(50).string(message.gasRefundRatio);
        }
        if (message.numRetainBlockHashes !== 0n) {
            if (BigInt.asUintN(64, message.numRetainBlockHashes) !== message.numRetainBlockHashes) {
                throw new gt.Error("value provided for field message.numRetainBlockHashes of type uint64 too large");
            }
            writer.uint32(56).uint64(message.numRetainBlockHashes.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.extraEips.push(longToBigint(reader.int64()));
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.extraEips.push(longToBigint(reader.int64()));
                        }
                        continue;
                    }
                    break;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.allowedPublishers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.allowCustomErc20 = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.allowedCustomErc20s.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.feeDenom = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.gasRefundRatio = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.numRetainBlockHashes = longToBigint(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            extraEips: gt.Array.isArray(object?.extraEips) ? object.extraEips.map((e) => BigInt(e)) : [],
            allowedPublishers: gt.Array.isArray(object?.allowedPublishers)
                ? object.allowedPublishers.map((e) => gt.String(e))
                : [],
            allowCustomErc20: isSet(object.allowCustomErc20) ? gt.Boolean(object.allowCustomErc20) : false,
            allowedCustomErc20s: gt.Array.isArray(object?.allowedCustomErc20s)
                ? object.allowedCustomErc20s.map((e) => gt.String(e))
                : [],
            feeDenom: isSet(object.feeDenom) ? gt.String(object.feeDenom) : "",
            gasRefundRatio: isSet(object.gasRefundRatio) ? gt.String(object.gasRefundRatio) : "",
            numRetainBlockHashes: isSet(object.numRetainBlockHashes) ? BigInt(object.numRetainBlockHashes) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.extraEips?.length) {
            obj.extraEips = message.extraEips.map((e) => e.toString());
        }
        if (message.allowedPublishers?.length) {
            obj.allowedPublishers = message.allowedPublishers;
        }
        if (message.allowCustomErc20 !== false) {
            obj.allowCustomErc20 = message.allowCustomErc20;
        }
        if (message.allowedCustomErc20s?.length) {
            obj.allowedCustomErc20s = message.allowedCustomErc20s;
        }
        if (message.feeDenom !== "") {
            obj.feeDenom = message.feeDenom;
        }
        if (message.gasRefundRatio !== "") {
            obj.gasRefundRatio = message.gasRefundRatio;
        }
        if (message.numRetainBlockHashes !== 0n) {
            obj.numRetainBlockHashes = message.numRetainBlockHashes.toString();
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.extraEips = object.extraEips?.map((e) => e) || [];
        message.allowedPublishers = object.allowedPublishers?.map((e) => e) || [];
        message.allowCustomErc20 = object.allowCustomErc20 ?? false;
        message.allowedCustomErc20s = object.allowedCustomErc20s?.map((e) => e) || [];
        message.feeDenom = object.feeDenom ?? "";
        message.gasRefundRatio = object.gasRefundRatio ?? "";
        message.numRetainBlockHashes = object.numRetainBlockHashes ?? 0n;
        return message;
    },
};
function createBaseLog() {
    return { address: "", topics: [], data: "" };
}
exports.Log = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.topics) {
            writer.uint32(18).string(v);
        }
        if (message.data !== "") {
            writer.uint32(26).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topics.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? gt.String(object.address) : "",
            topics: gt.Array.isArray(object?.topics) ? object.topics.map((e) => gt.String(e)) : [],
            data: isSet(object.data) ? gt.String(object.data) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.topics?.length) {
            obj.topics = message.topics;
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.Log.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLog();
        message.address = object.address ?? "";
        message.topics = object.topics?.map((e) => e) || [];
        message.data = object.data ?? "";
        return message;
    },
};
function createBaseAccessTuple() {
    return { address: "", storageKeys: [] };
}
exports.AccessTuple = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.storageKeys) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessTuple();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.storageKeys.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? gt.String(object.address) : "",
            storageKeys: gt.Array.isArray(object?.storageKeys)
                ? object.storageKeys.map((e) => gt.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.storageKeys?.length) {
            obj.storageKeys = message.storageKeys;
        }
        return obj;
    },
    create(base) {
        return exports.AccessTuple.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccessTuple();
        message.address = object.address ?? "";
        message.storageKeys = object.storageKeys?.map((e) => e) || [];
        return message;
    },
};
function createBaseERC721OriginTokenInfo() {
    return { tokenOriginId: "", tokenUri: "" };
}
exports.ERC721OriginTokenInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tokenOriginId !== "") {
            writer.uint32(10).string(message.tokenOriginId);
        }
        if (message.tokenUri !== "") {
            writer.uint32(18).string(message.tokenUri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseERC721OriginTokenInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenOriginId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenUri = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenOriginId: isSet(object.tokenOriginId) ? gt.String(object.tokenOriginId) : "",
            tokenUri: isSet(object.tokenUri) ? gt.String(object.tokenUri) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenOriginId !== "") {
            obj.tokenOriginId = message.tokenOriginId;
        }
        if (message.tokenUri !== "") {
            obj.tokenUri = message.tokenUri;
        }
        return obj;
    },
    create(base) {
        return exports.ERC721OriginTokenInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseERC721OriginTokenInfo();
        message.tokenOriginId = object.tokenOriginId ?? "";
        message.tokenUri = object.tokenUri ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map