import { JSONSerializable } from '../../../util/json';
import { Coins } from '../../Coins';
import { AccAddress } from '../../bech32';
import { StakeAuthorization as StakeAuthorization_pb, AuthorizationType, StakeAuthorization_Validators as StakeAuthorizationValidators_pb } from '@initia/initia.proto/initia/mstaking/v1/authz';
import { Any } from '@initia/initia.proto/google/protobuf/any';
export declare class StakeAuthorization extends JSONSerializable<StakeAuthorization.Amino, StakeAuthorization.Data, StakeAuthorization.Proto> {
    allow_list: StakeAuthorizationValidators;
    deny_list: StakeAuthorizationValidators;
    authorization_type: AuthorizationType;
    max_tokens: Coins;
    constructor(max_tokens: Coins.Input, allow_list: StakeAuthorizationValidators, deny_list: StakeAuthorizationValidators, authorization_type: AuthorizationType);
    static fromAmino(data: StakeAuthorization.Amino): StakeAuthorization;
    toAmino(): StakeAuthorization.Amino;
    static fromData(data: StakeAuthorization.Data): StakeAuthorization;
    toData(): StakeAuthorization.Data;
    static fromProto(proto: StakeAuthorization.Proto): StakeAuthorization;
    toProto(): StakeAuthorization.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): StakeAuthorization;
}
export declare class StakeAuthorizationValidators extends JSONSerializable<StakeAuthorizationValidators.Amino, StakeAuthorizationValidators.Data, StakeAuthorizationValidators.Proto> {
    address: AccAddress[];
    constructor(address: AccAddress[]);
    static fromAmino(data: StakeAuthorizationValidators.Amino): StakeAuthorizationValidators;
    toAmino(): StakeAuthorizationValidators.Amino;
    static fromData(data: StakeAuthorizationValidators.Data): StakeAuthorizationValidators;
    toData(): StakeAuthorizationValidators.Data;
    static fromProto(proto: StakeAuthorizationValidators.Proto): StakeAuthorizationValidators;
    toProto(): StakeAuthorizationValidators.Proto;
}
export declare namespace StakeAuthorizationValidators {
    interface Amino {
        address: AccAddress[];
    }
    interface Data {
        address: AccAddress[];
    }
    type Proto = StakeAuthorizationValidators_pb;
}
export declare namespace StakeAuthorization {
    type Type = AuthorizationType;
    const Type: typeof AuthorizationType;
    interface Amino {
        type: 'mstaking/StakeAuthorization';
        value: {
            max_tokens: Coins.Amino;
            allow_list: StakeAuthorizationValidators.Amino;
            deny_list: StakeAuthorizationValidators.Amino;
            authorization_type: string;
        };
    }
    interface Data {
        '@type': '/initia.mstaking.v1.StakeAuthorization';
        max_tokens: Coins.Data;
        allow_list: StakeAuthorizationValidators.Data;
        deny_list: StakeAuthorizationValidators.Data;
        authorization_type: string;
    }
    type Proto = StakeAuthorization_pb;
}
