"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmos/gov/v1beta1/genesis.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const gov_1 = require("./gov");
exports.protobufPackage = "cosmos.gov.v1beta1";
function createBaseGenesisState() {
    return {
        startingProposalId: 0n,
        deposits: [],
        votes: [],
        proposals: [],
        depositParams: undefined,
        votingParams: undefined,
        tallyParams: undefined,
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.startingProposalId !== 0n) {
            if (BigInt.asUintN(64, message.startingProposalId) !== message.startingProposalId) {
                throw new gt.Error("value provided for field message.startingProposalId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.startingProposalId.toString());
        }
        for (const v of message.deposits) {
            gov_1.Deposit.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.votes) {
            gov_1.Vote.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.proposals) {
            gov_1.Proposal.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.depositParams !== undefined) {
            gov_1.DepositParams.encode(message.depositParams, writer.uint32(42).fork()).ldelim();
        }
        if (message.votingParams !== undefined) {
            gov_1.VotingParams.encode(message.votingParams, writer.uint32(50).fork()).ldelim();
        }
        if (message.tallyParams !== undefined) {
            gov_1.TallyParams.encode(message.tallyParams, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.startingProposalId = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.deposits.push(gov_1.Deposit.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.votes.push(gov_1.Vote.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proposals.push(gov_1.Proposal.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.depositParams = gov_1.DepositParams.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.votingParams = gov_1.VotingParams.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.tallyParams = gov_1.TallyParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            startingProposalId: isSet(object.startingProposalId) ? BigInt(object.startingProposalId) : 0n,
            deposits: gt.Array.isArray(object?.deposits)
                ? object.deposits.map((e) => gov_1.Deposit.fromJSON(e))
                : [],
            votes: gt.Array.isArray(object?.votes) ? object.votes.map((e) => gov_1.Vote.fromJSON(e)) : [],
            proposals: gt.Array.isArray(object?.proposals)
                ? object.proposals.map((e) => gov_1.Proposal.fromJSON(e))
                : [],
            depositParams: isSet(object.depositParams) ? gov_1.DepositParams.fromJSON(object.depositParams) : undefined,
            votingParams: isSet(object.votingParams) ? gov_1.VotingParams.fromJSON(object.votingParams) : undefined,
            tallyParams: isSet(object.tallyParams) ? gov_1.TallyParams.fromJSON(object.tallyParams) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.startingProposalId !== 0n) {
            obj.startingProposalId = message.startingProposalId.toString();
        }
        if (message.deposits?.length) {
            obj.deposits = message.deposits.map((e) => gov_1.Deposit.toJSON(e));
        }
        if (message.votes?.length) {
            obj.votes = message.votes.map((e) => gov_1.Vote.toJSON(e));
        }
        if (message.proposals?.length) {
            obj.proposals = message.proposals.map((e) => gov_1.Proposal.toJSON(e));
        }
        if (message.depositParams !== undefined) {
            obj.depositParams = gov_1.DepositParams.toJSON(message.depositParams);
        }
        if (message.votingParams !== undefined) {
            obj.votingParams = gov_1.VotingParams.toJSON(message.votingParams);
        }
        if (message.tallyParams !== undefined) {
            obj.tallyParams = gov_1.TallyParams.toJSON(message.tallyParams);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.startingProposalId = object.startingProposalId ?? 0n;
        message.deposits = object.deposits?.map((e) => gov_1.Deposit.fromPartial(e)) || [];
        message.votes = object.votes?.map((e) => gov_1.Vote.fromPartial(e)) || [];
        message.proposals = object.proposals?.map((e) => gov_1.Proposal.fromPartial(e)) || [];
        message.depositParams =
            object.depositParams !== undefined && object.depositParams !== null
                ? gov_1.DepositParams.fromPartial(object.depositParams)
                : undefined;
        message.votingParams =
            object.votingParams !== undefined && object.votingParams !== null
                ? gov_1.VotingParams.fromPartial(object.votingParams)
                : undefined;
        message.tallyParams =
            object.tallyParams !== undefined && object.tallyParams !== null
                ? gov_1.TallyParams.fromPartial(object.tallyParams)
                : undefined;
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map