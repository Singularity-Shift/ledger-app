"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmos/evidence/v1beta1/evidence.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Equivocation = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "cosmos.evidence.v1beta1";
function createBaseEquivocation() {
    return { height: 0n, time: undefined, power: 0n, consensusAddress: "" };
}
exports.Equivocation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.height !== 0n) {
            if (BigInt.asIntN(64, message.height) !== message.height) {
                throw new gt.Error("value provided for field message.height of type int64 too large");
            }
            writer.uint32(8).int64(message.height.toString());
        }
        if (message.time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(18).fork()).ldelim();
        }
        if (message.power !== 0n) {
            if (BigInt.asIntN(64, message.power) !== message.power) {
                throw new gt.Error("value provided for field message.power of type int64 too large");
            }
            writer.uint32(24).int64(message.power.toString());
        }
        if (message.consensusAddress !== "") {
            writer.uint32(34).string(message.consensusAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEquivocation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.height = longToBigint(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.power = longToBigint(reader.int64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.consensusAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: isSet(object.height) ? BigInt(object.height) : 0n,
            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
            power: isSet(object.power) ? BigInt(object.power) : 0n,
            consensusAddress: isSet(object.consensusAddress) ? gt.String(object.consensusAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.height !== 0n) {
            obj.height = message.height.toString();
        }
        if (message.time !== undefined) {
            obj.time = message.time.toISOString();
        }
        if (message.power !== 0n) {
            obj.power = message.power.toString();
        }
        if (message.consensusAddress !== "") {
            obj.consensusAddress = message.consensusAddress;
        }
        return obj;
    },
    create(base) {
        return exports.Equivocation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEquivocation();
        message.height = object.height ?? 0n;
        message.time = object.time ?? undefined;
        message.power = object.power ?? 0n;
        message.consensusAddress = object.consensusAddress ?? "";
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (gt.Number(t.seconds.toString()) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new gt.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof gt.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new gt.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=evidence.js.map