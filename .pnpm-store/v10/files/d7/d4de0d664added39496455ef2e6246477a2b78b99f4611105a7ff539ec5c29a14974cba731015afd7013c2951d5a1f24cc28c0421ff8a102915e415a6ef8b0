"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: connect/abci/v2/vote_extensions.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OracleVoteExtension_PricesEntry = exports.OracleVoteExtension = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "connect.abci.v2";
function createBaseOracleVoteExtension() {
    return { prices: new Map() };
}
exports.OracleVoteExtension = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.prices.forEach((value, key) => {
            exports.OracleVoteExtension_PricesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOracleVoteExtension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.OracleVoteExtension_PricesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.prices.set(entry1.key, entry1.value);
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            prices: isObject(object.prices)
                ? Object.entries(object.prices).reduce((acc, [key, value]) => {
                    acc.set(BigInt(key), bytesFromBase64(value));
                    return acc;
                }, new Map())
                : new Map(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.prices?.size) {
            obj.prices = {};
            message.prices.forEach((v, k) => {
                obj.prices[k.toString()] = base64FromBytes(v);
            });
        }
        return obj;
    },
    create(base) {
        return exports.OracleVoteExtension.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOracleVoteExtension();
        message.prices = (() => {
            const m = new Map();
            (object.prices ?? new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, value);
                }
            });
            return m;
        })();
        return message;
    },
};
function createBaseOracleVoteExtension_PricesEntry() {
    return { key: 0n, value: new Uint8Array(0) };
}
exports.OracleVoteExtension_PricesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== 0n) {
            if (BigInt.asUintN(64, message.key) !== message.key) {
                throw new gt.Error("value provided for field message.key of type uint64 too large");
            }
            writer.uint32(8).uint64(message.key.toString());
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOracleVoteExtension_PricesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.key = longToBigint(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? BigInt(object.key) : 0n,
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== 0n) {
            obj.key = message.key.toString();
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.OracleVoteExtension_PricesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOracleVoteExtension_PricesEntry();
        message.key = object.key ?? 0n;
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (gt.Buffer) {
        return Uint8Array.from(gt.Buffer.from(b64, "base64"));
    }
    else {
        const bin = gt.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (gt.Buffer) {
        return gt.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(gt.String.fromCharCode(byte));
        });
        return gt.btoa(bin.join(""));
    }
}
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=vote_extensions.js.map