import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { CurrencyPair } from "../../types/v2/currency_pair";
export declare const protobufPackage = "connect.oracle.v2";
/**
 * Given an authority + a set of CurrencyPairs, the x/oracle module will
 * check to see that the authority has permissions to update the set of
 * CurrencyPairs tracked in the oracle, and add the given CurrencyPairs to be
 * tracked in each VoteExtension
 */
export interface MsgAddCurrencyPairs {
    /**
     * authority is the address of the account that is authorized to update the
     * x/oracle's CurrencyPairs
     */
    authority: string;
    /**
     * set of CurrencyPairs to be added to the module (+ prices if they are to be
     * set)
     */
    currencyPairs: CurrencyPair[];
}
export interface MsgAddCurrencyPairsResponse {
}
/**
 * Given an authority + a set of CurrencyPairIDs, the x/oracle module's message
 * service will remove all of the CurrencyPairs identified by each
 * CurrencyPairID in the request from state. Notice, if a given currency-pair
 * does not exist in state, the module ignores that currency-pair and continues
 * removing the rest.
 */
export interface MsgRemoveCurrencyPairs {
    /**
     * authority is the address of the account that is authorized to update the
     * x/oracle's CurrencyPairs
     */
    authority: string;
    /**
     * currency_pair_ids are the stringified representation of a currency-pairs
     * (base/quote) to be removed from the module's state
     */
    currencyPairIds: string[];
}
export interface MsgRemoveCurrencyPairsResponse {
}
export declare const MsgAddCurrencyPairs: {
    encode(message: MsgAddCurrencyPairs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddCurrencyPairs;
    fromJSON(object: any): MsgAddCurrencyPairs;
    toJSON(message: MsgAddCurrencyPairs): unknown;
    create(base?: DeepPartial<MsgAddCurrencyPairs>): MsgAddCurrencyPairs;
    fromPartial(object: DeepPartial<MsgAddCurrencyPairs>): MsgAddCurrencyPairs;
};
export declare const MsgAddCurrencyPairsResponse: {
    encode(_: MsgAddCurrencyPairsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddCurrencyPairsResponse;
    fromJSON(_: any): MsgAddCurrencyPairsResponse;
    toJSON(_: MsgAddCurrencyPairsResponse): unknown;
    create(base?: DeepPartial<MsgAddCurrencyPairsResponse>): MsgAddCurrencyPairsResponse;
    fromPartial(_: DeepPartial<MsgAddCurrencyPairsResponse>): MsgAddCurrencyPairsResponse;
};
export declare const MsgRemoveCurrencyPairs: {
    encode(message: MsgRemoveCurrencyPairs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveCurrencyPairs;
    fromJSON(object: any): MsgRemoveCurrencyPairs;
    toJSON(message: MsgRemoveCurrencyPairs): unknown;
    create(base?: DeepPartial<MsgRemoveCurrencyPairs>): MsgRemoveCurrencyPairs;
    fromPartial(object: DeepPartial<MsgRemoveCurrencyPairs>): MsgRemoveCurrencyPairs;
};
export declare const MsgRemoveCurrencyPairsResponse: {
    encode(_: MsgRemoveCurrencyPairsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveCurrencyPairsResponse;
    fromJSON(_: any): MsgRemoveCurrencyPairsResponse;
    toJSON(_: MsgRemoveCurrencyPairsResponse): unknown;
    create(base?: DeepPartial<MsgRemoveCurrencyPairsResponse>): MsgRemoveCurrencyPairsResponse;
    fromPartial(_: DeepPartial<MsgRemoveCurrencyPairsResponse>): MsgRemoveCurrencyPairsResponse;
};
/** Msg is the message service for the x/oracle module. */
export interface Msg {
    /**
     * AddCurrencyPairs will be used only by governance to update the set of
     * available CurrencyPairs. Given a set of CurrencyPair objects, update
     * the available currency pairs in the module .
     */
    AddCurrencyPairs(request: DeepPartial<MsgAddCurrencyPairs>, metadata?: grpc.Metadata): Promise<MsgAddCurrencyPairsResponse>;
    /**
     * RemoveCurrencyPairs will be used explicitly by governance to remove the
     * given set of currency-pairs from the module's state. Thus these
     * CurrencyPairs will no longer have price-data available from this module.
     */
    RemoveCurrencyPairs(request: DeepPartial<MsgRemoveCurrencyPairs>, metadata?: grpc.Metadata): Promise<MsgRemoveCurrencyPairsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    AddCurrencyPairs(request: DeepPartial<MsgAddCurrencyPairs>, metadata?: grpc.Metadata): Promise<MsgAddCurrencyPairsResponse>;
    RemoveCurrencyPairs(request: DeepPartial<MsgRemoveCurrencyPairs>, metadata?: grpc.Metadata): Promise<MsgRemoveCurrencyPairsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgAddCurrencyPairsDesc: UnaryMethodDefinitionish;
export declare const MsgRemoveCurrencyPairsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
