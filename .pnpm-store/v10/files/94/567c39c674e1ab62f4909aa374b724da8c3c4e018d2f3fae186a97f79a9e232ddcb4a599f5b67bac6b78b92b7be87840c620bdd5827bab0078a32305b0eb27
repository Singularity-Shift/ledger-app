import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { ACL, Params } from "./types";
export declare const protobufPackage = "initia.ibchooks.v1";
/**
 * QueryACLRequest is the request type for the Query/ACL RPC
 * method
 */
export interface QueryACLRequest {
    /** Address is a contract address (wasm, evm) or a contract deployer address (move). */
    address: string;
}
/**
 * QueryACLResponse is the response type for the Query/ACL RPC
 * method
 */
export interface QueryACLResponse {
    acl?: ACL | undefined;
}
/**
 * QueryACLsRequest is the request type for the Query/ACLAddrs
 * RPC method
 */
export interface QueryACLsRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/**
 * QueryACLsResponse is the response type for the
 * Query/ACLAddrs RPC method
 */
export interface QueryACLsResponse {
    acls: ACL[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
}
export declare const QueryACLRequest: {
    encode(message: QueryACLRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryACLRequest;
    fromJSON(object: any): QueryACLRequest;
    toJSON(message: QueryACLRequest): unknown;
    create(base?: DeepPartial<QueryACLRequest>): QueryACLRequest;
    fromPartial(object: DeepPartial<QueryACLRequest>): QueryACLRequest;
};
export declare const QueryACLResponse: {
    encode(message: QueryACLResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryACLResponse;
    fromJSON(object: any): QueryACLResponse;
    toJSON(message: QueryACLResponse): unknown;
    create(base?: DeepPartial<QueryACLResponse>): QueryACLResponse;
    fromPartial(object: DeepPartial<QueryACLResponse>): QueryACLResponse;
};
export declare const QueryACLsRequest: {
    encode(message: QueryACLsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryACLsRequest;
    fromJSON(object: any): QueryACLsRequest;
    toJSON(message: QueryACLsRequest): unknown;
    create(base?: DeepPartial<QueryACLsRequest>): QueryACLsRequest;
    fromPartial(object: DeepPartial<QueryACLsRequest>): QueryACLsRequest;
};
export declare const QueryACLsResponse: {
    encode(message: QueryACLsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryACLsResponse;
    fromJSON(object: any): QueryACLsResponse;
    toJSON(message: QueryACLsResponse): unknown;
    create(base?: DeepPartial<QueryACLsResponse>): QueryACLsResponse;
    fromPartial(object: DeepPartial<QueryACLsResponse>): QueryACLsResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
/** Query provides defines the gRPC querier service */
export interface Query {
    /** ACL gets ACL entry of an address. */
    ACL(request: DeepPartial<QueryACLRequest>, metadata?: grpc.Metadata): Promise<QueryACLResponse>;
    /** ACLs gets ACL entries. */
    ACLs(request: DeepPartial<QueryACLsRequest>, metadata?: grpc.Metadata): Promise<QueryACLsResponse>;
    /** Params queries all parameters. */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    ACL(request: DeepPartial<QueryACLRequest>, metadata?: grpc.Metadata): Promise<QueryACLResponse>;
    ACLs(request: DeepPartial<QueryACLsRequest>, metadata?: grpc.Metadata): Promise<QueryACLsResponse>;
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryACLDesc: UnaryMethodDefinitionish;
export declare const QueryACLsDesc: UnaryMethodDefinitionish;
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
