import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { MarketMap } from "../../marketmap/v2/market";
export declare const protobufPackage = "connect.service.v2";
/** QueryPricesRequest defines the request type for the the Prices method. */
export interface QueryPricesRequest {
}
/** QueryPricesResponse defines the response type for the Prices method. */
export interface QueryPricesResponse {
    /** Prices defines the list of prices. */
    prices: Map<string, string>;
    /** Timestamp defines the timestamp of the prices. */
    timestamp?: Date | undefined;
    /** Version defines the version of the oracle service that provided the prices. */
    version: string;
}
export interface QueryPricesResponse_PricesEntry {
    key: string;
    value: string;
}
/** QueryMarketMapRequest defines the request type for the MarketMap method. */
export interface QueryMarketMapRequest {
}
/** QueryMarketMapResponse defines the response type for the MarketMap method. */
export interface QueryMarketMapResponse {
    /** MarketMap defines the current market map configuration. */
    marketMap?: MarketMap | undefined;
}
/** QueryVersionRequest defines the request type for the Version method. */
export interface QueryVersionRequest {
}
/** QueryVersionResponse defines the response type for the Version method. */
export interface QueryVersionResponse {
    /** Version defines the current version of the oracle service. */
    version: string;
}
export declare const QueryPricesRequest: {
    encode(_: QueryPricesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPricesRequest;
    fromJSON(_: any): QueryPricesRequest;
    toJSON(_: QueryPricesRequest): unknown;
    create(base?: DeepPartial<QueryPricesRequest>): QueryPricesRequest;
    fromPartial(_: DeepPartial<QueryPricesRequest>): QueryPricesRequest;
};
export declare const QueryPricesResponse: {
    encode(message: QueryPricesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPricesResponse;
    fromJSON(object: any): QueryPricesResponse;
    toJSON(message: QueryPricesResponse): unknown;
    create(base?: DeepPartial<QueryPricesResponse>): QueryPricesResponse;
    fromPartial(object: DeepPartial<QueryPricesResponse>): QueryPricesResponse;
};
export declare const QueryPricesResponse_PricesEntry: {
    encode(message: QueryPricesResponse_PricesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPricesResponse_PricesEntry;
    fromJSON(object: any): QueryPricesResponse_PricesEntry;
    toJSON(message: QueryPricesResponse_PricesEntry): unknown;
    create(base?: DeepPartial<QueryPricesResponse_PricesEntry>): QueryPricesResponse_PricesEntry;
    fromPartial(object: DeepPartial<QueryPricesResponse_PricesEntry>): QueryPricesResponse_PricesEntry;
};
export declare const QueryMarketMapRequest: {
    encode(_: QueryMarketMapRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMarketMapRequest;
    fromJSON(_: any): QueryMarketMapRequest;
    toJSON(_: QueryMarketMapRequest): unknown;
    create(base?: DeepPartial<QueryMarketMapRequest>): QueryMarketMapRequest;
    fromPartial(_: DeepPartial<QueryMarketMapRequest>): QueryMarketMapRequest;
};
export declare const QueryMarketMapResponse: {
    encode(message: QueryMarketMapResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMarketMapResponse;
    fromJSON(object: any): QueryMarketMapResponse;
    toJSON(message: QueryMarketMapResponse): unknown;
    create(base?: DeepPartial<QueryMarketMapResponse>): QueryMarketMapResponse;
    fromPartial(object: DeepPartial<QueryMarketMapResponse>): QueryMarketMapResponse;
};
export declare const QueryVersionRequest: {
    encode(_: QueryVersionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVersionRequest;
    fromJSON(_: any): QueryVersionRequest;
    toJSON(_: QueryVersionRequest): unknown;
    create(base?: DeepPartial<QueryVersionRequest>): QueryVersionRequest;
    fromPartial(_: DeepPartial<QueryVersionRequest>): QueryVersionRequest;
};
export declare const QueryVersionResponse: {
    encode(message: QueryVersionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVersionResponse;
    fromJSON(object: any): QueryVersionResponse;
    toJSON(message: QueryVersionResponse): unknown;
    create(base?: DeepPartial<QueryVersionResponse>): QueryVersionResponse;
    fromPartial(object: DeepPartial<QueryVersionResponse>): QueryVersionResponse;
};
/** Oracle defines the gRPC oracle service. */
export interface Oracle {
    /** Prices defines a method for fetching the latest prices. */
    Prices(request: DeepPartial<QueryPricesRequest>, metadata?: grpc.Metadata): Promise<QueryPricesResponse>;
    /**
     * MarketMap defines a method for fetching the latest market map
     * configuration.
     */
    MarketMap(request: DeepPartial<QueryMarketMapRequest>, metadata?: grpc.Metadata): Promise<QueryMarketMapResponse>;
    /**
     * Version defines a method for fetching the current version of the oracle
     * service.
     */
    Version(request: DeepPartial<QueryVersionRequest>, metadata?: grpc.Metadata): Promise<QueryVersionResponse>;
}
export declare class OracleClientImpl implements Oracle {
    private readonly rpc;
    constructor(rpc: Rpc);
    Prices(request: DeepPartial<QueryPricesRequest>, metadata?: grpc.Metadata): Promise<QueryPricesResponse>;
    MarketMap(request: DeepPartial<QueryMarketMapRequest>, metadata?: grpc.Metadata): Promise<QueryMarketMapResponse>;
    Version(request: DeepPartial<QueryVersionRequest>, metadata?: grpc.Metadata): Promise<QueryVersionResponse>;
}
export declare const OracleDesc: {
    serviceName: string;
};
export declare const OraclePricesDesc: UnaryMethodDefinitionish;
export declare const OracleMarketMapDesc: UnaryMethodDefinitionish;
export declare const OracleVersionDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare const gt: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends gt.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
