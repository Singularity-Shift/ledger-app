import { Eip1193Provider, TransactionRequest } from 'ethers';
import { Keplr } from '@keplr-wallet/types';
import { AccountData } from '@cosmjs/proto-signing';
import { Msg } from '@initia/initia.js';
import { RequestTxOptions, WidgetWallet } from '@initia/utils';
export interface ReactWalletWidget {
    /** The current wallet address */
    address: string;
    /** The current wallet account */
    account: AccountData | null;
    /** The current connected wallet */
    wallet: WidgetWallet | null;
    /** Current connected Keplr provider */
    keplr: Keplr | null;
    /** Current connected Ethereum provider */
    ethereum: Eip1193Provider | null;
    /** Indicates whether the wallet connection is being established */
    isLoading: boolean;
    /** Triggers the wallet connection process */
    onboard(): void;
    /** Displays the wallet interface for managing assets */
    view(event?: React.MouseEvent): void;
    /** Signs and broadcasts a transaction, returning the transaction hash */
    requestTx(txBodyValue: {
        messages: {
            typeUrl: string;
            value: Record<string, any>;
        }[];
        memo?: string;
    }, options?: RequestTxOptions): Promise<string>;
    /** Utilizes the @initia/initia.js library to broadcast transactions */
    requestInitiaTx(tx: {
        msgs: Msg[];
        memo?: string;
    }, options?: RequestTxOptions): Promise<string>;
    /** Signs and broadcasts an Ethereum transaction, returning the transaction hash */
    requestEthereumTx(transactionData: TransactionRequest, options?: RequestTxOptions): Promise<string>;
    /** Estimate a transaction gas, returning the expected gas required */
    estimateTx(txBodyValue: {
        messages: {
            typeUrl: string;
            value: Record<string, any>;
        }[];
        memo?: string;
    }, chainId?: string): Promise<number>;
    /** Utilizes the @initia/initia.js library to estimate transactions */
    estimateInitiaTx(tx: {
        msgs: Msg[];
        memo?: string;
    }, chainId?: string): Promise<number>;
    /** Estimate an Ethereum transaction gas, returning the expected gas required */
    estimateEthereumTx(transactionData: TransactionRequest, chainId?: string): Promise<bigint>;
    /** Signs arbitrary data with the wallet */
    signArbitrary(data: string | Uint8Array): Promise<string>;
    /** Verifies a signature against the provided data */
    verifyArbitrary(data: string | Uint8Array, signature: string): Promise<boolean>;
    /** Disconnects the wallet */
    disconnect(): Promise<void>;
    /** Displays the bridge interface */
    bridge(): void;
    /** Displays the bridge interface inside an existing component */
    bridgeComponent: {
        render: (container: HTMLElement) => void;
        address: string;
        disconnect: () => void;
        openConnectPage: () => void;
    };
}
