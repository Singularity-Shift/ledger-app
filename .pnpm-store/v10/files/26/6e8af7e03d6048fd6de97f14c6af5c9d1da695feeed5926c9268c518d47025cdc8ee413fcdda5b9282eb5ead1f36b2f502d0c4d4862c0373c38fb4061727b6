"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: cosmos/store/streaming/abci/grpc.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.ABCIListenerServiceListenCommitDesc = exports.ABCIListenerServiceListenFinalizeBlockDesc = exports.ABCIListenerServiceDesc = exports.ABCIListenerServiceClientImpl = exports.ListenCommitResponse = exports.ListenCommitRequest = exports.ListenFinalizeBlockResponse = exports.ListenFinalizeBlockRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("../../../../tendermint/abci/types");
const listening_1 = require("../../v1beta1/listening");
exports.protobufPackage = "cosmos.store.streaming.abci";
function createBaseListenFinalizeBlockRequest() {
    return { req: undefined, res: undefined };
}
exports.ListenFinalizeBlockRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.req !== undefined) {
            types_1.RequestFinalizeBlock.encode(message.req, writer.uint32(10).fork()).ldelim();
        }
        if (message.res !== undefined) {
            types_1.ResponseFinalizeBlock.encode(message.res, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.req = types_1.RequestFinalizeBlock.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.res = types_1.ResponseFinalizeBlock.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            req: isSet(object.req) ? types_1.RequestFinalizeBlock.fromJSON(object.req) : undefined,
            res: isSet(object.res) ? types_1.ResponseFinalizeBlock.fromJSON(object.res) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.req !== undefined) {
            obj.req = types_1.RequestFinalizeBlock.toJSON(message.req);
        }
        if (message.res !== undefined) {
            obj.res = types_1.ResponseFinalizeBlock.toJSON(message.res);
        }
        return obj;
    },
    create(base) {
        return exports.ListenFinalizeBlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListenFinalizeBlockRequest();
        message.req =
            object.req !== undefined && object.req !== null
                ? types_1.RequestFinalizeBlock.fromPartial(object.req)
                : undefined;
        message.res =
            object.res !== undefined && object.res !== null
                ? types_1.ResponseFinalizeBlock.fromPartial(object.res)
                : undefined;
        return message;
    },
};
function createBaseListenFinalizeBlockResponse() {
    return {};
}
exports.ListenFinalizeBlockResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListenFinalizeBlockResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListenFinalizeBlockResponse();
        return message;
    },
};
function createBaseListenCommitRequest() {
    return { blockHeight: 0n, res: undefined, changeSet: [] };
}
exports.ListenCommitRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.blockHeight !== 0n) {
            if (BigInt.asIntN(64, message.blockHeight) !== message.blockHeight) {
                throw new gt.Error("value provided for field message.blockHeight of type int64 too large");
            }
            writer.uint32(8).int64(message.blockHeight.toString());
        }
        if (message.res !== undefined) {
            types_1.ResponseCommit.encode(message.res, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.changeSet) {
            listening_1.StoreKVPair.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = longToBigint(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.res = types_1.ResponseCommit.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.changeSet.push(listening_1.StoreKVPair.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? BigInt(object.blockHeight) : 0n,
            res: isSet(object.res) ? types_1.ResponseCommit.fromJSON(object.res) : undefined,
            changeSet: gt.Array.isArray(object?.changeSet)
                ? object.changeSet.map((e) => listening_1.StoreKVPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== 0n) {
            obj.blockHeight = message.blockHeight.toString();
        }
        if (message.res !== undefined) {
            obj.res = types_1.ResponseCommit.toJSON(message.res);
        }
        if (message.changeSet?.length) {
            obj.changeSet = message.changeSet.map((e) => listening_1.StoreKVPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListenCommitRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListenCommitRequest();
        message.blockHeight = object.blockHeight ?? 0n;
        message.res =
            object.res !== undefined && object.res !== null ? types_1.ResponseCommit.fromPartial(object.res) : undefined;
        message.changeSet = object.changeSet?.map((e) => listening_1.StoreKVPair.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListenCommitResponse() {
    return {};
}
exports.ListenCommitResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListenCommitResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListenCommitResponse();
        return message;
    },
};
class ABCIListenerServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.ListenFinalizeBlock = this.ListenFinalizeBlock.bind(this);
        this.ListenCommit = this.ListenCommit.bind(this);
    }
    ListenFinalizeBlock(request, metadata) {
        return this.rpc.unary(exports.ABCIListenerServiceListenFinalizeBlockDesc, exports.ListenFinalizeBlockRequest.fromPartial(request), metadata);
    }
    ListenCommit(request, metadata) {
        return this.rpc.unary(exports.ABCIListenerServiceListenCommitDesc, exports.ListenCommitRequest.fromPartial(request), metadata);
    }
}
exports.ABCIListenerServiceClientImpl = ABCIListenerServiceClientImpl;
exports.ABCIListenerServiceDesc = { serviceName: "cosmos.store.streaming.abci.ABCIListenerService" };
exports.ABCIListenerServiceListenFinalizeBlockDesc = {
    methodName: "ListenFinalizeBlock",
    service: exports.ABCIListenerServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.ListenFinalizeBlockRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.ListenFinalizeBlockResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
exports.ABCIListenerServiceListenCommitDesc = {
    methodName: "ListenCommit",
    service: exports.ABCIListenerServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.ListenCommitRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.ListenCommitResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
            : metadata ?? this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
const gt = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToBigint(long) {
    return BigInt(long.toString());
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends gt.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=grpc.js.map